Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "error_codes", "flex/coordinator", "flex/coordinator/restful_api", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/dev_and_test", "flex/interactive/development/java/BaseEdgeType", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/java/BasePropertyMeta", "flex/interactive/development/java/BaseVertexType", "flex/interactive/development/java/BaseVertexTypeXCsrParams", "flex/interactive/development/java/ColumnMapping", "flex/interactive/development/java/CreateEdgeType", "flex/interactive/development/java/CreateGraphRequest", "flex/interactive/development/java/CreateGraphResponse", "flex/interactive/development/java/CreateGraphSchemaRequest", "flex/interactive/development/java/CreateProcedureRequest", "flex/interactive/development/java/CreateProcedureResponse", "flex/interactive/development/java/CreatePropertyMeta", "flex/interactive/development/java/CreateVertexType", "flex/interactive/development/java/DateType", "flex/interactive/development/java/EdgeData", "flex/interactive/development/java/EdgeMapping", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/java/EdgeMappingTypeTriplet", "flex/interactive/development/java/EdgeRequest", "flex/interactive/development/java/EdgeStatistics", "flex/interactive/development/java/FixedChar", "flex/interactive/development/java/FixedCharChar", "flex/interactive/development/java/GSDataType", "flex/interactive/development/java/GetEdgeType", "flex/interactive/development/java/GetGraphResponse", "flex/interactive/development/java/GetGraphSchemaResponse", "flex/interactive/development/java/GetGraphStatisticsResponse", "flex/interactive/development/java/GetProcedureResponse", "flex/interactive/development/java/GetPropertyMeta", "flex/interactive/development/java/GetVertexType", "flex/interactive/development/java/GraphManagementApi", "flex/interactive/development/java/JobManagementApi", "flex/interactive/development/java/JobResponse", "flex/interactive/development/java/JobStatus", "flex/interactive/development/java/LongText", "flex/interactive/development/java/Parameter", "flex/interactive/development/java/PrimitiveType", "flex/interactive/development/java/ProcedureManagementApi", "flex/interactive/development/java/Property", "flex/interactive/development/java/QueryRequest", "flex/interactive/development/java/QueryServiceApi", "flex/interactive/development/java/SchemaMapping", "flex/interactive/development/java/SchemaMappingLoadingConfig", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/java/ServiceManagementApi", "flex/interactive/development/java/ServiceStatus", "flex/interactive/development/java/StartServiceRequest", "flex/interactive/development/java/StoredProcedureMeta", "flex/interactive/development/java/StringType", "flex/interactive/development/java/StringTypeString", "flex/interactive/development/java/TemporalType", "flex/interactive/development/java/TemporalTypeTemporal", "flex/interactive/development/java/TimeStampType", "flex/interactive/development/java/TypedValue", "flex/interactive/development/java/UpdateProcedureRequest", "flex/interactive/development/java/UploadFileResponse", "flex/interactive/development/java/VarChar", "flex/interactive/development/java/VarCharVarChar", "flex/interactive/development/java/VertexData", "flex/interactive/development/java/VertexEdgeRequest", "flex/interactive/development/java/VertexMapping", "flex/interactive/development/java/VertexRequest", "flex/interactive/development/java/VertexStatistics", "flex/interactive/development/java/VertexTypePairStatistics", "flex/interactive/development/java/java_sdk", "flex/interactive/development/python/BaseEdgeType", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/python/BasePropertyMeta", "flex/interactive/development/python/BaseVertexType", "flex/interactive/development/python/BaseVertexTypeXCsrParams", "flex/interactive/development/python/ColumnMapping", "flex/interactive/development/python/CreateEdgeType", "flex/interactive/development/python/CreateGraphRequest", "flex/interactive/development/python/CreateGraphResponse", "flex/interactive/development/python/CreateGraphSchemaRequest", "flex/interactive/development/python/CreateProcedureRequest", "flex/interactive/development/python/CreateProcedureResponse", "flex/interactive/development/python/CreatePropertyMeta", "flex/interactive/development/python/CreateVertexType", "flex/interactive/development/python/DateType", "flex/interactive/development/python/EdgeData", "flex/interactive/development/python/EdgeMapping", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/python/EdgeMappingTypeTriplet", "flex/interactive/development/python/EdgeRequest", "flex/interactive/development/python/EdgeStatistics", "flex/interactive/development/python/FixedChar", "flex/interactive/development/python/FixedCharChar", "flex/interactive/development/python/GSDataType", "flex/interactive/development/python/GetEdgeType", "flex/interactive/development/python/GetGraphResponse", "flex/interactive/development/python/GetGraphSchemaResponse", "flex/interactive/development/python/GetGraphStatisticsResponse", "flex/interactive/development/python/GetProcedureResponse", "flex/interactive/development/python/GetPropertyMeta", "flex/interactive/development/python/GetVertexType", "flex/interactive/development/python/GraphManagementApi", "flex/interactive/development/python/JobManagementApi", "flex/interactive/development/python/JobResponse", "flex/interactive/development/python/JobStatus", "flex/interactive/development/python/LongText", "flex/interactive/development/python/ModelProperty", "flex/interactive/development/python/Parameter", "flex/interactive/development/python/PrimitiveType", "flex/interactive/development/python/ProcedureManagementApi", "flex/interactive/development/python/QueryRequest", "flex/interactive/development/python/QueryServiceApi", "flex/interactive/development/python/SchemaMapping", "flex/interactive/development/python/SchemaMappingLoadingConfig", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/python/ServiceManagementApi", "flex/interactive/development/python/ServiceStatus", "flex/interactive/development/python/StartServiceRequest", "flex/interactive/development/python/StoredProcedureMeta", "flex/interactive/development/python/StringType", "flex/interactive/development/python/StringTypeString", "flex/interactive/development/python/TemporalType", "flex/interactive/development/python/TemporalTypeTemporal", "flex/interactive/development/python/TimeStampType", "flex/interactive/development/python/TypedValue", "flex/interactive/development/python/UpdateProcedureRequest", "flex/interactive/development/python/UploadFileResponse", "flex/interactive/development/python/VarChar", "flex/interactive/development/python/VarCharVarChar", "flex/interactive/development/python/VertexData", "flex/interactive/development/python/VertexEdgeRequest", "flex/interactive/development/python/VertexMapping", "flex/interactive/development/python/VertexRequest", "flex/interactive/development/python/VertexStatistics", "flex/interactive/development/python/VertexTypePairStatistics", "flex/interactive/development/python/python_sdk", "flex/interactive/development/restful_api", "flex/interactive/development/stored_procedure/cpp_procedure", "flex/interactive/development/stored_procedure/cypher_procedure", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/stored_procedures", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_k8s", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "error_codes.md", "flex/coordinator.md", "flex/coordinator/restful_api.rst", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/dev_and_test.md", "flex/interactive/development/java/BaseEdgeType.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/java/BasePropertyMeta.md", "flex/interactive/development/java/BaseVertexType.md", "flex/interactive/development/java/BaseVertexTypeXCsrParams.md", "flex/interactive/development/java/ColumnMapping.md", "flex/interactive/development/java/CreateEdgeType.md", "flex/interactive/development/java/CreateGraphRequest.md", "flex/interactive/development/java/CreateGraphResponse.md", "flex/interactive/development/java/CreateGraphSchemaRequest.md", "flex/interactive/development/java/CreateProcedureRequest.md", "flex/interactive/development/java/CreateProcedureResponse.md", "flex/interactive/development/java/CreatePropertyMeta.md", "flex/interactive/development/java/CreateVertexType.md", "flex/interactive/development/java/DateType.md", "flex/interactive/development/java/EdgeData.md", "flex/interactive/development/java/EdgeMapping.md", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/java/EdgeMappingTypeTriplet.md", "flex/interactive/development/java/EdgeRequest.md", "flex/interactive/development/java/EdgeStatistics.md", "flex/interactive/development/java/FixedChar.md", "flex/interactive/development/java/FixedCharChar.md", "flex/interactive/development/java/GSDataType.md", "flex/interactive/development/java/GetEdgeType.md", "flex/interactive/development/java/GetGraphResponse.md", "flex/interactive/development/java/GetGraphSchemaResponse.md", "flex/interactive/development/java/GetGraphStatisticsResponse.md", "flex/interactive/development/java/GetProcedureResponse.md", "flex/interactive/development/java/GetPropertyMeta.md", "flex/interactive/development/java/GetVertexType.md", "flex/interactive/development/java/GraphManagementApi.md", "flex/interactive/development/java/JobManagementApi.md", "flex/interactive/development/java/JobResponse.md", "flex/interactive/development/java/JobStatus.md", "flex/interactive/development/java/LongText.md", "flex/interactive/development/java/Parameter.md", "flex/interactive/development/java/PrimitiveType.md", "flex/interactive/development/java/ProcedureManagementApi.md", "flex/interactive/development/java/Property.md", "flex/interactive/development/java/QueryRequest.md", "flex/interactive/development/java/QueryServiceApi.md", "flex/interactive/development/java/SchemaMapping.md", "flex/interactive/development/java/SchemaMappingLoadingConfig.md", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/java/ServiceManagementApi.md", "flex/interactive/development/java/ServiceStatus.md", "flex/interactive/development/java/StartServiceRequest.md", "flex/interactive/development/java/StoredProcedureMeta.md", "flex/interactive/development/java/StringType.md", "flex/interactive/development/java/StringTypeString.md", "flex/interactive/development/java/TemporalType.md", "flex/interactive/development/java/TemporalTypeTemporal.md", "flex/interactive/development/java/TimeStampType.md", "flex/interactive/development/java/TypedValue.md", "flex/interactive/development/java/UpdateProcedureRequest.md", "flex/interactive/development/java/UploadFileResponse.md", "flex/interactive/development/java/VarChar.md", "flex/interactive/development/java/VarCharVarChar.md", "flex/interactive/development/java/VertexData.md", "flex/interactive/development/java/VertexEdgeRequest.md", "flex/interactive/development/java/VertexMapping.md", "flex/interactive/development/java/VertexRequest.md", "flex/interactive/development/java/VertexStatistics.md", "flex/interactive/development/java/VertexTypePairStatistics.md", "flex/interactive/development/java/java_sdk.md", "flex/interactive/development/python/BaseEdgeType.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/python/BasePropertyMeta.md", "flex/interactive/development/python/BaseVertexType.md", "flex/interactive/development/python/BaseVertexTypeXCsrParams.md", "flex/interactive/development/python/ColumnMapping.md", "flex/interactive/development/python/CreateEdgeType.md", "flex/interactive/development/python/CreateGraphRequest.md", "flex/interactive/development/python/CreateGraphResponse.md", "flex/interactive/development/python/CreateGraphSchemaRequest.md", "flex/interactive/development/python/CreateProcedureRequest.md", "flex/interactive/development/python/CreateProcedureResponse.md", "flex/interactive/development/python/CreatePropertyMeta.md", "flex/interactive/development/python/CreateVertexType.md", "flex/interactive/development/python/DateType.md", "flex/interactive/development/python/EdgeData.md", "flex/interactive/development/python/EdgeMapping.md", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/python/EdgeMappingTypeTriplet.md", "flex/interactive/development/python/EdgeRequest.md", "flex/interactive/development/python/EdgeStatistics.md", "flex/interactive/development/python/FixedChar.md", "flex/interactive/development/python/FixedCharChar.md", "flex/interactive/development/python/GSDataType.md", "flex/interactive/development/python/GetEdgeType.md", "flex/interactive/development/python/GetGraphResponse.md", "flex/interactive/development/python/GetGraphSchemaResponse.md", "flex/interactive/development/python/GetGraphStatisticsResponse.md", "flex/interactive/development/python/GetProcedureResponse.md", "flex/interactive/development/python/GetPropertyMeta.md", "flex/interactive/development/python/GetVertexType.md", "flex/interactive/development/python/GraphManagementApi.md", "flex/interactive/development/python/JobManagementApi.md", "flex/interactive/development/python/JobResponse.md", "flex/interactive/development/python/JobStatus.md", "flex/interactive/development/python/LongText.md", "flex/interactive/development/python/ModelProperty.md", "flex/interactive/development/python/Parameter.md", "flex/interactive/development/python/PrimitiveType.md", "flex/interactive/development/python/ProcedureManagementApi.md", "flex/interactive/development/python/QueryRequest.md", "flex/interactive/development/python/QueryServiceApi.md", "flex/interactive/development/python/SchemaMapping.md", "flex/interactive/development/python/SchemaMappingLoadingConfig.md", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/python/ServiceManagementApi.md", "flex/interactive/development/python/ServiceStatus.md", "flex/interactive/development/python/StartServiceRequest.md", "flex/interactive/development/python/StoredProcedureMeta.md", "flex/interactive/development/python/StringType.md", "flex/interactive/development/python/StringTypeString.md", "flex/interactive/development/python/TemporalType.md", "flex/interactive/development/python/TemporalTypeTemporal.md", "flex/interactive/development/python/TimeStampType.md", "flex/interactive/development/python/TypedValue.md", "flex/interactive/development/python/UpdateProcedureRequest.md", "flex/interactive/development/python/UploadFileResponse.md", "flex/interactive/development/python/VarChar.md", "flex/interactive/development/python/VarCharVarChar.md", "flex/interactive/development/python/VertexData.md", "flex/interactive/development/python/VertexEdgeRequest.md", "flex/interactive/development/python/VertexMapping.md", "flex/interactive/development/python/VertexRequest.md", "flex/interactive/development/python/VertexStatistics.md", "flex/interactive/development/python/VertexTypePairStatistics.md", "flex/interactive/development/python/python_sdk.md", "flex/interactive/development/restful_api.rst", "flex/interactive/development/stored_procedure/cpp_procedure.md", "flex/interactive/development/stored_procedure/cypher_procedure.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/stored_procedures.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_k8s.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "Error Codes", "Coordinator", "Coordinator RESTFul API", "Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "Deployment", "Development guide", "Dev and Test", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphManagementApi", "JobManagementApi", "JobResponse", "JobStatus", "LongText", "Parameter", "PrimitiveType", "ProcedureManagementApi", "Property", "QueryRequest", "QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceManagementApi", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "VarChar", "VarCharVarChar", "VertexData", "VertexEdgeRequest", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Java SDK Reference", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphManagementApi", "gs_interactive.AdminServiceJobManagementApi", "JobResponse", "JobStatus", "LongText", "ModelProperty", "Parameter", "PrimitiveType", "gs_interactive.AdminServiceProcedureManagementApi", "QueryRequest", "gs_interactive.QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "gs_interactive.AdminServiceServiceManagementApi", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "VarChar", "VarCharVarChar", "VertexData", "VertexEdgeRequest", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Python SDK Reference", "Interactive RESTFul API", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "Getting Started", "Glossary", "Installation", "Overview", "Stored Procedures", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 51, 86, 87, 93, 96, 122, 157, 158, 165, 167, 173, 193, 196, 197, 199, 201, 202, 204, 210, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 258, 276, 277, 278, 281, 289, 291, 292, 299, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 326, 327, 331, 332, 333, 336, 337, 339, 341, 342, 347, 350, 355, 356, 357, 358, 359, 360, 363, 366, 369, 372, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 463, 464, 466, 469, 470, 471, 472, 473, 474, 477, 478, 480], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 45, 50, 51, 86, 87, 93, 96, 102, 103, 157, 158, 165, 167, 173, 174, 196, 197, 198, 201, 202, 204, 210, 211, 212, 213, 214, 216, 217, 221, 222, 224, 225, 229, 231, 239, 243, 246, 247, 248, 249, 250, 257, 258, 259, 260, 261, 262, 265, 267, 268, 270, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 291, 298, 300, 306, 312, 315, 316, 320, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 458, 461, 462, 463, 464, 473, 474, 477, 480, 484, 485, 486, 488, 489, 490], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 41, 204, 223, 225, 239, 241, 243, 244, 246, 250, 252, 255, 260, 319, 457, 462, 470, 473, 474, 480], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 41, 43, 49, 50, 198, 200, 204, 207, 210, 211, 212, 215, 218, 219, 220, 223, 227, 231, 232, 236, 238, 239, 240, 241, 242, 244, 248, 252, 260, 276, 300, 305, 313, 319, 320, 321, 457, 463, 464, 466, 470, 471, 472, 473, 483, 484], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 204, 209, 225, 226, 237, 240, 244, 245, 246, 252, 276, 320, 481, 482], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 86, 87, 93, 96, 102, 122, 193, 197, 198, 199, 200, 201, 203, 204, 206, 210, 212, 214, 215, 218, 220, 221, 222, 223, 225, 226, 228, 231, 232, 233, 234, 235, 236, 238, 239, 241, 245, 246, 248, 249, 252, 319, 320, 321, 322, 457, 459, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 477, 480, 481, 483, 484, 485, 488, 490, 491], "offer": [0, 2, 9, 12, 20, 34, 43, 46, 47, 48, 49, 196, 197, 199, 200, 201, 209, 212, 216, 218, 222, 226, 227, 237, 239, 243, 244, 469], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 48, 200, 202, 204, 207, 211, 228, 236, 238, 239, 240, 242, 306, 313, 360, 404, 406, 457, 469, 474], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 45, 46, 47, 48, 51, 122, 193, 196, 199, 200, 201, 204, 207, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 250, 252, 256, 259, 272, 281, 283, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 319, 320, 321, 322, 336, 361, 363, 376, 377, 378, 386, 388, 405, 406, 407, 414, 416, 417, 435, 447, 449, 451, 455, 456, 457, 459, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 474, 477], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 45, 49, 50, 83, 105, 154, 176, 197, 199, 200, 201, 204, 222, 223, 227, 232, 233, 237, 238, 239, 241, 242, 243, 244, 245, 247, 316, 322, 457, 464, 469, 470, 473, 474, 478], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 43, 45, 46, 47, 48, 50, 193, 196, 197, 199, 200, 204, 209, 211, 215, 218, 219, 221, 223, 226, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 305, 307, 308, 309, 310, 311, 312, 314, 317, 320, 457, 463, 464, 466, 469, 470, 473, 484, 487, 488], "analyz": [0, 7, 13, 19, 27, 222, 237, 238, 240, 241, 243, 311, 469], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 50, 51, 197, 198, 200, 202, 204, 209, 211, 212, 215, 217, 218, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 255, 257, 263, 264, 269, 274, 275, 279, 287, 288, 305, 307, 308, 309, 310, 311, 315, 319, 329, 335, 351, 352, 367, 384, 400, 419, 449, 457, 459, 460, 463, 464, 466, 469, 471, 472, 474, 480, 481, 483, 484, 489], "least": [0, 6, 37, 46, 223, 322, 356, 378], "effort": [0, 34, 200, 221, 245, 469], "cover": [0, 6, 15, 41, 230], "wide": [0, 11, 12, 24, 213, 225, 226, 230, 237, 238, 240, 241, 242, 244, 309, 468, 474], "rang": [0, 13, 18, 47, 48, 218, 219, 221, 223, 226, 229, 230, 232, 233, 234, 235, 237, 238, 241, 244, 247, 249, 250, 263, 264, 274, 275, 279, 287, 288, 305, 310, 314, 362, 364, 366, 369, 372, 384, 390, 404, 405, 406, 407, 435, 457, 462, 469, 480, 483, 484, 488, 489], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 86, 87, 93, 102, 122, 157, 158, 165, 173, 193, 198, 199, 200, 204, 210, 211, 214, 222, 224, 226, 227, 239, 240, 241, 242, 245, 247, 248, 250, 260, 309, 388, 412, 468, 478], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 226, 237, 238, 239, 240, 243, 247, 248, 252, 307, 315, 408, 449, 454, 458, 468, 477], "detect": [0, 6, 8, 9, 226, 237, 238, 240, 241, 243, 244, 248, 376, 380, 381, 382], "etc": [0, 6, 7, 15, 29, 207, 211, 218, 219, 227, 230, 236, 238, 239, 242, 245, 249, 305, 308, 309, 310, 313, 324, 336, 345, 350, 351, 457, 459, 470], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 45, 46, 47, 48, 49, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 197, 198, 199, 200, 201, 204, 207, 210, 211, 212, 215, 216, 218, 219, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 252, 255, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 331, 332, 333, 346, 347, 352, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 372, 375, 376, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 396, 400, 402, 403, 404, 405, 406, 407, 408, 412, 414, 416, 418, 419, 422, 440, 449, 450, 451, 452, 453, 457, 460, 463, 464, 466, 468, 469, 470, 471, 473, 477, 478, 490], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 48, 51, 93, 122, 165, 193, 197, 207, 211, 214, 216, 217, 219, 221, 224, 226, 227, 230, 234, 235, 236, 237, 241, 244, 247, 248, 252, 305, 307, 309, 310, 311, 313, 316, 317, 319, 320, 322, 398, 399, 403, 404, 406, 408, 409, 410, 451, 452, 460, 480], "pie": [0, 1, 3, 8, 12, 34, 223, 225, 226, 240, 252, 255, 462, 474, 484, 486], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 196, 200, 201, 225, 226, 230, 237, 239, 240, 242, 244, 245, 252, 305, 310, 311, 469, 470, 474], "model": [0, 1, 3, 8, 9, 18, 46, 49, 86, 93, 96, 102, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 201, 202, 207, 211, 217, 218, 219, 223, 225, 226, 229, 230, 231, 236, 237, 238, 240, 241, 244, 252, 307, 309, 311, 312, 376, 380, 384, 386, 388, 390, 396, 398, 399, 404, 405, 406, 407, 408, 412, 413, 447, 454, 464, 468, 474, 484], "highli": [0, 4, 12, 34, 217, 223, 226, 239, 240, 468], "optim": [0, 9, 12, 14, 34, 45, 47, 48, 54, 57, 125, 128, 200, 201, 209, 211, 222, 223, 224, 226, 227, 229, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 245, 248, 305, 317, 319, 469, 471, 484], "best": [0, 16, 237, 239, 241, 244, 245, 248, 457, 480], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 45, 47, 49, 200, 209, 211, 216, 218, 221, 223, 224, 225, 227, 237, 239, 240, 242, 243, 244, 249, 307, 311, 313, 319, 414, 419, 449, 461, 463, 466, 470, 472, 474], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 46, 47, 48, 49, 50, 51, 93, 96, 122, 165, 167, 193, 196, 197, 198, 199, 200, 201, 204, 207, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 230, 232, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 252, 256, 258, 282, 283, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 331, 332, 335, 339, 360, 363, 376, 377, 378, 385, 386, 388, 404, 405, 406, 407, 414, 418, 419, 426, 428, 430, 435, 438, 443, 444, 449, 451, 457, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 474, 477, 478, 480], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 45, 47, 48, 49, 51, 54, 57, 125, 128, 193, 196, 197, 198, 199, 200, 201, 202, 204, 207, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 257, 258, 282, 283, 292, 297, 305, 306, 307, 308, 309, 311, 313, 316, 318, 319, 320, 321, 322, 341, 342, 351, 363, 366, 370, 376, 377, 378, 384, 386, 390, 391, 393, 395, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 414, 418, 422, 435, 440, 449, 451, 454, 455, 457, 459, 460, 462, 464, 468, 469, 472, 473, 474, 477, 478, 480, 484, 490], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 46, 122, 193, 199, 204, 207, 211, 216, 221, 223, 232, 237, 238, 240, 242, 244, 245, 246, 257, 305, 308, 317, 362, 449, 463, 469, 470, 480], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 86, 87, 93, 96, 102, 122, 219, 222, 227, 234, 235, 236, 238, 239, 240, 241, 244, 248, 250, 305, 308, 309, 311, 322, 379, 388, 389, 396, 397, 400, 414, 415, 451, 455, 457, 469, 470, 471, 473, 484, 488], "box": [0, 239, 450], "manner": [0, 2, 17, 18, 32, 36, 200, 238, 240, 241], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 42, 45, 46, 48, 51, 196, 199, 204, 210, 211, 212, 215, 216, 218, 219, 221, 222, 223, 226, 228, 229, 232, 233, 236, 242, 245, 248, 306, 307, 311, 314, 316, 317, 319, 322, 376, 388, 403, 404, 406, 415, 435, 457, 460, 468, 469, 470, 484], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 49, 51, 86, 93, 96, 122, 157, 165, 167, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 247, 248, 249, 250, 251, 252, 253, 256, 258, 282, 292, 294, 298, 299, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 330, 332, 334, 336, 337, 338, 339, 340, 341, 342, 351, 352, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 477, 478, 480, 483, 484, 488, 489, 490], "full": [0, 4, 12, 16, 17, 18, 22, 34, 47, 122, 193, 219, 226, 227, 230, 237, 242, 244, 248, 305, 308, 309, 311, 367, 470, 474, 480, 489], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 42, 45, 46, 47, 48, 52, 56, 59, 60, 62, 66, 68, 69, 74, 75, 79, 80, 81, 82, 83, 85, 86, 87, 93, 95, 97, 105, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 210, 216, 219, 221, 223, 226, 232, 234, 236, 239, 242, 246, 248, 250, 269, 270, 277, 278, 292, 306, 309, 311, 319, 322, 331, 333, 336, 343, 345, 351, 352, 355, 356, 360, 362, 363, 381, 384, 386, 388, 389, 390, 391, 392, 404, 408, 411, 414, 415, 420, 422, 435, 451, 457, 458, 460, 464, 468, 470, 473, 478, 485, 488], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 43, 45, 46, 48, 49, 96, 122, 167, 193, 196, 197, 200, 202, 204, 207, 210, 211, 213, 217, 219, 223, 224, 225, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 252, 258, 305, 306, 307, 309, 310, 311, 313, 314, 316, 319, 320, 322, 457, 460, 463, 464, 466, 468, 470, 471, 473, 474, 477, 483], "bf": [0, 15, 17, 34, 245, 248, 480], "df": [0, 34, 468], "hit": [0, 34, 36, 248, 249, 322, 458, 463, 480], "lpa": [0, 7, 34, 238, 248, 480], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 203, 238, 245, 248, 249, 256, 463, 464, 472, 473, 480], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 45, 46, 47, 48, 49, 51, 86, 87, 96, 102, 122, 157, 158, 165, 167, 173, 193, 196, 197, 199, 200, 201, 204, 207, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 266, 279, 282, 297, 305, 306, 307, 309, 310, 311, 312, 313, 315, 317, 319, 322, 339, 353, 354, 355, 356, 357, 358, 363, 366, 368, 369, 376, 377, 378, 380, 381, 384, 385, 386, 388, 390, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 416, 418, 435, 437, 440, 445, 449, 451, 452, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 468, 469, 470, 474, 477, 478, 480], "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 46, 199, 204, 207, 209, 212, 219, 221, 223, 232, 236, 238, 240, 241, 245, 247, 256, 304, 322, 327, 346, 347, 376, 464, 469, 470, 477], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 204, 206, 207, 211, 223, 240, 242], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 43, 45, 46, 51, 87, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 207, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 256, 276, 277, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 336, 355, 357, 362, 364, 366, 369, 376, 379, 383, 384, 385, 386, 388, 391, 396, 397, 399, 400, 404, 405, 406, 407, 408, 409, 416, 423, 432, 444, 449, 451, 452, 456, 457, 459, 460, 463, 464, 468, 469, 471, 477, 480, 484, 485, 488, 490], "given": [0, 7, 9, 13, 14, 20, 34, 45, 47, 96, 122, 167, 193, 196, 200, 202, 207, 210, 211, 212, 218, 221, 222, 223, 230, 236, 238, 241, 242, 244, 248, 309, 311, 314, 317, 319, 321, 356, 363, 374, 386, 387, 388, 389, 390, 391, 392, 400, 408, 409, 410, 414, 415, 416, 417, 421, 449, 452, 453, 456, 457, 463, 464, 468, 469, 472, 473], "weight": [0, 7, 19, 20, 33, 46, 47, 86, 122, 157, 165, 193, 203, 218, 221, 223, 230, 238, 240, 245, 248, 277, 305, 307, 308, 309, 310, 311, 314, 317, 319, 322, 324, 325, 326, 330, 341, 342, 384, 396, 400, 404, 407, 447, 455, 456, 457, 459, 464, 489], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 197, 200, 204, 211, 213, 216, 223, 229, 230, 237, 241, 305, 307, 313, 314, 315, 386, 468, 469], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 197, 200, 201, 207, 211, 212, 213, 215, 218, 221, 222, 223, 226, 230, 237, 238, 240, 241, 242, 247, 248, 249, 257, 263, 264, 273, 279, 281, 283, 284, 287, 288, 305, 308, 309, 311, 313, 314, 316, 319, 320, 322, 386, 388, 391, 410, 457, 468, 470, 472, 480, 484], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 198, 200, 211, 212, 221, 223, 226, 227, 230, 238, 239, 240, 241, 242, 243, 244, 247, 248, 250, 309, 310, 313, 315, 322, 403, 406, 407, 411, 416, 425, 448, 449, 461, 464, 470, 471, 480], "minimum": [0, 6, 204, 212, 216, 221, 223, 248, 376, 464], "distanc": [0, 7, 15, 17, 18, 238, 248, 322, 357, 396, 400, 404, 405, 406, 407, 408, 426, 438, 480], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 45, 46, 51, 87, 96, 102, 122, 157, 158, 167, 173, 193, 210, 211, 213, 219, 221, 222, 223, 236, 237, 238, 240, 241, 244, 246, 247, 249, 258, 265, 309, 320, 321, 322, 333, 337, 352, 376, 381, 383, 386, 388, 404, 406, 408, 457, 460, 463, 469, 477], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 46, 48, 70, 71, 122, 141, 142, 193, 203, 210, 216, 218, 219, 221, 225, 226, 227, 230, 237, 238, 239, 240, 241, 242, 245, 247, 248, 249, 250, 255, 276, 306, 307, 308, 309, 310, 311, 314, 317, 319, 321, 322, 396, 401, 418, 419, 435, 460, 462, 466, 468, 470, 471, 474, 480, 485], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 47, 48, 50, 197, 202, 204, 207, 211, 219, 221, 223, 226, 227, 230, 232, 237, 239, 240, 241, 242, 243, 244, 248, 250, 305, 307, 309, 311, 315, 318, 319, 320, 322, 326, 357, 359, 363, 366, 376, 385, 391, 397, 406, 407, 449, 457, 459, 460, 463, 464, 468, 469, 473], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 46, 47, 48, 86, 157, 200, 203, 210, 211, 213, 216, 218, 219, 221, 227, 230, 237, 238, 240, 241, 242, 247, 248, 249, 250, 278, 306, 307, 308, 309, 310, 311, 314, 317, 319, 380, 391, 401, 403, 418, 419, 430, 432, 443, 444, 450, 463, 464, 466, 468, 469, 470, 471, 480, 484, 485], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 41, 46, 48, 50, 51, 93, 96, 167, 196, 197, 198, 200, 201, 202, 204, 210, 212, 213, 216, 219, 221, 223, 227, 228, 230, 240, 241, 242, 244, 248, 267, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 322, 355, 356, 367, 376, 377, 378, 379, 380, 381, 382, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 470, 474, 488], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 210, 211, 219, 222, 223, 227, 230, 236, 237, 240, 244, 248, 305, 306, 307, 308, 311, 314, 319, 449, 457], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 199, 204, 207, 221, 225, 230, 237, 239, 240, 244, 245, 248, 250, 308, 322, 344, 345, 351, 403, 457, 466, 474], "dissimilar": 0, "measur": [0, 6, 20, 211, 240, 242, 248, 306, 322, 400, 401, 434], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 48, 49, 196, 197, 211, 216, 219, 221, 223, 227, 236, 240, 241, 245, 306, 307, 311, 312, 315, 317, 319, 321, 322, 350, 351, 372, 380, 381, 386, 388, 414, 415, 417, 450, 451, 457, 464, 468, 469, 470, 471, 472], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 46, 47, 48, 86, 122, 157, 165, 193, 202, 203, 212, 215, 218, 224, 238, 240, 241, 242, 247, 248, 249, 250, 267, 281, 295, 296, 297, 308, 311, 319, 320, 404, 419, 449, 454, 457, 460, 463, 464, 466, 470, 471, 478, 484, 485, 488], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 46, 47, 48, 86, 122, 157, 193, 196, 210, 211, 218, 219, 221, 222, 223, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 296, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 319, 322, 331, 333, 351, 352, 357, 361, 363, 368, 374, 376, 378, 379, 380, 382, 383, 385, 386, 388, 389, 391, 396, 399, 401, 404, 405, 406, 407, 408, 411, 412, 414, 416, 417, 422, 425, 437, 442, 447, 451, 453, 454, 455, 457, 463, 464, 466, 468, 469, 470, 471, 474, 478], "attribute_assort": [0, 34], "nearest": [0, 248], "neighbor": [0, 6, 9, 13, 14, 17, 18, 203, 218, 221, 223, 227, 230, 234, 240, 241, 242, 248, 250, 305, 306, 308, 309, 311, 313, 314, 315, 317, 318, 322, 327, 328, 347, 399, 400, 414, 417, 450, 457, 466, 469, 480], "return": [0, 6, 9, 15, 18, 20, 83, 105, 122, 154, 176, 193, 196, 197, 201, 203, 211, 213, 214, 215, 216, 218, 221, 222, 223, 230, 232, 234, 235, 238, 241, 248, 249, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 298, 299, 300, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 463, 464, 466, 469, 480, 489], "success": [0, 13, 22, 46, 86, 87, 89, 93, 102, 122, 157, 158, 165, 173, 193, 252, 307, 391, 422], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 45, 46, 47, 49, 86, 122, 157, 193, 197, 199, 201, 204, 207, 210, 212, 213, 217, 221, 223, 227, 229, 230, 232, 233, 234, 235, 236, 238, 245, 247, 248, 249, 250, 264, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 322, 324, 325, 326, 328, 332, 333, 336, 337, 341, 351, 355, 356, 358, 359, 360, 361, 363, 366, 368, 369, 371, 372, 373, 375, 376, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 395, 397, 404, 405, 406, 407, 408, 414, 415, 419, 422, 435, 440, 449, 451, 452, 457, 459, 460, 464, 466, 469, 470, 471, 472, 478, 480, 482, 483, 484, 485, 487, 488, 489, 490], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 45, 47, 48, 49, 51, 86, 93, 96, 102, 122, 157, 167, 193, 197, 199, 201, 202, 207, 210, 211, 212, 213, 217, 218, 219, 221, 223, 227, 229, 230, 232, 233, 234, 235, 236, 238, 241, 242, 245, 248, 249, 305, 308, 310, 311, 312, 314, 319, 320, 321, 322, 324, 325, 326, 328, 332, 333, 336, 341, 342, 345, 350, 351, 355, 357, 358, 359, 360, 361, 363, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 459, 460, 464, 469, 470, 471, 472, 478, 480, 484, 485, 487, 488, 489, 490], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 45, 47, 48, 49, 51, 86, 87, 96, 122, 157, 193, 202, 210, 211, 212, 213, 217, 218, 221, 223, 227, 229, 230, 232, 233, 234, 235, 236, 238, 241, 242, 245, 248, 249, 305, 308, 309, 310, 311, 312, 314, 319, 322, 324, 325, 326, 328, 336, 337, 341, 342, 345, 350, 351, 358, 359, 360, 363, 368, 369, 374, 376, 378, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 424, 426, 428, 429, 430, 434, 435, 437, 439, 440, 442, 449, 450, 451, 452, 457, 459, 460, 464, 468, 469, 471, 472, 480, 481, 482, 484, 485, 488, 489, 490], "average_degree_connect": [0, 248, 480], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 45, 49, 83, 101, 105, 122, 154, 172, 176, 193, 196, 198, 200, 204, 211, 216, 221, 222, 223, 230, 235, 238, 242, 247, 248, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 270, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 297, 304, 306, 307, 309, 311, 314, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 339, 340, 341, 342, 346, 347, 351, 352, 355, 357, 359, 360, 362, 363, 364, 366, 367, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 464, 468, 469, 470, 477], "str": [0, 20, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 183, 184, 187, 189, 190, 191, 192, 193, 232, 233, 234, 236, 248, 249, 250, 256, 257, 263, 264, 265, 267, 274, 275, 276, 279, 281, 282, 283, 284, 287, 288, 317, 319, 320, 335, 337, 451, 457, 459, 463, 464, 470, 485, 490], "target": [0, 6, 17, 22, 24, 122, 212, 221, 227, 228, 237, 238, 242, 244, 248, 250, 311, 313, 319, 322, 393, 395, 414, 417, 449, 470, 480], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 45, 47, 48, 50, 51, 200, 207, 210, 211, 212, 215, 219, 221, 223, 226, 230, 237, 238, 239, 240, 241, 242, 245, 247, 248, 249, 271, 277, 305, 307, 309, 311, 312, 313, 322, 393, 432, 447, 457, 469, 470, 474, 480, 489], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 122, 203, 207, 213, 216, 219, 222, 223, 230, 238, 241, 242, 247, 248, 249, 250, 305, 308, 309, 310, 311, 314, 317, 319, 320, 321, 322, 328, 351, 376, 379, 384, 386, 390, 396, 399, 404, 407, 414, 417, 419, 451, 457, 463, 464, 468, 469, 470, 480, 484, 488, 489], "sum": [0, 20, 216, 219, 234, 240, 248, 250, 322, 376, 381, 384, 386, 387, 388, 397, 404, 407, 408, 415, 416, 455, 457, 488], "fraction": [0, 248, 322, 376], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 45, 200, 211, 213, 215, 221, 223, 230, 236, 241, 242, 248, 250, 255, 311, 315, 317, 366, 404, 406, 449, 457, 461, 470, 480, 485, 490], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 43, 46, 197, 199, 209, 210, 211, 213, 214, 215, 217, 218, 221, 222, 223, 224, 227, 230, 236, 238, 240, 241, 242, 244, 249, 252, 306, 307, 309, 310, 311, 316, 317, 319, 322, 352, 366, 383, 422, 457, 468, 469, 470], "betweenness_centr": [0, 34, 322], "normal": [0, 6, 27, 204, 223, 248, 311, 319, 322, 379, 469], "endpoint": [0, 9, 10, 27, 28, 29, 45, 49, 51, 87, 102, 122, 157, 158, 173, 193, 197, 199, 200, 210, 212, 214, 217, 221, 222, 232, 236, 238, 247, 311, 320, 322, 464, 466, 470, 477, 480, 488, 490], "bool": [0, 6, 14, 15, 20, 78, 92, 125, 154, 172, 176, 203, 216, 236, 247, 248, 250, 294, 302, 319, 322, 329, 339, 341, 342, 351, 380, 390, 396, 400, 416, 457, 459, 464, 469, 490], "whether": [0, 37, 45, 47, 210, 211, 218, 221, 223, 236, 237, 241, 247, 248, 306, 307, 311, 319, 379, 381, 384, 404, 415, 416, 457, 468, 469, 470, 471], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 47, 51, 197, 210, 211, 213, 215, 219, 221, 223, 236, 237, 238, 242, 247, 248, 256, 259, 272, 281, 315, 316, 319, 321, 322, 352, 376, 404, 405, 406, 407, 457, 459, 464, 466, 469, 470, 471, 472], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 43, 47, 48, 51, 86, 87, 157, 158, 200, 207, 209, 211, 212, 216, 217, 218, 223, 226, 227, 228, 229, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 307, 308, 311, 313, 319, 322, 337, 376, 384, 390, 400, 449, 456, 457, 468, 469, 470, 477, 478], "count": [0, 6, 33, 93, 120, 121, 122, 165, 191, 192, 193, 197, 211, 213, 216, 218, 219, 222, 223, 230, 238, 240, 247, 248, 309, 310, 314, 315, 318, 322, 332, 390, 457, 470, 484, 488], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 45, 46, 47, 48, 50, 51, 96, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 200, 202, 204, 207, 210, 211, 212, 213, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 256, 259, 260, 261, 262, 263, 264, 266, 267, 269, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 291, 292, 300, 305, 306, 307, 309, 310, 311, 313, 314, 316, 317, 319, 321, 322, 333, 334, 339, 344, 345, 351, 352, 354, 355, 356, 358, 361, 362, 363, 364, 366, 367, 369, 371, 372, 375, 377, 378, 386, 388, 389, 390, 392, 393, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 413, 414, 415, 416, 417, 418, 422, 424, 430, 435, 439, 442, 443, 447, 449, 450, 451, 452, 454, 455, 457, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 477], "travers": [0, 6, 13, 15, 17, 200, 210, 211, 216, 219, 222, 227, 237, 238, 239, 240, 305, 308, 311, 313, 317, 320, 451, 457, 466, 469, 470, 471, 480, 488], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 41, 43, 47, 48, 200, 204, 207, 210, 211, 213, 215, 216, 219, 221, 222, 223, 226, 227, 233, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 252, 298, 305, 306, 307, 311, 313, 315, 319, 320, 322, 326, 381, 385, 409, 410, 414, 417, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 438, 441, 443, 444, 449, 457, 464, 468, 469, 470, 471, 477, 478], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 45, 48, 50, 96, 102, 173, 199, 200, 202, 209, 210, 214, 215, 216, 221, 222, 230, 232, 234, 235, 236, 241, 243, 246, 247, 249, 305, 309, 311, 320, 321, 322, 357, 382, 386, 388, 389, 392, 408, 422, 451, 459, 464, 469, 470, 474, 487], "root": [0, 4, 27, 32, 36, 45, 204, 236, 239, 357, 359, 450, 451, 468], "explor": [0, 17, 47, 199, 202, 207, 212, 221, 223, 237, 238, 241, 469], "present": [0, 2, 20, 27, 47, 218, 221, 223, 230, 231, 232, 233, 234, 235, 237, 238, 240, 252, 322, 333, 376, 457, 468, 469], "prior": [0, 12, 34, 221, 223, 226, 237], "move": [0, 4, 6, 200, 215, 239, 311, 414, 417], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 222, 223, 227, 230, 231, 236, 237, 242, 305, 306, 309, 311, 313, 315, 316, 317, 383, 451, 463, 466, 469, 470, 472], "level": [0, 6, 12, 38, 45, 96, 167, 207, 211, 237, 239, 242, 248, 313, 367, 414, 415, 454, 469, 470], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 128, 143, 146, 148, 150, 151, 153, 154, 155, 156, 160, 172, 174, 186, 191, 192, 203, 218, 219, 232, 234, 236, 247, 248, 249, 250, 282, 306, 307, 308, 309, 310, 311, 314, 317, 318, 319, 321, 322, 350, 355, 357, 359, 362, 364, 366, 367, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 392, 393, 394, 395, 396, 398, 399, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 418, 419, 420, 421, 452, 457, 459, 464, 466, 470, 480, 488, 490], "evalu": [0, 6, 14, 15, 16, 18, 37, 226, 238, 239, 242, 245, 247, 248, 249, 260, 283, 292, 294, 298, 300, 319, 464, 474, 488], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 46, 48, 49, 50, 51, 122, 193, 197, 198, 199, 200, 201, 204, 207, 210, 211, 215, 219, 221, 223, 226, 229, 231, 232, 237, 238, 239, 240, 242, 244, 245, 247, 248, 250, 252, 305, 306, 307, 309, 312, 313, 314, 317, 319, 320, 322, 357, 376, 401, 403, 404, 408, 427, 432, 437, 449, 451, 455, 457, 460, 463, 464, 466, 468, 469, 470, 473, 474, 480], "known": [0, 6, 8, 9, 24, 32, 210, 213, 215, 216, 223, 240, 241, 248, 339, 357, 360, 409, 410, 427, 451, 472], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 42, 47, 51, 87, 197, 200, 201, 204, 210, 213, 215, 219, 222, 223, 226, 236, 243, 248, 249, 252, 298, 300, 306, 307, 309, 314, 317, 319, 355, 365, 370, 376, 379, 380, 381, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 405, 406, 407, 408, 411, 412, 413, 414, 417, 422, 449, 452, 454, 457, 459, 463, 464, 468, 469, 470, 473], "max_round": [0, 248, 468, 480], "10": [0, 13, 15, 16, 17, 20, 27, 31, 48, 51, 204, 206, 207, 211, 214, 219, 221, 223, 229, 230, 232, 233, 234, 235, 238, 245, 248, 306, 307, 308, 310, 311, 317, 319, 322, 324, 325, 326, 360, 366, 376, 379, 381, 390, 391, 392, 393, 395, 399, 404, 408, 412, 428, 434, 439, 452, 457, 464, 468, 470, 478, 480, 484, 488], "maximum": [0, 48, 210, 216, 221, 223, 240, 248, 308, 322, 376, 392, 407, 408, 409, 410, 415, 456, 470], "round": [0, 9, 14, 17, 24, 248, 250, 374, 384], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 47, 48, 49, 51, 122, 193, 196, 197, 199, 200, 201, 204, 207, 210, 212, 213, 219, 221, 223, 229, 232, 234, 236, 245, 247, 248, 249, 250, 267, 276, 298, 299, 302, 306, 307, 311, 318, 319, 321, 322, 324, 325, 326, 329, 351, 353, 354, 357, 359, 360, 362, 364, 366, 367, 369, 371, 372, 375, 376, 379, 380, 381, 382, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 449, 450, 452, 454, 455, 457, 459, 460, 464, 466, 468, 470, 477, 478, 490], "origin": [0, 4, 6, 9, 12, 13, 22, 46, 211, 218, 219, 221, 227, 232, 233, 242, 247, 249, 276, 305, 307, 319, 320, 376, 398, 404, 443, 451, 455, 457, 463, 464, 470, 471], "reciproc": [0, 322], "n": [0, 19, 20, 30, 33, 38, 45, 47, 86, 122, 165, 193, 196, 197, 211, 213, 214, 216, 221, 223, 226, 230, 238, 242, 245, 248, 249, 309, 311, 314, 316, 322, 332, 336, 337, 339, 343, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 378, 379, 380, 385, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 418, 419, 422, 435, 450, 451, 452, 454, 457], "reachabl": [0, 322], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 48, 204, 207, 216, 217, 229, 230, 231, 237, 238, 240, 242, 244, 246, 248, 249, 250, 270, 273, 278, 281, 282, 300, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 343, 345, 347, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 469, 471, 480, 483, 484, 489], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 226, 237, 239, 240, 242, 244, 309, 315, 466, 469], "improv": [0, 6, 9, 17, 19, 23, 200, 219, 239, 242, 243, 244, 473], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 48, 122, 197, 200, 201, 202, 204, 207, 211, 212, 213, 215, 218, 219, 221, 223, 226, 227, 228, 229, 230, 236, 237, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 305, 306, 309, 310, 311, 315, 316, 319, 322, 355, 396, 403, 404, 418, 419, 451, 457, 459, 464, 468, 469, 470, 473, 474, 477], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 47, 200, 204, 210, 211, 216, 221, 223, 225, 230, 236, 237, 240, 241, 243, 244, 248, 307, 309, 311, 318, 322, 332, 366, 374, 376, 378, 383, 385, 396, 398, 407, 464, 469, 470, 473, 474], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 46, 48, 96, 122, 167, 193, 197, 200, 204, 207, 209, 210, 211, 216, 219, 221, 223, 227, 230, 236, 238, 241, 242, 244, 247, 248, 250, 256, 257, 297, 305, 306, 307, 308, 309, 311, 315, 319, 322, 331, 355, 356, 359, 360, 363, 372, 373, 376, 385, 386, 391, 393, 394, 395, 396, 397, 399, 414, 417, 425, 428, 432, 435, 441, 442, 443, 449, 451, 453, 457, 463, 464, 466, 468, 469, 470, 473, 484, 488], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 48, 51, 204, 213, 218, 237, 239, 240, 241, 247, 248, 322, 390, 404, 463, 469, 470], "ratio": [0, 13, 223, 449], "actor": [0, 51, 223, 237, 434], "group": [0, 2, 200, 204, 211, 234, 236, 238, 240, 241, 247, 313, 319, 380, 381, 382, 384, 401, 429, 447, 468, 470, 488, 490], "who": [0, 11, 29, 200, 223, 237, 241, 312, 317, 470], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 47, 48, 51, 87, 197, 200, 201, 204, 206, 207, 209, 210, 212, 215, 218, 220, 221, 222, 223, 224, 225, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 244, 246, 249, 252, 260, 306, 307, 311, 313, 464, 465, 468, 469, 470, 471, 473, 474, 484], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 45, 46, 47, 122, 193, 200, 207, 215, 218, 219, 221, 223, 227, 229, 230, 233, 236, 237, 238, 240, 241, 242, 248, 249, 250, 297, 305, 307, 311, 315, 317, 319, 322, 364, 367, 374, 376, 396, 401, 414, 417, 425, 444, 454, 464, 469, 470, 472], "being": [0, 48, 51, 219, 230, 241, 319, 356, 386, 466, 469, 470, 471], "cliqu": [0, 6, 223, 237, 240, 377, 378, 382, 383, 385, 399], "complet": [0, 14, 31, 33, 34, 193, 211, 215, 219, 223, 236, 239, 305, 307, 311, 332, 357, 358, 360, 362, 363, 369, 374, 383, 414, 417, 441, 457, 470], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 45, 46, 48, 51, 122, 193, 197, 199, 201, 204, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 225, 226, 228, 230, 236, 237, 238, 240, 241, 242, 244, 248, 249, 252, 256, 305, 306, 307, 308, 309, 311, 312, 314, 315, 317, 319, 322, 332, 336, 339, 351, 357, 362, 367, 376, 386, 387, 388, 390, 396, 399, 414, 415, 417, 433, 437, 451, 457, 463, 464, 468, 469, 470, 472, 474, 477, 478, 484], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 46, 48, 73, 86, 122, 144, 157, 193, 200, 203, 210, 211, 215, 216, 218, 219, 221, 227, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 244, 247, 248, 249, 250, 261, 262, 265, 270, 277, 281, 282, 300, 305, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 319, 320, 321, 322, 324, 325, 326, 329, 332, 333, 335, 336, 337, 339, 341, 342, 345, 346, 348, 350, 351, 352, 356, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 373, 374, 376, 378, 381, 382, 384, 386, 387, 388, 390, 392, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 447, 451, 454, 455, 456, 457, 458, 460, 463, 464, 466, 468, 470, 471, 472, 480, 484, 485, 489], "u": [0, 6, 14, 16, 18, 20, 37, 203, 204, 219, 223, 236, 238, 248, 311, 315, 317, 319, 322, 328, 351, 363, 376, 390, 396, 399, 404, 407, 419, 457, 469, 480, 490], "equal": [0, 10, 204, 216, 221, 223, 229, 233, 236, 238, 322, 374, 376, 407, 412, 450, 484], "degree_assortativity_coeffici": [0, 248, 480], "hold": [0, 10, 20, 49, 221, 247, 248, 249, 250, 276, 284, 307, 319, 322, 457, 463], "numer": [0, 20, 51, 216, 221, 237, 239, 240, 248, 249, 322, 457, 463, 469], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 45, 47, 48, 53, 54, 63, 78, 80, 83, 89, 92, 94, 96, 98, 99, 105, 111, 116, 162, 167, 182, 187, 196, 197, 203, 204, 210, 211, 213, 216, 227, 232, 234, 236, 240, 242, 247, 248, 249, 250, 283, 292, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 331, 351, 366, 376, 404, 405, 406, 407, 414, 416, 417, 449, 450, 451, 457, 459, 460, 463, 464, 466, 468, 469, 470, 471, 480, 488, 489, 490], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 45, 47, 48, 49, 51, 96, 122, 167, 193, 196, 197, 199, 201, 204, 210, 212, 213, 215, 221, 223, 229, 236, 238, 244, 248, 249, 252, 304, 306, 307, 311, 312, 315, 316, 318, 319, 320, 321, 322, 327, 328, 330, 337, 341, 342, 351, 352, 357, 358, 359, 360, 362, 363, 364, 366, 367, 369, 371, 372, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 449, 452, 453, 455, 457, 459, 460, 463, 464, 466, 469, 470, 471, 477, 478], "fals": [0, 13, 15, 17, 18, 19, 20, 45, 47, 49, 51, 197, 210, 215, 221, 234, 235, 236, 247, 248, 250, 298, 305, 306, 307, 311, 317, 319, 321, 322, 335, 339, 341, 342, 351, 353, 354, 379, 380, 381, 384, 390, 400, 415, 457, 460, 464, 468, 470, 480, 489], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 45, 48, 122, 193, 200, 201, 204, 207, 211, 212, 213, 215, 216, 218, 219, 220, 223, 227, 230, 231, 232, 236, 237, 238, 239, 241, 242, 243, 244, 247, 248, 249, 250, 252, 297, 305, 306, 307, 308, 309, 311, 314, 315, 316, 317, 319, 320, 322, 339, 341, 342, 345, 350, 351, 357, 372, 374, 376, 387, 391, 396, 404, 405, 406, 407, 408, 414, 417, 423, 424, 428, 429, 433, 439, 441, 444, 447, 449, 451, 455, 457, 461, 463, 464, 470, 472, 474, 484, 485, 488], "adjac": [0, 10, 16, 20, 24, 221, 223, 242, 248, 308, 313, 322, 345, 378, 402, 420, 435, 449, 450, 457, 458, 469], "direct": [0, 9, 10, 15, 46, 48, 210, 223, 227, 230, 233, 236, 238, 239, 242, 247, 248, 268, 298, 305, 307, 311, 314, 317, 319, 322, 327, 332, 338, 353, 364, 377, 378, 379, 380, 381, 384, 388, 389, 391, 400, 401, 402, 403, 414, 415, 424, 451, 455, 457, 458, 460, 464, 468, 469, 471, 485, 489, 490], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 46, 48, 223, 236, 237, 239, 244, 245, 252, 306, 309, 310, 311, 314, 315, 316, 317, 322, 351, 356, 363, 439, 444, 453, 457, 470, 474], "separ": [0, 6, 17, 30, 36, 210, 212, 223, 237, 244, 306, 307, 404, 459, 469, 470], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 42, 46, 47, 48, 50, 51, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 197, 200, 202, 204, 210, 215, 218, 219, 221, 223, 226, 229, 232, 236, 237, 238, 239, 241, 247, 248, 252, 267, 305, 306, 309, 311, 314, 316, 317, 322, 359, 381, 383, 406, 463, 464, 468, 469, 470, 484], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 201, 204, 210, 211, 212, 215, 216, 218, 219, 221, 223, 234, 235, 236, 237, 239, 241, 247, 248, 249, 250, 256, 292, 306, 308, 311, 313, 315, 317, 319, 320, 322, 341, 342, 356, 423, 430, 435, 447, 453, 457, 459, 460, 463, 464, 468, 469, 470, 478, 480, 481, 483, 488, 490], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 47, 48, 51, 93, 122, 193, 197, 201, 210, 213, 218, 219, 227, 233, 236, 237, 238, 239, 240, 241, 242, 248, 250, 305, 306, 307, 319, 320, 321, 336, 345, 350, 351, 356, 376, 400, 403, 408, 414, 417, 464, 466, 468, 469, 470, 472, 473, 487, 488], "degree_centr": [0, 34, 207, 248, 322, 458, 480], "centrality_typ": [0, 248], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 45, 49, 210, 211, 218, 221, 225, 227, 237, 238, 240, 244, 399, 406, 422, 449, 466, 469, 470, 472, 474], "far": [0, 46, 237, 306], "possibl": [0, 4, 6, 15, 47, 200, 202, 204, 211, 227, 241, 242, 248, 307, 313, 314, 322, 390, 398, 399, 414, 415, 416, 417, 449, 453, 469], "along": [0, 6, 10, 20, 24, 31, 219, 221, 227, 250, 307, 311, 317, 451, 457, 470, 471], "branch": [0, 51, 216, 223, 311, 357, 367, 488], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 45, 46, 48, 51, 193, 197, 201, 215, 221, 223, 230, 232, 247, 248, 252, 305, 311, 318, 357, 359, 360, 362, 364, 367, 369, 371, 372, 375, 386, 388, 389, 391, 393, 394, 395, 401, 402, 403, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 452, 459, 464, 466, 469, 470, 472], "backtrack": 0, "influenc": [0, 27, 322], "relationship": [0, 48, 200, 204, 211, 216, 217, 218, 223, 227, 230, 237, 240, 241, 242, 306, 307, 317, 469, 470], "high": [0, 6, 9, 200, 202, 207, 211, 218, 223, 236, 239, 240, 242, 243, 244, 245, 313, 391, 422, 464, 466], "score": [0, 223, 242], "contribut": [0, 4, 209, 469], "low": [0, 6, 7, 13, 32, 211, 229, 237, 238, 242, 243, 244, 449, 470], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 45, 47, 48, 51, 165, 196, 198, 202, 207, 212, 214, 216, 222, 223, 227, 229, 236, 237, 239, 240, 241, 242, 245, 247, 248, 249, 250, 257, 258, 260, 261, 262, 265, 268, 270, 277, 278, 282, 283, 292, 309, 310, 311, 314, 316, 319, 320, 321, 322, 324, 325, 326, 328, 329, 331, 333, 335, 336, 337, 339, 340, 341, 342, 345, 350, 351, 352, 355, 356, 357, 359, 360, 362, 366, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 392, 396, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 423, 425, 434, 445, 449, 450, 451, 452, 454, 455, 457, 459, 464, 468, 469, 470, 471, 472], "mean": [0, 2, 20, 29, 30, 36, 37, 45, 46, 47, 48, 96, 122, 167, 193, 196, 200, 210, 211, 219, 232, 247, 249, 255, 294, 307, 310, 311, 321, 322, 362, 379, 386, 396, 405, 406, 407, 457, 460, 463, 464, 466, 468, 469, 470, 472, 477], "themselv": [0, 211, 223, 227, 451], "eigenvector_centr": [0, 34, 248, 322, 458, 480], "toler": [0, 248, 322, 376], "doubl": [0, 9, 14, 16, 18, 33, 47, 78, 92, 203, 216, 218, 219, 221, 236, 245, 250, 306, 316, 427, 451, 468, 472, 480, 488, 490], "error": [0, 2, 32, 36, 37, 38, 45, 50, 86, 93, 96, 102, 157, 165, 167, 173, 204, 209, 211, 213, 218, 247, 248, 311, 315, 322, 356, 457, 470], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 46, 47, 49, 202, 204, 210, 211, 215, 218, 221, 223, 230, 232, 240, 241, 248, 315, 319, 322, 415, 416, 457, 464, 469, 470, 478, 483, 484], "converg": [0, 6, 9, 14, 17, 24, 242, 245, 248, 322], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 45, 47, 48, 86, 157, 197, 207, 210, 212, 213, 220, 221, 223, 227, 231, 232, 234, 238, 240, 242, 245, 247, 248, 250, 307, 308, 309, 310, 311, 314, 318, 322, 332, 337, 339, 348, 349, 350, 355, 356, 358, 360, 363, 367, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 430, 435, 440, 447, 449, 450, 452, 454, 455, 456, 457, 464, 466, 469, 470, 471, 478, 484, 488], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 221, 222, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 242, 243, 248, 250, 305, 308, 317, 321, 322, 324, 325, 326, 327, 328, 333, 344, 345, 346, 347, 351, 352, 362, 363, 364, 366, 369, 371, 372, 375, 376, 404, 405, 406, 407, 408, 414, 417, 419, 451, 457, 480, 484, 489], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 50, 51, 86, 87, 93, 96, 102, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 201, 202, 207, 209, 211, 213, 214, 215, 221, 222, 223, 225, 227, 229, 230, 232, 233, 235, 236, 238, 240, 242, 248, 249, 298, 300, 305, 306, 307, 309, 312, 314, 316, 317, 318, 319, 322, 376, 404, 405, 406, 407, 457, 464, 468, 472, 474, 478, 480, 481, 482, 484, 485, 488, 489, 490], "rate": [0, 46, 200, 202, 237, 243, 248, 404, 406, 407], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 48, 51, 196, 197, 200, 204, 207, 210, 211, 215, 216, 218, 219, 221, 223, 227, 228, 236, 238, 240, 241, 242, 244, 245, 305, 306, 307, 308, 309, 311, 313, 315, 317, 319, 322, 328, 351, 358, 359, 361, 363, 364, 368, 385, 396, 397, 404, 405, 406, 407, 408, 412, 414, 417, 418, 423, 424, 432, 450, 451, 456, 457, 468, 469, 470, 477, 484], "hub": [0, 29, 248, 249, 322, 375, 463], "author": [0, 27, 50, 233, 238, 248, 322, 376, 464, 484], "estim": [0, 211, 218, 223, 240, 241, 317, 322], "within": [0, 13, 30, 36, 45, 47, 48, 51, 196, 200, 202, 215, 216, 218, 219, 221, 222, 223, 228, 237, 238, 239, 240, 241, 242, 311, 320, 322, 376, 379, 380, 400, 406, 407, 464, 469, 478, 484, 488], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 45, 46, 47, 48, 49, 51, 96, 122, 167, 193, 196, 197, 199, 200, 201, 204, 207, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 252, 256, 258, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 320, 360, 374, 376, 386, 388, 414, 435, 457, 460, 463, 464, 468, 469, 470, 472, 474, 484, 490], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 45, 46, 47, 48, 49, 51, 87, 102, 122, 157, 158, 173, 193, 196, 197, 204, 207, 210, 211, 215, 223, 226, 227, 228, 229, 232, 236, 237, 238, 239, 241, 242, 244, 247, 248, 252, 305, 306, 307, 309, 311, 314, 315, 316, 318, 319, 391, 404, 409, 415, 435, 451, 457, 460, 466, 469, 470, 472, 473, 474, 480], "rel": [0, 27, 45, 47, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 211, 212, 227, 236, 242, 307, 311, 322, 470], "immedi": [0, 6, 200, 211, 243, 248, 250, 311, 322, 460, 464, 470], "under": [0, 9, 10, 14, 17, 24, 38, 48, 200, 201, 218, 223, 229, 236, 237, 248, 252, 311, 313, 314, 322, 469], "consider": [0, 218, 219, 236, 322, 379], "katz_centr": [0, 34, 248, 322, 458, 480], "alpha": [0, 223, 248, 322, 396, 397, 408, 449], "beta": [0, 248, 322, 397, 408], "attenu": [0, 322], "factor": [0, 13, 212, 223, 248, 322, 357, 367, 389, 391, 469], "neighborhood": [0, 6, 237, 239, 242, 248, 311, 315, 322, 400], "maxim": [0, 6, 322, 410, 456], "subgraph": [0, 6, 9, 17, 33, 223, 224, 226, 238, 239, 240, 248, 270, 276, 305, 311, 313, 319, 320, 322, 333, 336, 358, 369, 400, 457, 468, 484, 488], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 46, 47, 50, 199, 204, 207, 210, 211, 216, 218, 220, 221, 223, 227, 230, 231, 234, 236, 237, 238, 240, 242, 244, 245, 247, 250, 252, 305, 306, 309, 311, 314, 315, 316, 317, 319, 322, 324, 325, 326, 333, 336, 337, 352, 362, 363, 364, 366, 369, 384, 409, 410, 414, 415, 457, 460, 461, 464, 468, 469, 470, 478, 482, 488], "found": [0, 4, 9, 16, 17, 18, 36, 51, 86, 93, 157, 165, 204, 210, 222, 223, 227, 228, 239, 245, 298, 318, 376, 418, 419, 455, 457, 464, 468, 469, 470, 474], "recurs": [0, 6, 311, 359], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 210, 215, 216, 221, 236, 248, 311, 318, 322, 374, 385, 396, 398, 470], "kkore": [0, 34], "order": [0, 6, 34, 47, 200, 211, 216, 218, 226, 239, 241, 242, 248, 249, 306, 311, 317, 322, 324, 325, 331, 355, 356, 359, 364, 371, 384, 385, 388, 420, 421, 424, 449, 450, 457, 463, 466, 470, 488], "That": [0, 27, 248, 316, 374, 417, 460, 472], "kshell": [0, 34], "fast": [0, 9, 20, 211, 248, 315], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 45, 48, 49, 51, 196, 199, 201, 204, 215, 216, 218, 219, 226, 227, 236, 237, 238, 241, 242, 244, 248, 292, 306, 307, 309, 311, 315, 322, 332, 339, 357, 386, 390, 392, 401, 404, 405, 406, 407, 435, 457, 464, 469, 470, 477, 484, 488], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 196, 210, 219, 228, 236, 238, 240, 242, 247, 248, 250, 322, 376, 384, 386, 388, 390, 404, 407, 412, 457, 460, 463, 466, 469, 470, 490], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 51, 204, 213, 221, 223, 239, 240, 242, 247, 306, 311, 376, 464, 466, 470, 471, 472, 473], "aim": [0, 22, 200, 223, 233, 239, 240, 241, 242, 244], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 46, 47, 50, 122, 193, 199, 204, 209, 210, 214, 222, 223, 231, 236, 237, 238, 242, 247, 248, 252, 282, 306, 307, 315, 316, 317, 319, 468, 471, 477, 487, 488], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 43, 45, 46, 47, 48, 49, 51, 122, 193, 197, 199, 201, 202, 204, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 252, 256, 305, 306, 307, 308, 309, 311, 314, 315, 317, 319, 321, 356, 376, 386, 390, 396, 399, 409, 410, 416, 419, 440, 453, 457, 464, 466, 468, 469, 470, 471, 473, 474, 477, 478], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 43, 45, 51, 101, 172, 204, 207, 210, 211, 213, 216, 218, 219, 221, 223, 226, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 309, 310, 311, 314, 317, 319, 376, 404, 408, 457, 463, 466, 468, 469, 470, 477], "ldbc": [0, 4, 34, 200, 210, 212, 219, 220, 226, 236, 240, 244, 245, 468, 485, 490], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 48, 196, 200, 201, 204, 207, 210, 211, 218, 219, 222, 226, 239, 241, 242, 309, 311, 313, 315, 322, 376, 442, 449, 451, 457, 464, 468, 469, 471], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 45, 49, 207, 209, 216, 218, 221, 227, 236, 237, 239, 240, 241, 242, 244, 248, 250, 256, 258, 302, 304, 306, 309, 311, 315, 316, 319, 322, 341, 342, 346, 388, 397, 411, 455, 457, 464, 466, 468], "variant": [0, 31, 242, 245], "networkx": [0, 3, 7, 8, 12, 34, 207, 226, 243, 246, 247, 248, 282, 322, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 339, 340, 341, 342, 346, 347, 351, 352, 356, 357, 359, 360, 362, 363, 364, 367, 369, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 393, 394, 395, 397, 400, 401, 402, 403, 408, 409, 410, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 450, 452, 457, 459, 460, 462, 486, 491], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 39, 41, 43, 45, 47, 48, 49, 51, 122, 196, 197, 199, 200, 201, 204, 207, 210, 211, 212, 213, 216, 217, 218, 221, 223, 226, 229, 230, 236, 237, 238, 239, 241, 242, 245, 246, 247, 248, 250, 298, 304, 305, 306, 307, 309, 311, 314, 317, 318, 319, 320, 321, 322, 336, 360, 376, 390, 391, 396, 400, 408, 411, 412, 413, 418, 419, 437, 452, 455, 457, 460, 464, 468, 469, 470, 471, 474, 477, 482, 483, 487], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 48, 221, 223, 227, 229, 242, 297, 449, 470, 472], "rank": [0, 6, 33, 234, 237, 247, 248, 249, 449, 463], "vote": [0, 250], "scheme": [0, 6, 9, 47, 99, 170, 193, 210, 236], "With": [0, 4, 12, 19, 24, 34, 36, 41, 122, 193, 196, 212, 218, 219, 221, 223, 226, 231, 232, 237, 238, 239, 395, 468, 477], "top": [0, 9, 12, 22, 34, 157, 158, 165, 167, 173, 219, 221, 223, 244, 309, 431, 470, 488], "highest": [0, 223, 391], "elect": 0, "num_of_nod": [0, 248], "select": [0, 9, 15, 36, 48, 211, 215, 219, 227, 230, 236, 237, 240, 242, 249, 257, 263, 264, 274, 275, 279, 287, 288, 305, 311, 319, 376, 385, 408, 420, 454, 457, 463, 464, 468, 469, 488], "influenti": 0, "extract": [0, 214, 216, 221, 236, 237, 238, 239, 248, 256, 320, 464, 466, 470], "weakli": [0, 248, 322, 396], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 45, 46, 47, 48, 49, 122, 193, 196, 198, 199, 200, 204, 207, 209, 210, 211, 212, 213, 215, 216, 219, 221, 222, 223, 225, 226, 227, 230, 232, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 322, 379, 408, 411, 414, 415, 417, 457, 460, 463, 466, 469, 470, 472, 474, 477], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 46, 51, 199, 207, 211, 212, 213, 216, 218, 219, 221, 223, 225, 226, 227, 230, 236, 239, 245, 267, 283, 306, 307, 308, 309, 319, 451, 457, 470, 474], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 51, 197, 200, 204, 212, 213, 215, 218, 223, 237, 238, 242, 243, 245, 246, 305, 319, 393, 394, 395, 466, 468, 474], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 43, 45, 46, 47, 48, 49, 50, 51, 96, 122, 167, 193, 197, 200, 201, 204, 207, 209, 210, 211, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 228, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 266, 305, 307, 311, 312, 313, 317, 322, 353, 354, 376, 404, 405, 406, 407, 454, 457, 459, 464, 466, 468, 469, 470, 471, 474, 477, 480], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 45, 49, 50, 51, 89, 96, 102, 122, 167, 173, 193, 196, 197, 201, 204, 210, 212, 214, 215, 222, 225, 228, 231, 232, 236, 237, 238, 239, 242, 244, 246, 247, 248, 249, 283, 294, 311, 315, 316, 317, 319, 320, 409, 410, 460, 461, 464, 469, 470, 471, 472, 473, 474, 477, 478, 480, 482], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 45, 46, 49, 51, 122, 193, 197, 199, 200, 201, 204, 212, 213, 214, 215, 222, 227, 228, 229, 231, 232, 238, 244, 246, 248, 252, 307, 312, 316, 317, 366, 386, 457, 464, 466, 469, 480, 488], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 51, 122, 197, 215, 219, 225, 226, 240, 246, 252, 297, 309, 312, 317, 376, 386, 464, 469, 470, 474], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 45, 47, 48, 193, 200, 202, 207, 209, 213, 218, 219, 223, 229, 230, 231, 232, 239, 241, 242, 243, 244, 247, 305, 307, 313, 322, 457, 470], "extens": [1, 4, 6, 27, 36, 47, 211, 213, 216, 230, 237, 306], "henc": [1, 2, 10, 32, 236, 331, 454, 457, 470], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 45, 46, 47, 49, 51, 86, 96, 122, 167, 193, 196, 197, 199, 200, 201, 204, 210, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 228, 229, 231, 232, 236, 238, 241, 243, 244, 246, 248, 252, 304, 306, 307, 310, 311, 312, 315, 316, 319, 322, 335, 366, 376, 386, 388, 400, 405, 406, 407, 457, 464, 466, 468, 469, 470, 472, 477, 478, 480, 490], "flash": [1, 3, 8, 12, 237], "java": [1, 4, 8, 12, 14, 34, 50, 93, 193, 196, 202, 209, 212, 218, 221, 224, 226, 239, 240, 244, 248, 252, 256, 469, 480], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 45, 50, 51, 93, 122, 193, 196, 197, 198, 200, 201, 202, 218, 221, 223, 226, 227, 234, 237, 239, 240, 247, 248, 249, 252, 255, 267, 279, 307, 311, 315, 317, 322, 355, 356, 366, 386, 397, 410, 411, 414, 415, 449, 451, 453, 454, 457, 469, 472, 478, 480, 482, 488], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 43, 50, 196, 197, 199, 201, 202, 204, 207, 209, 210, 213, 215, 217, 223, 224, 227, 229, 232, 236, 237, 238, 240, 241, 243, 244, 247, 248, 255, 305, 308, 312, 315, 317, 320, 321, 457, 459, 460, 468, 469, 477, 478, 480, 481, 483, 484, 486, 487, 488, 490], "These": [1, 4, 9, 15, 20, 24, 47, 48, 200, 210, 216, 227, 236, 237, 238, 240, 241, 242, 243, 311, 317, 469, 477], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 199, 200, 201, 207, 210, 211, 212, 215, 217, 219, 221, 223, 227, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 245, 247, 248, 249, 255, 256, 258, 259, 263, 264, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 284, 287, 288, 292, 298, 300, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 320, 321, 322, 327, 328, 331, 333, 336, 337, 339, 341, 342, 345, 346, 347, 350, 351, 352, 355, 356, 357, 359, 360, 362, 363, 364, 366, 367, 369, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 449, 450, 451, 452, 453, 454, 458, 459, 461, 462, 464, 466, 469, 470, 472, 481, 484, 489], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 45, 46, 49, 50, 63, 83, 93, 96, 102, 105, 134, 154, 165, 167, 173, 176, 198, 202, 204, 207, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 263, 264, 276, 279, 283, 287, 288, 292, 305, 307, 309, 311, 313, 317, 319, 321, 341, 342, 462, 463, 464, 469, 472, 474, 478, 484], "upon": [1, 2, 9, 14, 193, 200, 216, 218, 244, 319, 470, 471], "pregel": [1, 4, 8, 12, 17, 22, 34, 226, 237, 240, 462, 474, 484, 486], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 45, 197, 207, 212, 218, 223, 230, 236, 238, 305, 455, 457, 490], "deploi": [2, 15, 33, 37, 122, 193, 197, 201, 202, 204, 209, 211, 212, 213, 214, 222, 226, 229, 237, 239, 244, 307, 464, 466, 471], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 47, 51, 199, 200, 204, 210, 212, 213, 214, 222, 228, 229, 231, 232, 237, 238, 239, 240, 241, 242, 248, 305, 317, 464, 469], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 45, 48, 197, 201, 204, 211, 215, 218, 223, 226, 227, 236, 238, 239, 242, 252, 269, 306, 309, 310, 311, 315, 317, 319, 322, 385, 406, 437, 455, 457, 461, 463, 469, 470, 471, 472], "advantag": [2, 211, 226, 236, 243, 244, 473], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 45, 48, 122, 193, 199, 202, 204, 207, 210, 211, 212, 213, 217, 219, 221, 222, 223, 227, 230, 234, 235, 238, 242, 245, 248, 249, 308, 309, 310, 311, 314, 319, 320, 322, 324, 325, 326, 328, 333, 337, 341, 342, 358, 360, 363, 366, 372, 376, 377, 378, 380, 381, 382, 384, 388, 391, 392, 396, 397, 401, 403, 414, 415, 417, 419, 422, 425, 430, 434, 435, 438, 441, 444, 446, 449, 450, 451, 452, 457, 459, 460, 469, 472, 481, 484, 487, 488], "gie": [2, 32, 33, 209, 216, 223, 226, 236, 237, 241, 244, 245, 246, 276, 464, 481, 482, 491], "gle": [2, 32, 209, 226, 229, 230, 231, 237, 242, 244, 246, 481, 482, 489], "address": [2, 9, 14, 17, 23, 31, 45, 199, 204, 218, 219, 234, 237, 242, 470, 488], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 47, 193, 196, 199, 207, 210, 211, 215, 218, 221, 223, 224, 226, 227, 230, 236, 237, 238, 239, 240, 241, 242, 244, 245, 248, 267, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 376, 380, 381, 382, 404, 407, 414, 434, 449, 457, 462, 464, 466, 468, 469, 470, 471, 472, 473, 474, 477], "complex": [2, 4, 6, 12, 22, 34, 37, 43, 122, 193, 200, 201, 207, 211, 212, 218, 219, 220, 221, 226, 227, 236, 237, 239, 240, 241, 242, 243, 244, 248, 308, 322, 386, 390, 405, 406, 407, 469], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 46, 48, 51, 53, 86, 122, 124, 157, 165, 193, 198, 200, 204, 209, 211, 215, 217, 218, 222, 227, 230, 233, 237, 238, 239, 241, 242, 247, 307, 311, 317, 413, 449, 454, 468, 469, 470], "show": [2, 14, 19, 20, 27, 29, 30, 38, 197, 201, 204, 211, 212, 223, 226, 231, 232, 238, 240, 241, 242, 308, 309, 317, 460, 464, 466, 469], "kubernet": [2, 29, 204, 207, 209, 210, 212, 226, 231, 234, 236, 238, 243, 464, 470, 481, 483, 484, 486, 490, 491], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 204, 207, 209, 212, 214, 222, 223, 226, 229, 231, 236, 237, 238, 239, 240, 241, 242, 243, 248, 307, 317, 322, 379, 458, 464, 470, 471, 478, 480, 487], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 45, 48, 49, 193, 197, 200, 204, 207, 210, 211, 213, 215, 216, 218, 219, 221, 223, 227, 236, 237, 242, 244, 306, 307, 308, 313, 322, 386, 457, 469, 470], "scenario": [2, 4, 6, 8, 12, 13, 41, 48, 200, 211, 221, 222, 223, 227, 230, 236, 237, 241, 242, 244, 306, 307, 309], "quit": [2, 30, 193, 215, 376], "common": [2, 6, 12, 15, 30, 49, 86, 87, 93, 102, 211, 215, 223, 227, 230, 236, 237, 239, 240, 241, 242, 244, 305, 306, 313, 314, 328, 449, 451, 457, 468, 469, 478], "intend": [2, 13, 36, 193, 216, 449, 463], "analysi": [2, 7, 8, 11, 13, 211, 222, 223, 226, 236, 242, 243, 245, 246, 248, 410], "offlin": [2, 209, 226, 227, 239, 242, 243, 466], "everi": [2, 6, 23, 45, 48, 221, 223, 230, 242, 247, 311, 322, 324, 325, 326, 341, 342, 360, 374, 437, 444, 457, 463, 469], "dai": [2, 20, 48, 223, 457, 460, 468], "export": [2, 4, 23, 29, 31, 33, 39, 51, 122, 193, 197, 199, 201, 204, 212, 228, 468, 470, 483], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 45, 210, 219, 221, 237, 239, 244, 252, 265, 306, 308, 309, 310, 311, 332, 369, 383, 390, 396, 397, 404, 405, 406, 407, 408, 457, 460, 464, 469, 470, 472, 488], "real": [2, 6, 9, 12, 13, 34, 207, 210, 219, 221, 226, 237, 238, 240, 242, 449, 468, 470], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 48, 96, 122, 167, 193, 197, 201, 204, 211, 212, 213, 216, 219, 221, 223, 226, 230, 234, 235, 236, 238, 241, 242, 245, 248, 306, 307, 311, 322, 355, 356, 392, 393, 394, 395, 405, 406, 407, 409, 410, 419, 422, 457, 469, 470, 472, 484, 488], "sampl": [2, 29, 30, 31, 33, 45, 46, 202, 209, 210, 226, 227, 234, 237, 238, 244, 252, 306, 307, 308, 310, 313, 315, 318, 321, 396, 416, 449, 470, 489], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 49, 51, 204, 207, 210, 211, 216, 219, 221, 223, 230, 236, 241, 245, 250, 306, 307, 311, 313, 315, 318, 322, 376, 384, 390, 414, 425, 441, 463, 464, 468, 469, 470, 474, 477], "unnecessari": [2, 6, 9, 218, 223, 469], "capabl": [2, 6, 11, 16, 20, 51, 200, 216, 217, 218, 221, 224, 237, 239, 241, 244, 457], "independ": [2, 6, 30, 237, 244, 306, 320, 333, 336, 384, 411, 457], "document": [2, 10, 27, 29, 33, 35, 36, 38, 50, 51, 196, 197, 201, 202, 204, 212, 215, 216, 217, 221, 222, 224, 226, 228, 242, 248, 305, 306, 312, 464, 465, 470], "walk": [2, 4, 32, 46, 197, 210, 223, 237, 238, 241, 311, 358, 369], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 45, 46, 197, 198, 200, 202, 207, 209, 210, 212, 213, 217, 218, 222, 223, 225, 226, 227, 229, 230, 231, 232, 237, 239, 240, 241, 242, 243, 247, 258, 306, 307, 309, 311, 315, 317, 386, 388, 391, 419, 425, 457, 464, 466, 468, 469, 472, 474], "standalon": [2, 23, 27, 32, 204, 209, 212, 213, 223, 236, 237, 471, 477, 490], "self": [2, 210, 223, 236, 292, 305, 308, 311, 322, 332, 345, 384, 386, 388, 390, 396, 404, 405, 406, 407, 408, 457, 458, 460, 464, 470, 485, 489, 490], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 50, 51, 122, 193, 197, 198, 199, 201, 204, 207, 210, 217, 223, 226, 230, 231, 232, 237, 239, 240, 241, 242, 243, 244, 245, 247, 464, 470, 471, 477, 480], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 49, 199, 204, 207, 209, 210, 214, 222, 226, 229, 231, 236, 244, 246, 464, 470, 480, 481, 482, 484, 487, 490], "7": [2, 10, 20, 23, 27, 30, 31, 32, 122, 193, 204, 213, 221, 223, 245, 306, 312, 317, 324, 325, 337, 360, 422, 428, 430, 434, 435, 438, 440, 452, 457, 472, 483, 487, 488], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 45, 46, 47, 49, 51, 122, 193, 199, 200, 201, 204, 207, 210, 211, 223, 225, 226, 227, 228, 230, 232, 233, 236, 237, 238, 242, 244, 245, 248, 252, 305, 306, 307, 309, 311, 312, 313, 315, 317, 322, 335, 386, 388, 393, 395, 404, 407, 447, 451, 457, 459, 463, 464, 466, 469, 470, 473, 474, 477, 478], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 50, 86, 87, 93, 102, 157, 158, 165, 173, 196, 200, 202, 204, 209, 210, 211, 212, 216, 223, 227, 230, 236, 241, 243, 246, 248, 249, 250, 268, 305, 308, 309, 310, 311, 314, 319, 320, 321, 322, 355, 376, 447, 457, 463, 464, 466, 469, 470, 474, 477, 478, 480, 483, 484], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 49, 50, 202, 204, 210, 212, 214, 222, 238, 248, 252, 315, 457, 460, 464, 481, 482, 483, 484, 487], "client": [2, 17, 22, 23, 29, 33, 38, 41, 86, 87, 93, 102, 122, 157, 158, 165, 193, 196, 197, 201, 203, 211, 222, 224, 226, 232, 235, 247, 248, 317, 464, 466, 468, 469, 470, 471, 480, 482, 487], "prepar": [2, 4, 33, 36, 46, 202, 210, 213, 215, 227, 228, 229, 230, 232, 233, 238, 242, 246, 469, 484], "continu": [2, 6, 15, 16, 20, 27, 210, 211, 222, 223, 226, 227, 237, 238, 242, 245, 305, 376, 414, 417, 469, 470, 471], "incas": [2, 210], "doesn": [2, 13, 29, 32, 37, 38, 41, 45, 210, 221, 223, 252, 311, 386, 388, 390, 457, 463, 472], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 45, 193, 199, 203, 204, 210, 219, 221, 223, 234, 235, 236, 239, 245, 247, 248, 250, 252, 258, 305, 310, 311, 317, 321, 322, 335, 351, 386, 388, 390, 410, 414, 415, 449, 451, 454, 457, 463, 470, 472, 489], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 48, 51, 93, 96, 122, 167, 193, 196, 197, 199, 201, 210, 212, 213, 221, 226, 228, 236, 246, 248, 300, 307, 309, 310, 319, 385, 468, 469, 470, 471], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 47, 49, 50, 51, 86, 93, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 202, 204, 210, 212, 213, 215, 218, 221, 222, 223, 234, 236, 237, 238, 241, 242, 247, 248, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 282, 285, 286, 292, 298, 299, 300, 309, 311, 314, 316, 319, 320, 335, 357, 359, 360, 362, 363, 364, 366, 367, 369, 371, 372, 374, 375, 376, 378, 379, 381, 384, 386, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 451, 452, 457, 459, 460, 461, 464, 470, 471, 472, 473, 478, 480, 483], "distinct": [2, 216, 221, 237, 238, 241, 362, 424, 450, 469], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 218, 221, 223, 230, 232, 236, 240, 242, 247, 248, 250, 271, 282, 297, 305, 309, 313, 314, 320, 322, 385, 393, 395, 404, 406, 457, 460, 462, 464, 469, 470, 474, 480], "entir": [2, 9, 34, 200, 211, 223, 238, 242, 311, 322, 457], "discret": [2, 227, 242, 305, 376, 389, 391, 397, 401, 412], "util": [2, 4, 6, 9, 15, 32, 36, 41, 43, 48, 51, 93, 200, 216, 217, 218, 223, 226, 228, 233, 236, 237, 239, 240, 243, 247, 248, 250, 321, 422, 468, 469, 470, 473], "either": [2, 13, 30, 34, 47, 196, 197, 201, 204, 210, 218, 219, 222, 223, 230, 248, 307, 311, 319, 320, 360, 363, 376, 403, 414, 447, 457, 471], "aforement": [2, 193, 236, 240, 242, 306, 311, 470], "per": [2, 47, 200, 210, 218, 469, 470], "prefer": [2, 13, 27, 36, 45, 200, 469], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 86, 87, 93, 96, 102, 122, 157, 158, 165, 193, 197, 201, 204, 207, 213, 215, 220, 222, 223, 226, 229, 231, 234, 236, 238, 246, 248, 249, 267, 298, 299, 300, 302, 304, 319, 320, 457, 461, 462, 468, 470, 472, 477, 478, 480, 481, 482, 484, 485, 488, 490], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 51, 86, 87, 93, 96, 102, 122, 193, 216, 223, 230, 233, 236, 238, 242, 247, 248, 249, 250, 255, 305, 306, 319, 320, 321, 322, 366, 435, 457, 461, 464, 469, 470, 471, 480, 489], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 113, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 159, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 183, 184, 187, 189, 191, 196, 197, 201, 202, 210, 212, 214, 215, 216, 219, 221, 222, 223, 226, 228, 234, 236, 239, 241, 244, 248, 249, 252, 255, 276, 282, 283, 284, 294, 304, 306, 309, 311, 319, 320, 322, 324, 325, 326, 341, 342, 351, 357, 359, 360, 362, 364, 366, 367, 369, 371, 372, 375, 379, 380, 381, 384, 386, 388, 389, 391, 392, 393, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 449, 452, 455, 457, 459, 460, 463, 464, 470, 471], "control": [2, 6, 27, 38, 236, 237, 239, 247, 322, 457, 469, 470], "subset": [2, 6, 20, 200, 219, 221, 233, 238, 363, 374, 463, 464], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 45, 49, 199, 204, 207, 210, 220, 229, 231, 232, 238, 246, 298, 316, 461, 464, 470, 471, 477, 480, 484], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 45, 46, 48, 49, 50, 51, 96, 122, 167, 196, 197, 200, 201, 204, 207, 210, 211, 216, 218, 219, 221, 223, 226, 227, 230, 232, 236, 237, 238, 240, 241, 242, 248, 250, 256, 305, 306, 307, 308, 311, 313, 315, 317, 319, 322, 334, 355, 358, 360, 363, 386, 388, 390, 391, 396, 399, 400, 404, 405, 406, 407, 408, 419, 422, 451, 457, 461, 463, 464, 470, 472, 473, 478], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 45, 46, 48, 51, 122, 193, 196, 201, 207, 209, 210, 213, 215, 216, 218, 219, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 248, 249, 255, 256, 298, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 322, 324, 325, 326, 328, 333, 335, 336, 341, 342, 345, 350, 351, 356, 358, 360, 362, 363, 366, 369, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 392, 393, 395, 397, 400, 404, 405, 406, 407, 408, 414, 417, 422, 447, 449, 450, 451, 452, 455, 457, 459, 460, 461, 463, 464, 468, 469, 470, 471, 472, 477, 478, 480, 484, 489], "set_opt": [2, 7, 15, 17, 19, 29, 38, 204, 213, 215, 229, 232, 233, 234, 235, 238, 478, 483], "show_log": [2, 7, 15, 17, 19, 29, 38, 204, 213, 229, 232, 233, 234, 235, 238, 304, 478, 483], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 45, 46, 47, 49, 51, 122, 193, 197, 204, 210, 213, 218, 221, 222, 223, 229, 230, 232, 233, 234, 235, 236, 238, 247, 248, 250, 252, 294, 298, 302, 305, 306, 307, 311, 314, 317, 319, 322, 329, 338, 339, 340, 341, 342, 351, 353, 354, 360, 362, 380, 384, 386, 390, 396, 400, 403, 415, 455, 457, 459, 460, 464, 470, 471, 478, 480, 483, 488, 489, 490], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 122, 157, 158, 165, 167, 173, 193, 207, 215, 232, 233, 234, 236, 248, 249, 294, 298, 319, 320, 464, 468, 472, 478, 480, 481, 482, 484, 485, 488, 490], "enabled_engin": [2, 304, 464], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 41, 46, 48, 51, 122, 207, 212, 213, 215, 219, 221, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 256, 300, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 319, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 356, 357, 359, 360, 362, 363, 366, 367, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 395, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 449, 450, 454, 455, 457, 459, 460, 463, 464, 466, 468, 469, 470, 471, 473, 474, 477, 478, 480, 483, 484, 485, 487, 488, 489, 490], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 45, 47, 48, 122, 193, 197, 200, 201, 202, 211, 226, 230, 236, 237, 240, 242, 243, 305, 306, 309, 311, 313, 314, 315, 404, 406, 407, 454, 474], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 45, 46, 49, 51, 193, 197, 199, 204, 209, 212, 228, 229, 234, 247, 306, 470, 471, 478], "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 51, 199, 209, 211, 228, 229, 239, 244, 305, 306, 457, 459, 470, 471, 478, 489], "releas": [2, 27, 31, 32, 35, 46, 49, 197, 204, 219, 232, 245, 414, 417, 463, 464, 470, 483, 487], "replac": [2, 17, 19, 22, 23, 29, 30, 46, 51, 86, 122, 193, 197, 199, 201, 211, 212, 215, 221, 239, 245, 308, 309, 310, 319, 457], "my": [2, 18, 29, 457, 460, 464, 470], "illustr": [2, 4, 29, 46, 47, 48, 196, 218, 223, 227, 233, 234, 235, 240, 242, 308, 434], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 49, 51, 122, 193, 201, 207, 210, 211, 214, 222, 223, 230, 232, 236, 237, 238, 305, 311, 451, 466, 472], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 48, 50, 86, 87, 93, 96, 102, 199, 200, 201, 202, 204, 210, 211, 217, 221, 223, 224, 226, 230, 232, 236, 237, 238, 239, 240, 242, 248, 249, 250, 306, 307, 309, 311, 314, 320, 322, 326, 343, 358, 360, 362, 364, 368, 369, 371, 372, 374, 375, 376, 378, 379, 380, 381, 383, 385, 390, 391, 396, 397, 399, 404, 406, 407, 408, 409, 410, 411, 413, 422, 432, 433, 435, 437, 439, 456, 457, 464, 471, 472, 480, 488], "servic": [2, 27, 28, 29, 38, 39, 45, 47, 49, 50, 86, 96, 102, 157, 167, 173, 201, 202, 214, 222, 226, 232, 237, 238, 240, 242, 247, 464, 471], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 45, 46, 47, 48, 49, 51, 89, 122, 160, 193, 196, 197, 200, 204, 206, 210, 216, 218, 221, 223, 226, 229, 230, 236, 240, 242, 244, 247, 248, 249, 298, 300, 304, 306, 307, 309, 310, 313, 314, 315, 317, 414, 457, 464, 468, 470, 473, 474], "addr": [2, 29, 250, 464], "ip": [2, 29, 199, 210, 212, 222, 464, 470, 488], "port": [2, 23, 29, 38, 49, 51, 122, 193, 197, 200, 201, 202, 204, 210, 212, 215, 222, 234, 236, 247, 464, 470, 488, 490], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 122, 193, 197, 200, 201, 204, 207, 210, 211, 213, 215, 219, 221, 223, 227, 229, 232, 236, 237, 238, 241, 242, 243, 244, 258, 306, 311, 313, 314, 315, 316, 319, 356, 379, 386, 388, 396, 457, 460, 463, 464, 469, 470, 472, 474, 477], "would": [2, 4, 20, 29, 31, 36, 37, 41, 48, 204, 212, 215, 223, 237, 247, 248, 311, 317, 460, 463, 464, 470], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 122, 223, 238, 248, 257, 305, 309, 311, 395, 470], "wcc_result": 2, "wcc": [2, 13, 245, 248, 480, 485], "print": [2, 7, 16, 20, 29, 30, 33, 46, 49, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 199, 201, 204, 207, 210, 213, 214, 215, 222, 223, 229, 230, 232, 233, 234, 235, 236, 238, 248, 249, 308, 310, 311, 314, 317, 319, 320, 322, 335, 384, 452, 457, 460, 468, 470, 478, 485, 488, 490], "to_datafram": [2, 7, 15, 207, 238, 249, 319, 463, 468, 480], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 46, 47, 48, 80, 83, 86, 87, 89, 93, 96, 105, 122, 151, 154, 157, 158, 160, 165, 167, 176, 193, 196, 197, 201, 203, 204, 207, 210, 211, 212, 215, 216, 218, 224, 227, 230, 236, 238, 241, 242, 245, 247, 248, 249, 250, 276, 282, 284, 305, 306, 307, 308, 309, 310, 311, 314, 315, 317, 318, 319, 321, 414, 415, 454, 457, 460, 463, 464, 468, 470, 471, 478, 480, 481, 483, 484, 488, 489, 490], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 207, 210, 216, 238, 239, 242, 248, 249, 357, 367, 374, 380, 384, 396, 404, 413, 445, 450, 463, 464, 468, 470, 480, 484, 485], "tip": [2, 13, 442], "encount": [2, 32, 37, 51, 193, 200, 204, 240, 258], "fail": [2, 37, 86, 87, 89, 93, 96, 102, 122, 167, 193, 204, 211, 218, 221, 242, 322, 457, 470], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 122, 197, 200, 211, 214, 216, 238, 239, 241, 247, 248, 249, 281, 312, 319, 464, 468, 470, 480, 484, 485, 488], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 45, 46, 47, 93, 122, 193, 196, 204, 209, 211, 213, 219, 221, 223, 229, 236, 237, 238, 241, 248, 249, 281, 305, 307, 320, 322, 386, 388, 391, 392, 414, 415, 416, 417, 419, 431, 449, 457, 463, 470, 480, 483, 484, 488], "empti": [2, 19, 29, 41, 96, 167, 203, 221, 223, 236, 248, 250, 339, 363, 366, 396, 397, 435, 451, 457, 460, 470], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 51, 86, 87, 122, 157, 193, 197, 198, 202, 204, 207, 209, 210, 211, 212, 213, 214, 217, 222, 229, 238, 239, 240, 242, 245, 246, 247, 248, 256, 258, 260, 289, 305, 307, 316, 317, 319, 464, 469], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 46, 204, 207, 213, 217, 223, 229, 232, 233, 234, 235, 238, 242, 245, 248, 249, 305, 311, 317, 464, 468, 480, 482, 484, 488, 490], "load_modern_graph": [2, 7, 30, 33, 213, 238, 248, 320], "modern": [2, 6, 7, 33, 45, 46, 49, 51, 197, 202, 210, 212, 213, 218, 223, 226, 238, 239, 240, 466, 470, 471], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 45, 46, 47, 48, 49, 51, 96, 102, 122, 167, 173, 193, 197, 200, 204, 207, 210, 211, 216, 219, 221, 223, 226, 230, 232, 234, 236, 238, 240, 241, 243, 248, 250, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 320, 449, 452, 457, 464, 469, 470, 477, 480, 487], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 46, 48, 49, 93, 122, 165, 203, 207, 212, 216, 218, 219, 223, 225, 226, 229, 230, 232, 236, 237, 238, 239, 240, 241, 242, 244, 245, 248, 249, 258, 307, 308, 309, 310, 311, 314, 317, 319, 320, 321, 322, 358, 376, 386, 388, 390, 391, 393, 394, 395, 398, 403, 404, 411, 412, 413, 414, 417, 419, 435, 440, 446, 448, 457, 459, 460, 463, 464, 466, 468, 469, 471, 473, 474, 480, 484, 487, 488, 490], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 45, 46, 47, 49, 51, 122, 157, 193, 210, 211, 212, 215, 216, 218, 224, 226, 227, 230, 234, 236, 238, 240, 241, 244, 248, 256, 306, 307, 309, 311, 316, 317, 319, 322, 325, 358, 364, 368, 369, 371, 388, 451, 457, 459, 461, 463, 464, 468, 470, 472, 480, 481, 484, 485, 488], "store": [2, 10, 12, 13, 16, 17, 30, 34, 45, 48, 49, 50, 51, 93, 96, 167, 199, 200, 202, 204, 209, 210, 216, 217, 219, 221, 223, 226, 236, 237, 239, 240, 241, 243, 244, 249, 250, 263, 264, 279, 287, 288, 307, 313, 319, 320, 376, 381, 404, 405, 406, 407, 408, 457, 459, 464, 466, 468, 469, 471, 478, 480, 483], "pod": [2, 27, 28, 29, 30, 38, 41, 49, 204, 207, 210, 232, 236, 464, 470, 478, 481, 483, 484, 490], "elimin": [2, 6, 14, 196, 307], "extran": 2, "resourc": [2, 27, 29, 33, 38, 200, 204, 207, 222, 232, 237, 244, 248, 256, 376, 409, 464, 470, 473, 477, 483], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 45, 47, 48, 50, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 196, 199, 201, 204, 207, 211, 213, 215, 218, 219, 221, 223, 227, 230, 232, 236, 237, 238, 242, 244, 248, 252, 266, 305, 306, 307, 309, 310, 314, 315, 316, 317, 318, 355, 403, 404, 408, 457, 464, 469, 470, 473, 487], "equival": [2, 20, 204, 216, 218, 219, 221, 223, 311, 376, 413, 457], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 43, 48, 51, 199, 200, 204, 215, 216, 218, 219, 221, 222, 223, 227, 236, 237, 239, 242, 244, 247, 311, 315, 322, 355, 356, 363, 366, 386, 388, 393, 404, 405, 406, 407, 408, 416, 452, 455, 456, 457, 458, 459, 462, 468, 469, 474, 477, 480], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 45, 47, 48, 49, 51, 122, 193, 196, 197, 199, 200, 201, 204, 207, 210, 211, 215, 216, 221, 222, 223, 227, 230, 232, 237, 239, 240, 242, 244, 245, 248, 249, 250, 258, 292, 298, 306, 307, 308, 309, 310, 311, 314, 315, 316, 318, 319, 321, 322, 366, 376, 396, 404, 405, 406, 407, 413, 457, 459, 460, 464, 466, 468, 469, 470, 472, 477, 478], "close": [2, 6, 27, 29, 30, 33, 202, 222, 230, 232, 237, 248, 307, 317, 320, 459, 464, 470, 484], "free": [2, 9, 37, 204, 230, 244, 397, 404, 414, 417, 419, 450, 456, 464], "delet": [2, 9, 27, 29, 30, 33, 49, 50, 86, 87, 93, 157, 158, 165, 202, 204, 277, 316, 464, 466, 470, 483], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 48, 200, 202, 210, 211, 219, 222, 223, 226, 237, 239, 240, 241, 242, 249, 279, 306, 318, 321, 457, 459, 469, 470], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 45, 51, 200, 211, 219, 223, 226, 227, 237, 238, 239, 240, 242, 243, 269, 319, 422, 469, 474], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 204, 207, 211, 225, 227, 230, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 307, 310, 311, 313, 319, 367, 376, 379, 380, 388, 389, 390, 391, 392, 396, 397, 398, 399, 404, 409, 410, 413, 414, 416, 417, 440, 449, 454, 457, 458, 460, 462, 463, 473], "deriv": [3, 12, 34, 238, 241, 247, 249, 319, 322, 466], "grape": [3, 4, 15, 16, 22, 23, 34, 209, 225, 237, 243, 247, 256, 466, 469, 471, 472, 473, 474, 480, 486], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 43, 51, 86, 87, 93, 96, 102, 122, 197, 198, 199, 200, 204, 207, 210, 211, 213, 216, 217, 218, 219, 223, 224, 225, 226, 229, 237, 239, 240, 241, 242, 243, 245, 306, 307, 312, 315, 454, 456, 466, 468, 469, 470, 472, 474, 480, 488], "sigmod": [3, 12, 14, 24, 34, 237, 480, 486], "2017": [3, 12, 14, 34, 237, 414, 415, 480], "further": [3, 6, 10, 14, 20, 27, 30, 34, 200, 207, 212, 216, 219, 221, 223, 238, 239, 249, 307, 319, 320, 335, 466, 469], "enhanc": [3, 4, 9, 200, 218, 221, 238], "introduc": [3, 6, 10, 19, 20, 24, 47, 122, 193, 196, 209, 211, 216, 218, 219, 221, 223, 225, 227, 237, 239, 241, 244, 305, 308, 309, 311, 313, 322, 434, 456, 469, 474], "lot": [3, 13, 37, 207, 223, 225, 474], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 45, 50, 51, 86, 93, 96, 102, 157, 165, 200, 202, 211, 213, 218, 223, 228, 237, 238, 239, 247, 250, 257, 258, 299, 316, 319, 320, 322, 329, 335, 376, 388, 397, 399, 419, 448, 455, 457, 464, 466, 468, 469, 470, 472, 484], "featur": [3, 6, 9, 12, 23, 32, 34, 122, 193, 202, 216, 218, 225, 227, 229, 232, 233, 237, 238, 241, 242, 243, 244, 247, 252, 305, 306, 313, 317, 319, 457, 464, 469, 474, 484, 489], "storag": [3, 9, 30, 43, 49, 51, 54, 57, 96, 122, 125, 128, 167, 193, 200, 204, 211, 212, 216, 218, 219, 223, 236, 239, 242, 244, 284, 307, 468, 470, 471], "languag": [3, 12, 16, 35, 43, 51, 198, 202, 207, 211, 213, 218, 219, 221, 222, 223, 224, 226, 227, 230, 237, 238, 239, 240, 241, 244, 252, 320, 469, 470, 474], "pattern": [3, 6, 12, 23, 30, 45, 200, 211, 212, 215, 218, 219, 221, 226, 230, 237, 240, 244, 248, 310, 315, 470], "better": [3, 8, 12, 20, 24, 29, 34, 210, 211, 223, 225, 242, 244, 464, 470, 474], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 47, 122, 193, 197, 211, 213, 215, 218, 224, 225, 237, 239, 241, 243, 244, 450, 469, 470, 472, 474], "big": [3, 6, 12, 37, 225, 239, 474], "overview": [3, 23, 34, 197, 202, 218, 223, 238, 466], "architectur": [3, 9, 199, 200, 237, 242, 248], "kei": [3, 4, 13, 20, 27, 46, 47, 48, 70, 71, 141, 142, 202, 210, 213, 216, 217, 218, 221, 223, 236, 239, 241, 242, 243, 248, 249, 250, 281, 282, 283, 292, 308, 311, 317, 319, 322, 351, 400, 404, 405, 406, 407, 455, 457, 459, 460, 463, 464, 469, 470, 480, 490], "concept": [3, 239, 242, 305, 306], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 225, 226, 237, 239, 240, 474], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 222, 227, 239, 247, 474], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 51, 199, 204, 207, 210, 213, 216, 224, 226, 227, 229, 230, 231, 232, 233, 238, 242, 243, 246, 248, 313, 320, 463, 464, 466, 468, 484], "tune": [3, 207, 236, 237], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 45, 46, 47, 122, 193, 197, 199, 200, 201, 202, 209, 210, 213, 215, 217, 221, 222, 224, 229, 232, 233, 238, 252, 484], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 50, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 197, 198, 200, 201, 209, 211, 212, 215, 216, 223, 228, 237, 238, 239, 244, 245, 247, 248, 250, 255, 305, 306, 307, 308, 311, 312, 317, 376, 418, 461, 469, 470, 472, 477], "organ": [4, 51, 215, 221, 223, 226, 227, 242, 246, 305, 307, 309, 313, 314, 393, 395, 434], "identifi": [4, 9, 13, 24, 48, 86, 96, 122, 157, 167, 193, 196, 216, 219, 221, 223, 237, 238, 240, 248, 297, 384, 451, 454, 457, 464, 470, 477, 490], "simplic": [4, 9], "suggest": [4, 13, 211, 215, 223, 236, 239, 376], "prebuilt": [4, 41, 212], "docker": [4, 27, 32, 33, 36, 38, 41, 50, 199, 202, 204, 212, 226, 470, 477, 481, 484, 486, 487], "imag": [4, 29, 36, 38, 49, 51, 204, 212, 226, 228, 234, 245, 308, 464, 477], "necessari": [4, 6, 23, 27, 37, 41, 201, 212, 213, 218, 222, 236, 259, 267, 272, 306, 307, 309, 311, 319, 469, 470, 478], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 51, 122, 199, 204, 212, 214, 215, 222, 223, 228, 229, 239, 242, 248, 311, 379, 384, 470, 477, 480], "shm": [4, 32, 41, 212, 228, 234, 482], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 47, 203, 204, 210, 212, 222, 227, 228, 230, 234, 236, 242, 245, 250, 306, 308, 309, 311, 316, 318, 319, 362, 363, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 388, 399, 408, 412, 414, 457, 468, 469, 470, 471, 482], "4096m": [4, 32, 41, 212, 228], "registri": [4, 27, 32, 41, 49, 51, 212, 228, 234, 312, 464, 470, 482], "cn": [4, 23, 27, 29, 31, 32, 41, 46, 49, 51, 212, 228, 234, 236, 312, 470, 481, 482, 490], "hongkong": [4, 27, 32, 41, 49, 51, 212, 228, 234, 470, 482], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 46, 49, 51, 212, 228, 234, 236, 312, 470, 481, 482, 490], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 41, 46, 49, 51, 86, 87, 93, 96, 102, 122, 193, 212, 213, 215, 228, 229, 234, 236, 239, 240, 245, 248, 252, 312, 315, 322, 409, 418, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 437, 442, 464, 469, 470, 480, 481, 482, 483, 490], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 42, 49, 51, 197, 212, 215, 228, 229, 469, 470, 482, 487], "altern": [4, 48, 216, 385, 404, 408, 457, 469, 470], "manual": [4, 9, 27, 30, 33, 50, 122, 204, 237, 244, 319, 470], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 45, 47, 48, 49, 51, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 197, 199, 200, 201, 204, 210, 211, 213, 216, 218, 219, 221, 222, 223, 228, 230, 232, 234, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 250, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 326, 327, 329, 330, 334, 336, 351, 352, 356, 357, 360, 362, 363, 367, 376, 385, 394, 400, 414, 415, 417, 419, 443, 451, 452, 455, 457, 464, 468, 469, 470, 473, 478], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 45, 46, 49, 51, 93, 96, 122, 167, 193, 196, 197, 199, 200, 201, 204, 212, 215, 219, 230, 232, 236, 238, 305, 306, 307, 309, 310, 311, 312, 315, 317, 468, 470, 474, 477, 484], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 50, 122, 193, 197, 199, 201, 204, 207, 209, 213, 217, 226, 232, 238, 239, 246, 248, 252, 312, 316, 322, 464, 469, 470, 471, 478, 483], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 45, 46, 122, 193, 197, 207, 215, 219, 221, 227, 239, 240, 242, 248, 249, 250, 260, 305, 306, 307, 308, 315, 316, 317, 322, 419, 430, 449, 457, 461, 463, 464, 466, 469, 470, 471, 478, 480], "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 49, 51, 122, 212, 215, 252, 312, 470, 482], "repositori": [4, 29, 36, 37, 49, 51, 122, 210, 215, 252, 464, 470], "enter": [4, 211, 222], "analytical_engin": [4, 15, 17, 31, 36, 252, 480], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 45, 46, 49, 51, 204, 215, 222, 226, 247, 251, 253, 305, 316, 319, 464, 468, 477, 478, 481, 483, 484], "git": [4, 17, 22, 29, 30, 31, 32, 35, 37, 49, 51, 122, 212, 215, 252, 315, 469, 482], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 45, 46, 49, 50, 122, 193, 197, 199, 201, 204, 212, 213, 214, 215, 217, 222, 229, 232, 233, 238, 239, 240, 248, 252, 312, 315, 322, 376, 380, 381, 382, 396, 399, 406, 407, 409, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 441, 442, 443, 444, 449, 464, 469, 470, 480, 481, 482, 483, 484, 487, 488, 490], "github": [4, 22, 29, 30, 31, 32, 35, 46, 49, 51, 122, 193, 212, 215, 239, 240, 248, 252, 312, 315, 407, 464, 469, 480, 482, 490], "alibaba": [4, 17, 22, 23, 29, 31, 32, 46, 49, 51, 86, 87, 93, 96, 102, 122, 193, 212, 226, 237, 239, 242, 243, 252, 312, 315, 480, 482, 490], "cd": [4, 17, 22, 29, 31, 32, 35, 49, 51, 122, 212, 214, 222, 252, 312, 315, 317, 470, 477, 478, 480, 482, 488], "sinc": [4, 6, 23, 24, 29, 30, 37, 45, 47, 48, 122, 193, 197, 211, 215, 221, 223, 228, 232, 236, 237, 245, 258, 307, 311, 319, 355, 356, 386, 388, 435, 452, 459, 463, 468, 469, 470], "inherit": [4, 6, 9, 16, 211, 239, 247, 305, 315], "libgrap": [4, 16, 31, 34, 239, 252], "lite": [4, 16, 31, 34, 239, 252], "note": [4, 13, 14, 20, 27, 29, 37, 38, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 201, 211, 215, 216, 218, 221, 223, 227, 232, 233, 236, 238, 239, 240, 248, 249, 250, 258, 297, 299, 307, 311, 319, 322, 331, 332, 335, 339, 352, 353, 354, 355, 356, 357, 363, 364, 369, 372, 374, 376, 377, 378, 379, 381, 383, 385, 386, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 434, 449, 450, 451, 452, 454, 457, 459, 460, 463, 464, 468, 470, 477, 484, 490], "core": [4, 6, 12, 34, 37, 204, 211, 213, 237, 238, 239, 248, 252, 317, 322, 464, 484], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 45, 47, 48, 50, 51, 200, 207, 211, 218, 222, 223, 233, 238, 239, 240, 241, 242, 248, 306, 307, 308, 319, 367, 386, 434, 449, 451, 457, 458, 468, 469, 470, 473], "partition": [4, 203, 315], "worker": [4, 9, 13, 14, 23, 28, 34, 45, 51, 212, 230, 232, 234, 307, 310, 317, 464, 468], "between": [4, 6, 9, 10, 12, 13, 18, 19, 48, 51, 193, 204, 209, 211, 218, 223, 224, 227, 240, 242, 247, 248, 306, 307, 309, 311, 317, 322, 379, 380, 381, 384, 390, 396, 397, 399, 403, 404, 405, 406, 408, 411, 413, 414, 415, 417, 422, 452, 454, 457, 469, 470, 477], "heavili": 4, "reus": [4, 30, 122, 193, 201, 218, 227, 230, 239, 248, 317, 319, 464, 466], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 49, 86, 122, 193, 197, 199, 219, 223, 229, 236, 243, 252, 258, 304, 315, 319, 366, 400, 457, 463, 464, 466, 468, 470, 477], "fulli": [4, 47, 227, 230, 241, 248, 258, 399, 469, 480], "recommend": [4, 27, 30, 36, 37, 204, 210, 213, 215, 223, 227, 236, 237, 238, 242, 311], "locat": [4, 23, 27, 36, 38, 47, 48, 99, 170, 199, 210, 212, 216, 223, 228, 236, 241, 251, 253, 307, 308, 319, 470, 471, 477], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 41, 45, 46, 48, 49, 197, 201, 204, 207, 210, 211, 213, 215, 218, 223, 224, 226, 228, 236, 237, 238, 242, 243, 244, 246, 247, 248, 306, 311, 315, 317, 319, 376, 386, 388, 396, 457, 463, 464, 466, 468, 469, 470, 471, 490], "therebi": [4, 200, 219], "fledg": [4, 12, 237], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 45, 197, 199, 209, 213, 232, 247, 319, 369, 464, 470, 477, 478, 481, 482, 484], "while": [4, 6, 12, 19, 20, 29, 34, 47, 48, 122, 193, 197, 200, 207, 210, 214, 216, 218, 219, 221, 222, 223, 227, 237, 239, 240, 241, 243, 244, 306, 311, 317, 353, 354, 414, 417, 419, 451, 457, 466, 469, 470, 478], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 45, 46, 47, 48, 49, 51, 93, 102, 122, 165, 196, 197, 200, 201, 204, 210, 212, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 245, 248, 258, 274, 275, 292, 305, 307, 309, 311, 314, 316, 318, 319, 322, 358, 369, 376, 379, 381, 384, 388, 391, 393, 394, 395, 411, 419, 420, 421, 444, 447, 449, 457, 463, 464, 466, 468, 469, 470, 471, 488, 489], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 45, 46, 47, 48, 49, 96, 122, 167, 193, 200, 207, 210, 211, 216, 218, 219, 221, 223, 226, 227, 229, 230, 236, 237, 238, 239, 240, 241, 242, 244, 247, 248, 249, 250, 252, 256, 305, 306, 307, 309, 310, 311, 312, 319, 320, 322, 341, 342, 351, 377, 378, 403, 404, 408, 416, 429, 450, 451, 457, 463, 464, 468, 469, 470, 471, 474], "ship": 4, "6": [4, 10, 17, 18, 22, 31, 207, 213, 221, 222, 223, 238, 245, 248, 306, 311, 317, 322, 341, 360, 389, 390, 391, 408, 422, 424, 430, 431, 434, 437, 441, 442, 450, 452, 457, 470, 472, 480, 483, 484, 488], "graphalyt": [4, 244], "benchmark": [4, 34, 200, 219, 223, 226, 240, 242, 244, 376], "flatten": [4, 13, 234], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 204, 207, 223, 232, 242, 248, 310, 352, 360, 457, 469], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 45, 46, 48, 51, 122, 193, 197, 198, 199, 200, 201, 207, 210, 211, 212, 213, 217, 218, 221, 223, 226, 238, 239, 241, 242, 247, 248, 249, 276, 311, 315, 319, 320, 322, 417, 461, 464, 466, 470, 472, 477, 478, 480, 484, 488], "written": [4, 12, 20, 48, 51, 223, 237, 239, 241, 435, 466, 469, 472, 480], "giraph": [4, 7, 8, 12, 17, 23, 24, 225, 244, 474], "graphx": [4, 7, 8, 12, 17, 24, 225, 244, 474], "app": [4, 15, 16, 17, 18, 33, 249, 250, 252, 257, 260, 283, 289, 292, 306, 319, 462, 463, 469, 480], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 83, 105, 122, 154, 176, 197, 200, 211, 212, 237, 247, 248, 252, 470], "serv": [4, 27, 43, 51, 122, 173, 193, 197, 204, 215, 218, 226, 238, 239, 242, 307, 470, 477], "layer": [4, 6, 210, 211, 227, 230, 239, 242, 244, 305, 306, 309, 313, 317, 489], "cuda": [4, 245], "suit": [4, 36, 207, 212, 227, 242, 477], "gpu": [4, 239, 312], "acceler": [4, 27, 469], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 203, 211, 240, 242, 250, 282, 319, 320, 466, 471, 474, 480], "extend": [4, 9, 17, 23, 200, 218, 219, 221, 222, 223, 244, 249, 306, 314, 315, 403, 469, 480], "loader": [4, 22, 212, 235, 247, 258, 269, 462, 471, 485, 486], "mutabl": [4, 51, 239], "io": [4, 27, 30, 33, 41, 239, 240, 248, 316, 319, 407, 464, 470, 473, 487], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 47, 101, 172, 207, 226, 234, 237, 239, 241, 247, 250, 307, 386, 388, 425, 457, 460, 470, 480], "sub": [4, 12, 14, 18, 223, 226, 236, 249, 309, 311, 469, 474], "helper": [4, 477], "thread": [4, 6, 31, 45, 47, 122, 210, 212, 227, 245, 318], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 46, 199, 204, 211, 223, 230, 242, 247, 250, 318, 469, 480], "buffer": [4, 316], "sync": [4, 250, 316, 469], "serial": [4, 221, 222, 247, 319, 464, 469, 488], "vertex_map": [4, 13, 46, 47, 86, 122, 157, 168, 189, 193, 298, 319, 464], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 46, 51, 197, 201, 210, 211, 213, 216, 219, 221, 222, 227, 236, 237, 240, 242, 248, 305, 306, 307, 313, 315, 317, 318, 319, 320, 367, 376, 386, 388, 391, 410, 451, 456, 457, 468, 469, 470, 471, 477], "map": [4, 6, 13, 46, 50, 70, 71, 89, 100, 113, 122, 141, 142, 193, 199, 202, 216, 219, 221, 223, 240, 247, 306, 315, 319, 449, 464, 470, 471, 485, 488], "intern": [4, 13, 50, 86, 93, 96, 102, 157, 165, 167, 173, 219, 240, 319, 357, 480, 482], "frame": [4, 242], "wrap": [4, 236, 239, 247, 252], "becaus": [4, 37, 211, 215, 219, 223, 242, 305, 308, 322, 452, 469, 470], "reli": [4, 9, 19, 199, 215, 217, 312, 469], "templat": [4, 9, 15, 28, 49, 50, 203, 234, 247, 469], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 39, 204, 207, 211, 215, 221, 223, 227, 230, 231, 232, 242, 311, 315, 318, 385, 408, 451, 457, 469, 471, 472], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 43, 47, 48, 96, 122, 167, 193, 200, 210, 211, 216, 218, 221, 226, 227, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 306, 307, 311, 322, 419, 457, 463, 468, 469, 472, 478], "label": [4, 6, 7, 13, 15, 20, 33, 46, 73, 86, 116, 119, 144, 157, 187, 190, 203, 210, 215, 216, 218, 219, 229, 233, 234, 235, 237, 238, 240, 242, 247, 248, 249, 250, 258, 305, 308, 311, 317, 319, 322, 357, 361, 368, 372, 373, 375, 385, 386, 388, 389, 390, 391, 392, 434, 435, 457, 459, 460, 463, 464, 468, 470, 471, 484, 485, 488, 489], "cannot": [4, 27, 30, 51, 204, 218, 221, 223, 227, 242, 244, 247, 248, 252, 307, 319, 376, 415, 416, 463, 464, 470, 472, 483], "determin": [4, 37, 45, 211, 221, 223, 227, 230, 236, 240, 241, 247, 248, 307, 311, 402, 405, 406, 407, 464], "reason": [4, 204, 219, 221, 227, 306, 307, 437], "jit": 4, "technologi": [4, 209, 211, 243], "compil": [4, 15, 31, 32, 34, 45, 50, 197, 200, 201, 202, 204, 210, 211, 212, 216, 222, 237, 248, 260, 469, 470, 472, 478], "associ": [4, 6, 9, 29, 45, 46, 48, 216, 221, 242, 391, 403, 449, 451, 457, 464, 469, 470], "runtim": [4, 6, 17, 23, 31, 50, 51, 196, 199, 211, 237, 239, 240, 241, 247, 248, 252, 469, 482, 483], "wrapper": [4, 214, 222, 224, 226, 241, 247, 260, 266, 319, 320, 469], "facilit": [4, 20, 212, 221, 226, 227, 230, 242, 306, 469, 470], "task": [4, 6, 7, 14, 34, 37, 41, 211, 213, 223, 226, 227, 229, 231, 232, 233, 234, 235, 237, 239, 240, 242, 306, 317, 469], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 43, 50, 51, 96, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 202, 207, 209, 217, 226, 237, 243, 246, 252, 258, 305, 307, 309, 310, 311, 315, 321, 457, 464, 468, 469, 470, 471, 480, 491], "jar": [4, 8, 22, 23, 35, 39, 122, 248, 470, 480], "read": [4, 8, 20, 24, 37, 47, 200, 207, 214, 216, 220, 231, 236, 237, 238, 239, 305, 306, 311, 316, 317, 319, 355, 356, 455, 457, 458, 462, 464, 466, 470, 488], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 49, 87, 196, 199, 210, 212, 213, 223, 228, 229, 237, 242, 243, 247, 248, 311, 315, 316, 463, 464, 468, 473, 480], "cmake": [4, 31, 32, 36, 51, 204, 312], "script": [4, 32, 37, 51, 244, 245, 276, 305, 306, 317, 320, 481], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 46, 48, 51, 96, 122, 193, 197, 199, 200, 202, 204, 212, 221, 222, 223, 232, 236, 237, 247, 248, 259, 260, 266, 267, 272, 297, 316, 317, 319, 376, 386, 388, 464, 466, 471, 477], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 211, 215, 223, 227, 230, 238, 240, 241, 242, 307, 309, 440, 466], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 46, 122, 197, 207, 210, 213, 219, 221, 223, 225, 229, 236, 240, 241, 305, 306, 307, 311, 315, 360, 376, 396, 419, 453, 463, 470, 472, 474, 478], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 48, 199, 211, 215, 218, 219, 226, 227, 236, 238, 239, 240, 241, 242, 246, 311, 319, 327, 360, 408, 457, 466, 470, 473, 474, 478], "thei": [4, 6, 20, 24, 27, 30, 31, 47, 207, 211, 215, 218, 221, 223, 226, 232, 237, 240, 242, 244, 305, 306, 314, 319, 363, 371, 376, 404, 406, 407, 450, 451, 457, 463, 464, 466, 469, 470], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 48, 207, 210, 211, 213, 218, 221, 226, 230, 236, 237, 238, 239, 240, 241, 242, 247, 249, 309, 311, 319, 456, 457, 463, 472], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 210, 211, 219, 230, 237, 240, 242, 248, 310, 315, 374, 379, 380, 381, 384, 415, 474], "object": [4, 15, 38, 68, 74, 89, 94, 100, 111, 113, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 212, 213, 214, 216, 221, 222, 223, 227, 230, 236, 237, 238, 240, 242, 245, 247, 259, 272, 284, 298, 306, 308, 309, 310, 311, 314, 317, 320, 321, 335, 355, 356, 414, 454, 457, 459, 460, 462, 463, 470, 480, 490], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 48, 219, 221, 222, 223, 230, 242, 245, 250, 309, 310, 311, 314, 315, 460, 473, 488], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 204, 211, 215, 237, 247, 315, 318, 464, 466], "state": [4, 6, 9, 10, 12, 24, 27, 34, 211, 226, 240, 241, 243, 245, 316, 319, 376, 379, 380, 381, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 405, 406, 407, 408, 411, 412, 413, 417, 449, 452, 454], "synchron": [4, 6, 10, 12, 14, 15, 237, 469], "explicitli": [4, 13, 247, 307, 376, 464, 470], "implicitli": [4, 258], "main": [4, 6, 30, 34, 37, 43, 46, 51, 86, 87, 93, 96, 102, 122, 193, 200, 211, 218, 219, 222, 223, 244, 305, 314, 317, 322, 464, 470, 489, 490], "logic": [4, 6, 9, 14, 16, 17, 122, 193, 196, 211, 221, 223, 226, 239, 241, 245, 308, 468, 469, 470, 478, 480], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 49, 198, 200, 202, 204, 210, 212, 215, 221, 222, 223, 227, 230, 236, 237, 239, 240, 241, 242, 306, 307, 308, 309, 310, 311, 316, 317, 319, 457, 460, 464, 466, 468, 469, 470, 471, 478, 490], "send": [4, 6, 10, 18, 24, 212, 240, 250, 469, 480], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 236, 237, 240, 242, 250, 311, 315, 466, 469, 480], "messagemanag": [4, 17, 480], "call": [4, 6, 12, 13, 16, 17, 19, 24, 50, 96, 122, 167, 193, 199, 200, 202, 204, 219, 221, 223, 230, 247, 250, 305, 307, 311, 314, 315, 320, 352, 366, 367, 397, 408, 437, 449, 457, 460, 464, 469, 470], "encourag": [4, 6, 15, 24, 37], "fork": [4, 51], "repo": [4, 29, 37, 46, 51, 193, 212, 239, 470, 481, 482], "much": [4, 6, 13, 19, 22, 197, 204, 211, 221, 223, 307, 311, 469], "easier": [4, 32, 36, 37, 43, 221, 239, 240, 241, 311, 464], "begin": [4, 15, 16, 30, 51, 122, 193, 203, 207, 215, 216, 220, 223, 238, 249, 250, 396, 463, 469], "small": [4, 9, 11, 13, 20, 200, 207, 223, 240, 241, 244, 322, 377, 378, 404, 447, 458, 464, 470], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 45, 51, 197, 223, 237, 241, 242, 244, 245, 248, 265, 297, 306, 319, 322, 335, 457, 464, 470], "revis": [4, 14, 17, 245], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 216, 226, 227, 242, 244, 245, 256, 257, 307, 319, 324, 325, 335, 393, 394, 395, 397, 451, 457, 466, 488, 490], "gradual": 4, "avoid": [4, 13, 219, 222, 469, 470], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 48, 200, 204, 207, 210, 211, 213, 217, 222, 223, 224, 226, 227, 230, 231, 232, 237, 238, 239, 243, 244, 248, 292, 306, 307, 309, 311, 313, 317, 318, 331, 355, 356, 376, 411, 469, 480], "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 48, 51, 96, 167, 199, 201, 204, 210, 216, 219, 221, 223, 228, 229, 231, 232, 237, 238, 240, 241, 248, 249, 305, 319, 330, 337, 359, 363, 368, 378, 383, 400, 406, 451, 453, 457, 464, 468, 472], "commit": [4, 245, 466], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 51, 193, 204, 212, 213, 228, 229, 234, 238, 480, 481, 482, 483], "gsctl": [4, 32, 36, 41, 46, 51, 193, 196, 197, 199, 201, 202, 209, 212, 228, 481, 482], "py": [4, 15, 32, 36, 41, 51, 193, 212, 228, 234, 305, 312, 317, 464, 470, 477, 480, 481, 482, 489], "cmakelist": 4, "txt": [4, 31, 35, 480], "artifact": [4, 17, 23, 29, 36, 49, 212, 228, 477], "grape_engin": [4, 38, 282, 478], "togeth": [4, 9, 10, 20, 41, 211, 223, 232, 237, 245, 311, 315, 358], "share": [4, 6, 30, 31, 37, 45, 48, 49, 223, 228, 237, 239, 240, 469, 471, 482], "bunch": [4, 41, 244, 247], "binari": [4, 15, 27, 31, 51, 242, 477], "choos": [4, 6, 12, 22, 34, 41, 48, 210, 211, 221, 223, 226, 227, 237, 242, 305, 306, 396, 397, 435], "prefix": [4, 31, 36, 37, 198, 204, 212, 221, 228, 234, 319, 451, 469, 488], "usr": [4, 470], "look": [4, 15, 18, 20, 27, 45, 122, 210, 223, 236, 252, 318, 463, 466, 470, 471], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 45, 46, 48, 49, 51, 99, 122, 193, 196, 197, 200, 201, 202, 204, 209, 210, 212, 215, 236, 247, 248, 256, 279, 305, 306, 312, 317, 319, 355, 356, 407, 457, 459, 464, 466, 470, 471, 477, 478, 480, 490], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 45, 47, 49, 51, 193, 199, 200, 201, 211, 216, 219, 238, 244, 464], "correct": [4, 6, 14, 37, 38, 211, 215, 311, 319, 322, 469], "unit": [4, 211, 223, 241, 315, 405, 406, 407, 470], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 204, 210, 213, 223, 226, 237, 238, 239, 241, 242, 244, 311, 313, 469], "graphscope_hom": [4, 23, 482], "pwd": [4, 30, 317], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 46, 49, 122, 193, 213, 214, 217, 222, 228, 229, 236, 245, 312, 317, 482], "tmp": [4, 18, 19, 28, 38, 49, 51, 86, 210, 212, 279, 284, 317, 319, 464, 468, 470, 478, 480, 483], "gstest": [4, 19, 22, 23, 30, 51, 480, 482], "against": [4, 14, 37, 212, 248, 439], "compar": [4, 19, 211, 216, 218, 219, 221, 223, 240, 245, 247, 248, 308, 376, 463], "ground": [4, 218, 242], "truth": [4, 242], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 51, 200, 204, 209, 210, 211, 213, 217, 219, 221, 224, 226, 227, 230, 231, 232, 234, 235, 237, 239, 240, 242, 243, 244, 248, 252, 305, 308, 310, 314, 316, 317, 321, 376, 379, 386, 388, 397, 404, 405, 406, 407, 408, 416, 470, 471], "broad": [6, 239], "spectrum": [6, 239, 322, 449], "central": [6, 15, 43, 207, 226, 227, 238, 239, 242, 243, 248, 311, 322, 434, 469], "match": [6, 15, 45, 47, 93, 122, 165, 193, 196, 197, 200, 201, 211, 212, 213, 214, 215, 216, 218, 237, 238, 239, 248, 356, 376, 384, 386, 388, 415, 451, 488], "mine": [6, 15, 237, 239, 240], "philosophi": [6, 24, 239], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 197, 202, 210, 211, 212, 213, 214, 219, 222, 224, 226, 227, 234, 235, 236, 237, 238, 239, 241, 250, 305, 306, 307, 309, 311, 314, 317, 376, 384, 396, 449, 470, 478, 490], "stronger": [6, 239], "flexibl": [6, 12, 13, 23, 45, 48, 217, 218, 223, 226, 237, 238, 239, 464, 468], "flow": [6, 239, 240, 305, 447], "oper": [6, 9, 12, 15, 30, 31, 36, 45, 51, 86, 87, 93, 102, 122, 157, 158, 165, 173, 193, 199, 200, 201, 204, 207, 209, 210, 211, 213, 217, 218, 219, 221, 226, 227, 230, 236, 237, 239, 240, 241, 242, 243, 248, 250, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 277, 278, 279, 281, 282, 285, 286, 287, 288, 306, 307, 308, 309, 310, 311, 313, 314, 316, 318, 319, 339, 418, 419, 457, 460, 462, 464, 466, 469, 470, 477], "arbitrari": [6, 221, 223, 239, 309, 384, 388, 404, 405, 406, 407, 457, 460, 470, 488], "beyond": [6, 24, 218, 239, 243, 417], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 43, 46, 51, 196, 197, 199, 200, 201, 209, 210, 211, 212, 214, 215, 216, 218, 221, 222, 223, 226, 228, 236, 239, 240, 241, 242, 245, 311, 312, 315, 317, 319, 335, 387, 451, 457, 464, 468, 469, 470, 477, 481, 482], "divers": [6, 10, 12, 34, 48, 209, 211, 239, 240, 306, 466], "easi": [6, 7, 12, 200, 207, 210, 211, 213, 214, 222, 223, 224, 226, 229, 230, 236, 237, 238, 239, 243, 306, 311, 315, 477], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 200, 204, 207, 216, 219, 221, 223, 226, 236, 237, 238, 239, 240, 241, 246, 250, 252, 305, 311, 315, 319, 320, 459, 460, 466, 469, 474, 480, 484], "few": [6, 29, 200, 204, 210, 239, 469], "satisfactori": [6, 239, 242], "major": [6, 12, 13, 14, 216, 240, 247], "recent": [6, 309, 470], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 204, 211, 218, 224, 227, 230, 236, 237, 239, 240, 241, 242, 243, 244, 248, 249, 298, 309, 311, 313, 315, 319, 320, 461, 464, 466, 468, 480, 485, 490], "focu": [6, 41, 237, 241, 244, 315], "hand": [6, 30, 33, 211, 219, 221, 437], "point": [6, 13, 14, 22, 37, 43, 51, 211, 221, 230, 240, 305, 360, 385, 414, 417, 457, 468, 470, 471, 472, 477], "breadth": [6, 248, 322], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 46, 47, 51, 86, 96, 122, 193, 197, 201, 204, 207, 211, 212, 213, 214, 216, 221, 222, 223, 227, 231, 232, 236, 238, 239, 241, 242, 248, 249, 305, 306, 311, 313, 315, 319, 322, 326, 356, 372, 375, 384, 397, 400, 411, 412, 413, 414, 415, 418, 451, 456, 457, 460, 463, 464, 466, 469, 470, 471, 472], "search": [6, 37, 201, 209, 215, 227, 237, 240, 242, 244, 248, 322, 486], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 207, 237, 240, 243, 245, 248, 249, 322, 460, 463, 468, 480], "shortest": [6, 7, 19, 24, 211, 238, 240, 248, 322, 472], "leav": [6, 223, 319, 357, 367], "varieti": [6, 12, 34, 207, 237, 244], "suffer": [6, 207], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 48, 200, 201, 204, 207, 209, 215, 218, 219, 222, 223, 226, 227, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 252, 309, 311, 313, 390, 411, 468, 469, 471, 473], "limit": [6, 9, 13, 22, 48, 202, 204, 210, 214, 215, 216, 219, 224, 227, 240, 241, 242, 244, 245, 464, 483, 488], "phase": [6, 16, 23, 24, 306, 311], "propag": [6, 7, 9, 14, 36, 237, 238, 240, 242, 248, 311, 329, 419], "short": [6, 239, 244, 245, 337, 469, 470], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 122, 193, 197, 221, 223, 242, 316, 376, 399, 470, 488], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 45, 51, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 221, 226, 227, 237, 240, 242, 244, 312, 315, 457, 466, 470, 480, 481], "Such": [6, 13, 198, 241, 244, 279, 284, 416, 425], "abstract": [6, 43, 207, 226, 230, 233, 237, 238, 239, 305, 306, 313, 315, 316, 471], "bring": [6, 41], "product": [6, 12, 32, 51, 204, 230, 237, 241, 244, 250, 306, 307, 311, 477, 488], "sacrific": 6, "almost": [6, 22, 223, 392, 469], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 46, 48, 49, 204, 223, 234, 236, 238, 239, 244, 247, 249, 309, 311, 315, 316, 454, 463, 468, 470, 472, 473, 481, 483, 487], "At": [6, 12, 14, 15, 20, 34, 37, 122, 211, 222, 223, 306, 316, 470, 472], "advanc": [6, 7, 15, 211, 229, 230, 239, 403], "pose": 6, "challeng": [6, 9, 193, 206, 237, 469], "repres": [6, 9, 12, 15, 45, 47, 48, 193, 207, 211, 215, 219, 223, 227, 229, 230, 233, 236, 237, 238, 239, 240, 242, 245, 247, 248, 249, 256, 283, 306, 307, 308, 309, 311, 315, 317, 319, 363, 396, 404, 405, 406, 407, 408, 416, 423, 426, 430, 438, 447, 449, 451, 452, 457, 461, 464, 469, 470], "non": [6, 9, 27, 221, 244, 247, 250, 308, 346, 347, 367, 386, 388, 391, 415, 419, 426, 444, 457, 458], "ones": [6, 9, 243, 248, 313], "distil": 6, "critic": [6, 13, 227, 248], "context": [6, 15, 17, 18, 20, 27, 31, 46, 48, 196, 197, 201, 219, 239, 241, 248, 250, 255, 256, 257, 263, 264, 279, 284, 287, 288, 290, 299, 302, 315, 319, 322, 447, 462, 464, 469, 477, 480], "fall": 6, "meet": [6, 15, 18, 37, 207, 211, 213, 230, 237, 242, 309, 310, 376, 405, 406, 407, 472, 474], "therefor": [6, 12, 15, 207, 211, 213, 215, 216, 219, 221, 223, 227, 238, 305, 306, 311, 403, 469, 478], "fulfil": [6, 15, 18, 200, 239], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 45, 47, 49, 197, 199, 204, 207, 219, 221, 223, 224, 229, 236, 240, 242, 243, 306, 307, 322, 457, 466, 469, 477, 478], "must": [6, 13, 24, 27, 30, 37, 46, 47, 48, 58, 129, 204, 210, 221, 223, 237, 247, 249, 258, 306, 307, 309, 310, 311, 319, 321, 322, 335, 374, 376, 384, 387, 397, 399, 401, 404, 406, 408, 416, 419, 455, 457, 459, 463, 469, 470], "race": 6, "schedul": [6, 23, 36, 237, 239, 464], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 45, 86, 157, 204, 210, 211, 212, 215, 216, 219, 223, 236, 247, 248, 249, 266, 282, 307, 319, 376, 388, 400, 404, 414, 417, 435, 451, 457, 460, 463, 464, 468, 469, 470, 474, 477], "so": [6, 12, 13, 30, 37, 41, 46, 48, 122, 193, 199, 201, 204, 210, 211, 213, 217, 222, 223, 227, 230, 232, 236, 237, 239, 248, 252, 305, 311, 313, 332, 367, 372, 385, 386, 387, 390, 405, 406, 407, 418, 451, 457, 469, 470, 484], "middlewar": 6, "flashwar": 6, "hide": [6, 207], "automat": [6, 9, 12, 14, 34, 45, 47, 200, 210, 211, 214, 219, 222, 226, 236, 237, 240, 241, 242, 244, 249, 317, 319, 457, 470, 472, 473, 490], "adapt": [6, 22, 45, 200, 211, 242, 244, 245, 472, 473], "70": [6, 15, 488], "40": [6, 15, 245, 307, 308, 310, 384, 450], "commonli": [6, 216, 221, 226, 230, 236], "now": [6, 7, 20, 23, 27, 46, 49, 122, 193, 197, 200, 210, 212, 215, 216, 218, 222, 223, 229, 248, 315, 388, 470, 472, 485], "succinct": [6, 219], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 43, 51, 122, 193, 204, 207, 209, 211, 223, 224, 225, 227, 230, 237, 240, 241, 242, 243, 244, 247, 252, 307, 308, 309, 311, 312, 313, 314, 457, 464, 474], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 196, 197, 215, 221, 223, 234, 236, 240, 241, 315, 319, 469, 471, 477, 481], "demonstr": [6, 16, 45, 46, 210, 211, 218, 226, 231, 233, 237, 238, 240, 242, 244, 249, 305, 317, 319, 464, 469], "up": [6, 13, 20, 23, 37, 51, 197, 215, 221, 223, 226, 228, 230, 243, 250, 315, 318, 356, 360, 384, 451, 469, 470, 487], "92": [6, 322], "bulk": [6, 15, 46, 47, 86, 87, 122, 157, 193], "bsp": [6, 15], "paradigm": [6, 15, 226, 230, 237, 305, 311], "primari": [6, 15, 46, 47, 48, 70, 71, 141, 142, 200, 202, 219, 237, 244, 470], "constitut": [6, 233, 236], "superstep": [6, 16, 17, 24, 250], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 47, 48, 51, 200, 210, 223, 236, 239, 240, 241, 245, 256, 306, 308, 311, 319, 363, 366, 376, 379, 380, 381, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 411, 412, 413, 417, 447, 449, 452, 454, 459, 469], "maintain": [6, 10, 14, 35, 36, 47, 218, 219, 221, 237, 240, 241, 470], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 48, 211, 212, 227, 248, 250, 307, 308, 311, 317, 319, 320, 322, 352, 457, 464, 470, 477], "describ": [6, 27, 36, 37, 38, 48, 49, 51, 204, 210, 212, 223, 227, 228, 237, 241, 242, 249, 306, 309, 311, 316, 317, 356, 360, 376, 377, 378, 381, 386, 388, 389, 414, 415, 428, 435, 437, 451, 453, 454, 465, 468, 469, 470, 478, 483], "vsize": [6, 15], "size_t": [6, 13, 203, 247, 250, 316, 466, 469], "vertexmap": [6, 13, 15, 97, 122, 168, 193, 203], "condit": [6, 9, 14, 24, 27, 38, 45, 211, 218, 223, 230, 239, 241, 245, 376, 405, 406, 407, 415, 416, 469], "f": [6, 20, 33, 46, 49, 197, 201, 210, 212, 229, 234, 235, 238, 311, 322, 409, 410, 456, 470, 478, 484], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 96, 167, 197, 207, 210, 212, 215, 218, 219, 221, 223, 227, 229, 230, 233, 237, 238, 242, 245, 247, 276, 284, 292, 305, 311, 313, 317, 319, 320, 404, 406, 408, 449, 461, 463, 470, 480, 481, 484, 489], "form": [6, 20, 211, 217, 219, 221, 223, 227, 230, 241, 242, 248, 305, 307, 308, 311, 358, 378, 408, 423, 425, 428, 431, 435, 457, 463], "special": [6, 20, 200, 202, 218, 223, 237, 306, 425, 441, 451, 474], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 51, 210, 211, 212, 213, 223, 229, 238, 248, 249, 322, 332, 363, 367, 369, 380, 386, 388, 390, 392, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 436, 445, 449, 450, 454, 457, 470, 480], "omit": [6, 236, 249, 330, 471, 490], "filter": [6, 15, 23, 45, 211, 218, 224, 236, 241, 248, 249, 449, 463, 469, 488], "semant": [6, 211, 230, 310, 469], "unchang": 6, "edgemap": [6, 15, 97, 122, 168, 193], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 48, 51, 71, 73, 122, 142, 144, 193, 194, 200, 202, 203, 204, 210, 212, 213, 215, 216, 223, 227, 228, 230, 236, 238, 240, 241, 242, 244, 247, 248, 249, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 302, 304, 307, 308, 309, 310, 311, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 463, 464, 466, 468, 469, 470, 472, 477, 480, 481, 482, 488, 490], "satisfi": [6, 9, 24, 32, 200, 213, 223, 241, 244, 248, 252, 316, 322, 374, 404, 408, 415, 416, 474], "h": [6, 9, 15, 16, 20, 36, 41, 227, 228, 245, 256, 322, 333, 336, 357, 384, 388, 404, 449, 456, 457, 469, 481, 486], "conduct": [6, 15, 223, 245, 311], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 43, 45, 46, 48, 122, 193, 197, 199, 200, 207, 210, 211, 215, 216, 218, 219, 221, 223, 224, 225, 226, 230, 236, 237, 238, 240, 241, 242, 243, 244, 306, 311, 381, 386, 388, 391, 396, 399, 404, 449, 457, 466, 469, 474, 477], "dynam": [6, 12, 34, 197, 198, 200, 211, 226, 237, 239, 240, 242, 248, 259, 272, 377, 378, 460, 466, 470], "even": [6, 8, 20, 211, 215, 223, 239, 240, 313, 319, 322, 386, 396, 414, 416, 417, 457, 469], "virtual": [6, 9, 23, 48, 193, 213, 215, 238, 247, 315, 316], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 48, 51, 122, 194, 197, 201, 207, 209, 211, 217, 219, 221, 223, 227, 230, 236, 237, 238, 239, 240, 242, 248, 257, 305, 306, 307, 311, 317, 319, 321, 322, 457, 458, 462, 464, 466, 468, 469, 470, 471, 472, 478], "index": [6, 12, 13, 31, 46, 47, 72, 86, 122, 143, 157, 193, 203, 209, 227, 230, 236, 242, 247, 248, 249, 307, 308, 316, 319, 321, 322, 331, 355, 356, 386, 388, 389, 390, 392, 469, 486, 490], "pre": [6, 29, 32, 204, 211, 218, 223, 229, 233, 238, 241, 464, 483], "conveni": [6, 29, 193, 204, 210, 215, 223, 227, 239, 311, 455, 457], "revers": [6, 20, 216, 223, 265, 268, 321, 322, 400, 408, 457], "exchang": [6, 14], "chosen": [6, 386, 393, 394, 395, 396, 397, 408, 412, 452], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 237, 355, 356, 392, 469, 474, 480], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 204, 210, 240, 312, 315, 464, 470, 482], "mode": [6, 15, 27, 32, 36, 49, 199, 204, 222, 231, 234, 236, 247, 248, 249, 298, 305, 309, 315, 317, 319, 459, 464, 470, 474, 478, 490], "push": [6, 12, 34, 37, 45, 211, 218, 240, 315], "anoth": [6, 9, 10, 20, 36, 48, 199, 211, 221, 223, 236, 237, 238, 242, 250, 386, 419, 457, 469, 472, 473], "final": [6, 9, 13, 14, 17, 19, 24, 86, 122, 193, 197, 211, 215, 223, 227, 232, 237, 241, 247, 305, 311, 313, 399, 419, 457, 471], "reduc": [6, 9, 13, 14, 15, 17, 200, 211, 215, 218, 222, 230, 306, 309, 405, 406, 407, 457, 470], "commut": 6, "alwai": [6, 223, 232, 249, 353, 354, 393, 395, 414, 417, 451, 469, 477], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 87, 102, 157, 158, 173, 199, 200, 218, 221, 230, 236, 239, 241, 244, 308, 311, 316, 322, 341, 342, 384, 386, 388, 403, 414, 457, 459, 464, 469], "sometim": [6, 27, 223, 236, 367, 427], "similarli": [6, 19, 20, 48, 199, 212, 223, 240, 322, 360, 386, 388, 404, 407, 414, 457, 478], "suppli": [6, 204, 219, 406], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 49, 51, 210, 218, 223, 248, 309, 311, 314, 317, 322, 332, 377, 378, 386, 388, 389, 391, 392, 393, 395, 400, 404, 405, 406, 407, 408, 411, 448, 457, 459, 464], "auxiliari": [6, 15, 16, 223], "union": [6, 319, 385, 485], "minu": [6, 221, 360], "intersect": [6, 241, 458], "add": [6, 15, 19, 20, 23, 29, 33, 37, 122, 193, 197, 204, 216, 218, 221, 223, 236, 238, 247, 250, 257, 258, 267, 306, 317, 319, 324, 325, 326, 376, 383, 396, 414, 417, 419, 435, 457, 460, 464, 469, 470, 481, 484, 485, 490], "getv": [6, 211], "besid": [6, 10, 38, 316, 317], "combin": [6, 14, 18, 34, 48, 209, 211, 223, 226, 237, 238, 241, 305, 306, 307, 311, 457, 464, 473, 480], "primit": [6, 239], "natur": [6, 12, 13, 24, 48, 207, 219, 223], "multi": [6, 31, 209, 219, 223, 226, 227, 230, 237, 239, 241, 242, 243, 244, 248, 309, 311, 313, 466, 470], "tradit": [6, 211, 215, 217, 218, 219, 242, 434], "awkward": 6, "supplement": 6, "perspect": [6, 24, 239], "whole": [6, 9, 12, 24, 34, 200, 210, 211, 223, 227, 237, 239, 241, 242, 313, 468, 470, 473], "pick": [6, 223, 245, 399, 414, 417], "transfer": [6, 207, 209, 226, 241, 243, 488], "intuit": [6, 200, 211, 219, 226, 241, 464], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 200, 209, 211, 216, 223, 226, 227, 230, 236, 237, 240, 242, 243, 245, 249, 305, 311, 313, 315, 316, 322, 363, 457, 463, 464, 469, 470], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 47, 51, 211, 213, 223, 229, 230, 240, 242, 245, 306, 307, 308, 311, 317], "input": [6, 9, 12, 13, 15, 17, 22, 24, 46, 47, 69, 86, 118, 122, 140, 157, 189, 193, 196, 207, 227, 229, 230, 233, 236, 237, 238, 241, 242, 248, 267, 271, 292, 305, 306, 307, 308, 309, 311, 314, 317, 320, 322, 390, 404, 406, 408, 414, 415, 449, 457, 460, 461, 464, 469, 470, 484, 489], "second": [6, 13, 27, 47, 200, 207, 216, 223, 227, 236, 241, 244, 245, 249, 313, 402, 403, 411, 412, 413, 414, 418, 456, 457, 464, 470, 471], "fundament": [6, 9, 48, 211, 239], "modul": [6, 8, 9, 15, 19, 20, 23, 209, 211, 215, 221, 226, 234, 237, 238, 239, 241, 242, 318, 456, 486], "produc": [6, 38, 41, 46, 211, 245, 248, 257, 305, 317, 319, 320, 322, 376, 390, 392, 400, 461, 470], "abil": [6, 12, 34, 215, 219, 223, 230, 237, 470], "activ": [6, 9, 23, 24, 30, 201, 213, 232, 238, 242, 317, 464], "dens": [6, 227, 240, 242, 308, 317], "spars": [6, 13, 227, 242, 305, 308, 384, 457, 460], "dispatch": [6, 34, 237, 247], "kernel": [6, 393], "auto": [6, 14, 16, 34, 203, 223, 250, 466, 469, 471], "switch": [6, 12, 23, 34, 46, 51, 122, 193, 197, 222, 240, 414, 417, 469, 477], "prove": [6, 24, 449], "world": [6, 9, 13, 207, 221, 223, 237, 238, 240, 247, 322, 377, 378, 404], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 48, 122, 215, 218, 221, 223, 236, 239, 307, 308, 309, 315, 316, 319, 383, 390, 395, 403, 404, 408, 414, 457, 463, 466, 469], "co": [6, 23, 207, 238, 306, 484], "lead": [6, 17, 24, 204, 223, 242, 386, 388], "master": [6, 19, 22, 23, 24, 31, 51, 200, 234, 480], "broadcast": [6, 247, 469], "mirror": [6, 7, 10, 24, 27, 32, 213, 228, 229], "On": [6, 27, 30, 37, 200, 211, 219, 221, 248, 391, 454, 469], "contrari": 6, "total": [6, 8, 12, 34, 207, 211, 212, 213, 222, 223, 234, 250, 332, 376, 399, 416, 422, 457, 470, 471, 484], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 202, 204, 211, 212, 214, 217, 218, 219, 221, 222, 223, 234, 235, 238, 245, 256, 305, 307, 308, 310, 311, 312, 322, 328, 333, 335, 336, 341, 342, 360, 362, 363, 372, 380, 383, 385, 392, 401, 403, 408, 417, 424, 427, 428, 434, 435, 441, 443, 450, 451, 452, 457, 459, 460, 464, 469, 470, 471, 472, 473, 480, 483, 484, 488], "redund": [6, 218], "programm": [6, 17, 237, 252], "scope": [6, 23, 37, 239, 319], "disabl": [6, 31, 45, 51, 212, 215, 245, 464], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 122, 193, 200, 202, 207, 211, 212, 217, 218, 219, 223, 224, 225, 226, 227, 228, 237, 240, 241, 242, 244, 252, 309, 311, 312, 313, 315, 376, 469, 477], "katz": [6, 248, 322], "eigenvector": [6, 248, 322, 449], "harmon": 6, "coeffici": [6, 19, 248, 322], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 45, 48, 122, 204, 213, 215, 219, 221, 222, 229, 237, 239, 244, 245, 248, 312, 319, 377, 378, 393, 395, 408, 414, 435, 457, 466, 468, 469, 470, 477, 480, 483], "color": [6, 19, 20, 223, 457], "biconnect": 6, "bridg": [6, 209, 239], "seven": [6, 317, 356], "strongli": [6, 36, 213, 215, 223, 311, 396], "cut": [6, 12, 24, 442], "k": [6, 20, 37, 203, 212, 223, 227, 237, 238, 239, 241, 248, 249, 309, 322, 359, 367, 377, 378, 379, 380, 382, 384, 385, 386, 393, 396, 405, 406, 407, 409, 412, 413, 414, 415, 416, 417, 422, 457, 463, 469, 484, 488], "decomposit": [6, 238, 322], "degeneraci": 6, "onion": 6, "minim": [6, 11, 240, 317, 408, 409, 430, 456], "domin": [6, 322, 469], "cycl": [6, 239, 241, 244, 247, 324, 360, 361, 364, 375, 397, 401, 422, 424, 440, 444], "triangl": [6, 33, 223, 238, 241, 248, 322, 419, 423, 427, 431, 443, 458, 480, 484], "acycl": [6, 239, 451], "cyclic": [6, 237, 239, 241, 364], "diamond": [6, 427], "rectangl": 6, "tail": [6, 210, 215, 221, 223, 239, 478], "approxim": [6, 376, 449], "densest": 6, "articlerank": 6, "hyperlink": [6, 248, 322], "induc": [6, 219, 221, 248, 270, 333, 336, 352, 400, 457], "topic": [6, 7, 213, 229, 238, 248, 470], "person": [6, 7, 30, 33, 46, 47, 48, 86, 93, 122, 157, 165, 193, 196, 201, 210, 213, 215, 218, 219, 221, 223, 236, 238, 319, 437, 446, 457, 460, 463, 468, 469, 470, 471, 485, 490], "standard": [6, 35, 43, 197, 199, 209, 211, 218, 223, 224, 236, 239, 320, 390, 405, 406, 407, 469], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 223, 372, 375, 400], "four": [6, 9, 12, 20, 233, 238, 239, 247, 305, 308, 317, 404, 408, 469], "random": [6, 28, 31, 230, 232, 237, 245, 309, 310, 311, 314, 317, 358, 369, 376, 379, 380, 381, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 417, 449, 452, 454, 456, 464], "give": [7, 12, 13, 31, 34, 47, 93, 213, 223, 229, 236, 245, 311, 319, 384, 404, 424, 456, 457], "quick": [7, 213, 229, 470, 487], "ll": [7, 13, 20, 29, 46, 47, 229], "pip": [7, 27, 30, 31, 32, 50, 199, 204, 210, 213, 229, 238, 315, 470, 483, 487], "upgrad": [7, 23, 32, 213, 229, 487], "occur": [7, 9, 14, 32, 204, 221, 229, 470], "veri": [7, 13, 32, 46, 207, 211, 213, 223, 226, 229, 236, 238, 242, 307, 309, 480], "speed": [7, 32, 200, 202, 223, 228, 229, 239, 318, 384, 457], "try": [7, 17, 23, 32, 36, 41, 96, 122, 197, 202, 204, 207, 213, 222, 228, 229, 232, 233, 238, 246, 248, 335, 376, 460, 464, 484], "site": [7, 32, 213, 229], "aliyun": [7, 27, 32, 213, 228, 229, 245, 464, 481], "pypi": [7, 27, 32, 204, 213, 214, 229, 483], "trust": [7, 27, 32, 213, 229], "host": [7, 15, 17, 22, 23, 27, 28, 32, 47, 199, 207, 212, 213, 215, 222, 229, 236, 245, 247, 248, 249, 460, 464, 468, 480, 488, 490], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 51, 122, 193, 199, 204, 210, 213, 229, 238, 315, 404, 406, 457, 460, 470, 482], "everyth": [7, 229, 238, 469], "job": [7, 13, 23, 86, 87, 122, 157, 158, 193, 207, 211, 229, 237, 238, 239, 243, 247, 282, 306, 464, 470], "modern_graph": [7, 30, 33, 46, 47, 49, 51, 86, 122, 193, 210, 213, 238, 471, 477], "gremlin": [7, 29, 33, 45, 51, 122, 204, 207, 210, 211, 212, 213, 218, 220, 224, 227, 230, 237, 238, 239, 243, 244, 246, 276, 311, 320, 464, 470, 478, 483, 484, 486, 491], "apach": [7, 17, 22, 23, 31, 209, 218, 219, 222, 225, 226, 237, 238, 241, 468, 470, 474, 480, 482, 486], "tinkerpop": [7, 197, 207, 209, 210, 212, 213, 222, 226, 238, 239, 320, 470, 486], "org": [7, 17, 23, 122, 204, 214, 222, 229, 232, 233, 234, 238, 240, 248, 322, 380, 381, 382, 396, 399, 406, 419, 423, 424, 425, 426, 428, 429, 430, 436, 437, 438, 439, 441, 442, 443, 444, 449, 470, 480, 483, 484, 488], "doc": [7, 16, 17, 30, 37, 194, 238, 239, 247, 251, 253, 319, 406, 487], "tutori": [7, 8, 12, 14, 24, 210, 212, 213, 220, 226, 231, 236, 238, 240, 242, 317, 406, 474], "trigger": [7, 14, 15, 18, 37, 230, 238, 258, 472, 477], "ret": [7, 18, 222, 238, 480, 485], "selector": [7, 15, 33, 38, 238, 247, 249, 257, 263, 264, 274, 275, 279, 287, 288, 319, 462, 464, 468, 480, 485], "homogen": [7, 227, 236, 238, 242, 307], "pg": [7, 238, 248, 464, 468, 469], "none": [7, 9, 20, 27, 31, 86, 216, 232, 234, 235, 236, 238, 248, 249, 256, 263, 264, 267, 270, 274, 275, 276, 277, 279, 282, 284, 287, 288, 292, 298, 300, 304, 305, 306, 311, 319, 320, 321, 322, 330, 334, 336, 337, 341, 342, 351, 352, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 449, 451, 452, 454, 457, 459, 460, 461, 464, 468, 469, 470, 485, 489, 490], "know": [7, 8, 30, 33, 38, 46, 47, 48, 86, 122, 157, 165, 193, 210, 218, 220, 221, 223, 231, 236, 238, 241, 306, 307, 315, 319, 468, 470, 471, 485, 488, 490], "src": [7, 13, 15, 16, 17, 18, 30, 34, 203, 207, 219, 222, 229, 230, 233, 236, 238, 248, 249, 256, 305, 307, 319, 463, 466, 469, 470, 472, 480, 484, 489, 490], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 45, 46, 47, 48, 51, 197, 207, 211, 216, 218, 219, 228, 238, 240, 241, 242, 244, 245, 246, 312, 313, 322, 470, 472, 480], "learn": [7, 27, 32, 36, 37, 38, 41, 207, 211, 213, 226, 230, 231, 232, 234, 239, 240, 243, 246, 300, 306, 309, 310, 311, 312, 315, 317, 462, 464, 484, 486], "technic": [7, 229, 313, 451, 457], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 202, 204, 207, 212, 223, 237, 243, 307, 317, 464, 470], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 200, 207, 210, 212, 217, 222, 223, 224, 226, 227, 237, 238, 239, 240, 242, 243, 244, 307, 309, 311, 313, 318, 386, 397, 404, 456, 469], "usag": [7, 17, 31, 32, 36, 37, 50, 199, 221, 223, 224, 228, 229, 230, 249, 308, 309, 310, 314, 319, 376, 457, 464, 470, 471], "section": [8, 13, 27, 29, 45, 47, 48, 220, 223, 227, 231, 237, 311, 312, 319, 356, 469, 470], "assum": [8, 23, 27, 30, 193, 210, 220, 223, 231, 238, 306, 319, 355, 416, 455, 457, 464, 468, 469, 484], "getting_start": [8, 45, 199, 220, 231], "most": [8, 9, 13, 15, 22, 33, 38, 48, 51, 200, 204, 211, 215, 216, 218, 221, 223, 227, 236, 238, 240, 242, 244, 245, 249, 305, 307, 311, 313, 315, 319, 377, 378, 402, 405, 406, 407, 468, 470], "suffici": [8, 17, 204, 237, 306], "louvain": [8, 240, 248, 480], "social": [8, 48, 207, 212, 223, 237, 240, 242, 245, 384, 434, 449, 458], "scientist": [8, 226, 244], "familiar": [8, 14, 16, 29, 211], "manipul": [8, 11, 19, 20, 200, 223, 226, 241, 244, 246, 247, 457], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 193, 197, 200, 201, 236, 247, 309, 310, 314, 464, 480], "pydata": [8, 243], "eco": 8, "still": [8, 24, 27, 34, 38, 173, 207, 223, 240, 335, 464, 469, 470], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 96, 167, 200, 207, 215, 218, 219, 221, 223, 225, 227, 230, 236, 242, 247, 306, 309, 311, 312, 313, 314, 449, 457, 460, 464, 470, 474], "migrat": [8, 211, 229, 232, 233, 238, 239, 244, 466, 484], "transpar": [8, 237], "don": [8, 17, 23, 30, 33, 36, 37, 204, 210, 223, 258, 351, 457, 470], "autom": [9, 29, 239], "abl": [9, 24, 27, 122, 193, 197, 210, 239, 310, 414, 469, 470], "batch": [9, 12, 19, 47, 212, 222, 227, 230, 234, 235, 239, 242, 305, 308, 310, 311, 313, 315, 317, 321, 470, 489], "counterpart": [9, 218, 226, 239], "redesign": [9, 239], "underli": [9, 43, 207, 211, 223, 239, 313, 469], "equip": [9, 225, 226, 239, 245, 474], "polici": [9, 199, 204, 239, 247, 464], "memori": [9, 12, 23, 24, 27, 34, 47, 48, 200, 204, 207, 209, 219, 222, 226, 228, 231, 232, 234, 237, 239, 240, 242, 243, 244, 245, 305, 306, 307, 313, 317, 319, 457, 464, 470, 473, 482, 483], "todai": 9, "static": [9, 16, 31, 86, 87, 93, 96, 102, 122, 157, 222, 247, 470, 472], "recomput": 9, "costli": 9, "consum": [9, 204, 242, 313, 316], "especi": [9, 236], "trillion": 9, "commerc": [9, 237, 240], "constantli": 9, "issu": [9, 17, 32, 37, 51, 204, 207, 210, 213, 222, 239, 240, 244, 380, 381, 382, 446, 483], "involv": [9, 13, 37, 41, 45, 200, 207, 211, 223, 227, 230, 237, 240, 241, 242, 243, 244], "adjust": [9, 12, 45, 204], "old": [9, 12, 14, 32, 34, 215, 464], "typic": [9, 24, 45, 200, 207, 219, 221, 223, 237, 240, 241, 244, 306, 311, 386, 457, 463, 469], "often": [9, 37, 48, 200, 207, 210, 222, 237, 240, 241, 242, 244, 307, 308, 311, 457, 470, 478], "overlap": [9, 464], "intervent": 9, "burden": [9, 15, 307], "expert": 9, "light": 9, "overal": [9, 242], "verifi": [9, 27, 38, 207, 210, 212, 216, 245, 311], "characterist": [9, 219, 230, 237, 242, 305, 310], "deduc": [9, 319, 490], "appropri": [9, 27, 41, 47, 48, 211, 227, 237, 242, 305], "record": [9, 13, 51, 122, 193, 197, 200, 201, 210, 213, 214, 215, 223, 238, 316, 466, 470], "part": [9, 13, 37, 51, 207, 211, 221, 227, 230, 239, 311, 312, 315, 317, 440, 457, 468, 469, 470], "intermedi": [9, 12, 17, 211, 218, 223, 226, 237, 239], "deliv": [9, 488], "There": [9, 10, 12, 34, 37, 38, 46, 204, 210, 211, 218, 223, 238, 240, 241, 242, 248, 307, 310, 311, 313, 457, 463, 464, 469, 470], "reshap": [9, 317], "eas": [9, 12, 34, 213, 242, 244, 245], "achiev": [9, 12, 20, 24, 27, 34, 200, 223, 237, 240, 245, 466], "decid": [9, 307, 404], "due": [9, 51, 204, 237, 244, 311], "among": [9, 48, 211, 223, 237, 244, 247, 316, 322, 451, 470], "fetch": [9, 15, 17, 464, 470, 480], "suffic": 9, "replai": [9, 230, 239, 466, 470], "affect": [9, 13, 30, 36, 37, 218, 457], "area": [9, 15, 200, 215, 408, 454], "readili": 9, "obtain": [9, 14, 17, 29, 30, 46, 211, 212, 214, 218, 222, 226, 227, 230, 233, 238, 242, 306, 310, 311, 313, 432, 435, 451, 457, 464, 470], "simpli": [9, 17, 20, 45, 122, 201, 210, 215, 223, 236, 238, 311, 379, 383, 457], "coincid": 9, "idea": [9, 37, 227, 242, 252, 313], "invalid": [9, 218, 319, 464], "miss": [9, 37, 309, 319, 367, 464], "comparison": [9, 19, 216, 221, 223, 226, 244, 245], "those": [9, 29, 48, 200, 210, 212, 215, 216, 219, 223, 236, 246, 309, 319, 322, 333, 362, 364, 366, 457, 459, 463], "although": [9, 12, 14, 22, 34, 96, 122, 167, 193, 207, 238, 252, 356, 469, 470], "solut": [9, 31, 49, 200, 204, 241, 242, 244, 322, 483], "enough": [9, 230, 306, 309, 376, 464, 468], "caus": [9, 14, 22, 32, 37, 204, 222, 229, 242, 307, 313, 319, 356], "overwhelm": 9, "overhead": [9, 13, 244, 306, 307], "mf": 9, "delta": [9, 12, 13, 33, 37, 248, 319], "php": 9, "mp": 9, "cc": [9, 469, 485], "sswp": 9, "mv": [9, 215], "track": 9, "gcn": [9, 226, 230, 242, 246, 305, 309, 313, 317, 484, 486, 489, 491], "commnet": 9, "me": 9, "keep": [9, 223, 230, 250, 311, 319, 414, 417, 470], "graphsag": [9, 226, 230, 234, 238, 242, 246, 305, 309, 311, 313, 317, 486, 489, 491], "gin": [9, 242], "vldb": [9, 480, 486], "paper": [9, 14, 24, 227, 229, 232, 233, 234, 235, 237, 238, 239, 245, 317, 322, 454, 464, 480, 484], "publish": [9, 14, 24, 29, 218, 237, 238], "2021": [9, 239], "denot": [9, 48, 196, 198, 200, 221, 223, 310, 385, 470], "w": [9, 51, 222, 248, 322, 384, 390, 404, 407, 409, 414, 417, 419, 447, 457, 459, 470, 488], "respect": [9, 16, 38, 209, 211, 216, 221, 236, 237, 238, 241, 242, 248, 267, 284, 292, 308, 311, 322, 363, 376, 423, 457, 463, 469, 470], "initi": [9, 16, 18, 19, 45, 47, 51, 197, 212, 223, 234, 235, 240, 242, 247, 306, 307, 317, 319, 321, 322, 396, 398, 399, 457, 460, 468, 470, 474, 480], "init_v": 9, "init_m": 9, "aggreg": [9, 211, 216, 224, 242, 250, 305, 311, 313, 317, 469, 488], "vector": [9, 203, 227, 233, 238, 242, 247, 250, 305, 313, 315, 322, 404, 408], "element": [9, 13, 48, 122, 193, 216, 221, 223, 240, 247, 306, 309, 311, 319, 322, 352, 384, 429, 451, 463, 464, 469], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 45, 46, 47, 48, 51, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 200, 210, 216, 219, 221, 226, 230, 234, 238, 240, 248, 250, 256, 263, 264, 274, 275, 279, 283, 287, 288, 304, 305, 306, 308, 311, 314, 319, 321, 322, 333, 341, 342, 363, 376, 386, 388, 389, 392, 393, 400, 404, 405, 406, 407, 408, 414, 417, 419, 422, 435, 454, 457, 459, 463, 464, 468, 470, 471, 477], "addition": [9, 12, 14, 36, 48, 215, 227, 233, 237, 239, 241, 244, 313, 322, 469, 478], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 51, 211, 215, 219, 221, 223, 226, 230, 236, 241, 244, 248, 282, 305, 306, 307, 308, 310, 311, 315, 319, 322, 355, 356, 386, 388, 389, 390, 391, 392, 404, 450, 451, 453, 457, 459, 460, 466, 470, 478], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 86, 87, 93, 96, 102, 122, 203, 247, 466, 469, 470, 471, 480], "m1": [9, 204, 213, 358, 483, 487], "m2": [9, 358], "below": [9, 10, 12, 20, 34, 35, 36, 37, 45, 47, 51, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 221, 230, 237, 238, 240, 241, 242, 245, 306, 309, 311, 314, 317, 356, 386, 388, 422, 457, 464, 470], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 86, 87, 93, 96, 102, 122, 199, 238, 245, 247, 315, 470, 480, 484], "dbl_max": 9, "backend": [9, 27, 29, 226, 229, 234, 237, 238, 242, 319, 457, 464, 471, 484], "seamless": [9, 196, 207, 243, 470], "block": [9, 199, 204, 211, 308, 384, 470], "spawn": 9, "adopt": [9, 45, 200, 244, 309, 470], "csc": [9, 468], "csr": [9, 13, 47, 203, 319, 468, 471], "sent": [9, 10, 14, 16, 24, 222], "mainten": [9, 469], "preserv": [9, 13, 218, 249, 319, 419, 449], "effect": [9, 36, 37, 45, 200, 207, 218, 221, 222, 230, 237, 242, 309, 388, 457, 470], "readi": [9, 30, 32, 37, 199, 200, 204, 207, 212, 222, 237, 307, 309, 464, 470, 478], "accept": [9, 45, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 322, 404, 408, 470, 471], "insert": [9, 14, 48, 211, 277, 470], "newli": [9, 41, 45, 122, 193], "particular": [9, 37, 216, 221, 248, 308, 311, 386], "incid": [9, 20, 219, 221, 223, 333, 334, 376, 398, 447, 457], "encod": [9, 13, 216, 219, 248, 306, 311, 317, 319, 321, 459, 470, 489], "dummi": 9, "furthermor": [9, 222, 223, 226, 237, 244], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 230, 239, 240, 311], "cancel": [9, 87, 89, 158], "compens": 9, "whose": [9, 24, 215, 223, 309, 311, 322, 327, 347, 429, 433, 449, 451, 452, 468, 469], "proce": [9, 51, 197, 376, 470], "inner": [10, 13, 16, 203, 223, 224, 250, 319, 469], "outer": [10, 14, 203, 216, 250, 372, 469], "cross": [10, 219, 252, 432], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 45, 48, 49, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 200, 202, 204, 210, 219, 221, 223, 232, 237, 238, 240, 241, 245, 247, 248, 249, 256, 258, 260, 276, 283, 300, 308, 319, 357, 359, 360, 362, 364, 366, 367, 369, 371, 372, 375, 386, 388, 389, 391, 393, 394, 395, 397, 401, 402, 403, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 452, 459, 464, 469, 478], "5": [10, 13, 19, 20, 31, 204, 212, 217, 221, 223, 229, 230, 232, 233, 234, 235, 238, 241, 245, 305, 308, 310, 311, 312, 314, 317, 322, 328, 333, 335, 341, 360, 363, 376, 380, 381, 382, 384, 385, 393, 395, 402, 403, 404, 405, 407, 408, 422, 423, 425, 426, 427, 428, 430, 431, 434, 436, 438, 440, 441, 447, 452, 457, 463, 464, 470, 472, 478, 483, 484, 488], "9": [10, 31, 210, 213, 221, 223, 238, 306, 322, 360, 362, 408, 426, 434, 447, 452, 487], "12": [10, 20, 32, 204, 213, 223, 245, 248, 306, 307, 308, 310, 312, 324, 325, 326, 362, 424, 425, 429, 433, 437, 443, 481, 483, 487, 488], "split": [10, 47, 218, 221, 223, 232, 233, 234, 235, 306, 307, 464, 470], "roughli": 10, "across": [10, 14, 34, 35, 36, 49, 199, 200, 218, 219, 234, 237, 239, 240, 244, 469, 471], "divid": [10, 122, 193, 216, 221, 223, 227, 237, 248, 306, 309, 313, 314, 322, 468], "place": [10, 18, 19, 36, 47, 210, 223, 315, 316, 319, 384, 404, 405, 406, 407, 408, 437, 455], "itself": [10, 20, 22, 37, 221, 223, 227, 236, 237, 250, 305, 307, 463, 464, 469], "replic": [10, 212, 398], "resid": [10, 14, 38], "j": [10, 31, 51, 203, 248, 317, 322, 355, 356, 377, 378, 386, 388, 389, 391, 397, 408, 411, 412, 413, 435, 469], "outcom": 10, "outgo": [10, 13, 16, 24, 48, 218, 221, 223, 241, 250, 311, 322, 457, 469], "incom": [10, 13, 14, 16, 34, 48, 221, 223, 247, 250, 322], "consid": [10, 15, 18, 27, 37, 193, 218, 223, 230, 240, 248, 249, 306, 307, 322, 386, 449, 466, 469], "vice": [10, 404], "versa": [10, 404], "compani": [10, 469], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 207, 221, 236, 244, 306, 307, 311, 314, 319, 469, 470], "regardless": [10, 216, 239, 306, 402, 469], "friendli": [11, 12, 37, 209, 226, 240, 242, 243, 244], "research": [11, 218, 230, 242, 447, 464], "particularli": [11, 242, 449], "field": [11, 27, 30, 33, 38, 46, 48, 51, 196, 197, 201, 210, 230, 232, 233, 236, 238, 309, 313, 317, 319, 403, 464, 470, 481, 484], "scienc": [11, 411, 434], "solv": [11, 24, 37, 204, 206, 223, 240], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 237], "minor": [12, 14, 34, 226, 237, 242, 245, 472], "cope": [12, 34], "life": [12, 32, 34, 210, 237], "extrem": [12, 27, 237, 313, 358, 369, 469], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 43, 45, 48, 211, 218, 219, 221, 223, 226, 227, 230, 239, 240, 242, 244, 245, 247, 248, 250, 308, 309, 311, 313, 359, 360, 361, 372, 375, 383, 429, 451, 464, 466, 468, 469, 470, 471], "format": [12, 13, 20, 22, 34, 35, 46, 47, 48, 96, 98, 167, 169, 193, 207, 209, 223, 227, 234, 236, 242, 243, 245, 248, 276, 283, 305, 308, 311, 313, 316, 317, 319, 320, 457, 459, 464, 466, 482], "unifi": [12, 34, 43, 207, 209, 211, 306, 466], "care": [12, 34, 223, 315, 316, 469], "foreign": [12, 469], "ecosystem": [12, 197, 209, 213, 225, 226, 241, 244, 474], "freedom": 12, "accord": [12, 19, 36, 45, 204, 210, 211, 215, 221, 223, 227, 236, 237, 241, 242, 247, 309, 311, 315, 376, 384, 396, 397, 466, 470], "demand": [12, 200, 211, 240, 469, 470, 474], "sdk": [12, 18, 43, 50, 51, 196, 199, 202, 204, 210, 214, 224, 225, 226, 240, 241, 244, 252, 462, 470, 474, 480], "domain": [12, 215, 237, 242, 404, 405, 406, 407, 408], "dedic": 12, "treat": [12, 14, 20, 34, 223, 319, 457, 459, 464, 477], "immut": [12, 34, 51, 209, 219, 239], "persist": [12, 15, 30, 34, 49, 204, 209, 210, 237, 239, 244, 468], "fortun": [12, 20, 46, 207], "grin": [12, 209], "awar": [12, 37, 45, 204, 210, 221, 239], "introduct": [12, 34, 218, 224, 240, 310, 311, 314, 322, 367, 449, 469], "foundat": [12, 202, 218, 237], "visit": [12, 29, 197, 215, 223, 241, 306], "meanwhil": [12, 207, 226, 242, 469], "compress": [12, 13, 238, 248, 306, 422], "pipelin": [12, 34, 226, 237, 240, 244, 473], "balanc": [12, 307, 357], "link": [12, 31, 37, 38, 48, 204, 206, 211, 219, 227, 242, 245, 248, 319, 322, 359, 380, 382, 383, 393, 394, 395, 454, 457, 464], "popular": [12, 22, 29, 198, 207, 236, 238, 241, 242, 305, 317, 470], "freeli": [12, 24], "background": [12, 206], "interoper": [12, 469], "panda": [12, 207, 215, 247, 249, 263, 274, 319, 457, 486], "mar": [12, 27, 207, 221, 239, 464], "fastffi": [12, 252], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 49, 122, 193, 196, 199, 200, 204, 210, 216, 217, 219, 221, 224, 225, 226, 237, 239, 241, 244, 247, 358, 369, 376, 452, 455, 457, 474, 480], "emploi": [12, 24, 34, 233, 239, 240], "captur": [12, 242], "20": [12, 13, 27, 29, 32, 34, 210, 213, 221, 223, 226, 245, 248, 249, 307, 308, 310, 319, 376, 404, 405, 426, 428, 457, 480, 481, 487, 488], "100": [12, 34, 215, 223, 229, 232, 233, 238, 248, 317, 322, 379, 386, 390, 397, 406, 457, 464, 470, 484, 488], "build": [12, 15, 31, 34, 35, 37, 47, 50, 122, 204, 211, 215, 222, 226, 227, 236, 239, 247, 248, 258, 260, 307, 311, 313, 315, 316, 319, 405, 406, 407, 449, 464, 466, 477, 482, 489], "been": [12, 17, 23, 24, 28, 29, 33, 37, 45, 51, 122, 193, 201, 204, 211, 212, 213, 215, 218, 221, 223, 225, 227, 237, 239, 240, 241, 242, 244, 248, 297, 309, 311, 319, 320, 322, 376, 399, 449, 461, 474], "go": [13, 228, 317, 384, 437, 470], "impact": [13, 241], "dive": 13, "arrowfrag": [13, 16, 247, 471], "vineyard": [13, 15, 16, 23, 28, 31, 33, 203, 204, 209, 210, 219, 226, 231, 232, 237, 243, 244, 247, 249, 279, 284, 287, 288, 319, 320, 464, 469, 470, 478, 480, 483, 484, 485, 488, 490], "basic": [13, 16, 20, 46, 47, 51, 218, 241, 305, 308, 313, 315, 316, 317, 376, 386, 391, 463], "member": [13, 16, 221, 223, 247, 447], "string": [13, 17, 23, 33, 46, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 201, 210, 215, 216, 218, 219, 221, 236, 247, 248, 250, 255, 292, 306, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 337, 341, 342, 351, 449, 451, 453, 457, 459, 466, 468, 469, 470, 471, 480, 488, 490], "consecut": 13, "hashmap": [13, 203, 319], "arrai": [13, 17, 203, 216, 227, 236, 242, 247, 248, 249, 308, 309, 311, 314, 317, 457, 460, 472, 480], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 214, 221, 236, 248, 319, 322, 457, 460, 480, 483, 485, 490], "vertex_label": [13, 247, 250], "perfect": [13, 319], "int64_t": [13, 203, 210, 236, 247, 248, 319, 472, 490], "std": [13, 14, 15, 203, 247, 466, 471], "string_view": 13, "uint64_t": [13, 16, 319, 466], "oid_arrays_": [13, 203], "topologi": [13, 227, 230, 239, 308, 313, 454, 466, 468, 469], "row": [13, 47, 210, 218, 227, 242, 306, 319, 450, 470], "matrix": [13, 236, 242, 248, 313, 322, 384, 402, 417, 420, 449, 457, 460], "src_type": [13, 308], "edge_typ": [13, 46, 48, 86, 122, 133, 152, 157, 165, 193, 229, 232, 233, 238, 305, 307, 308, 309, 310, 311, 314, 317, 321, 469, 484, 489], "pair": [13, 20, 213, 216, 219, 223, 247, 248, 250, 304, 317, 356, 361, 362, 368, 384, 402, 408, 457, 460, 463, 469, 471], "indptr": 13, "ie_lists_": [13, 203], "edge_label": [13, 139, 145, 215, 247, 250, 464], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 45, 51, 202, 218, 219, 223, 227, 236, 245, 305, 307, 319, 464, 466, 468, 469, 471], "uint32_t": [13, 247, 319], "num_edg": 13, "ie_offsets_lists_": [13, 203], "offset": [13, 203, 247, 308, 316, 360, 470], "slice": [13, 211, 249, 319, 463], "ie_list": 13, "ie_offset": 13, "num_vertic": 13, "oe_lists_": [13, 203], "oe_offsets_lists_": [13, 203], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 203], "vertex_tables_": [13, 203], "oid_t": [13, 15, 16, 203, 247], "vid_t": [13, 15, 16, 203, 247], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 193, 204], "practic": [13, 16, 28, 199, 211, 219, 227, 230, 237, 242, 306, 307, 309, 470], "load_factori": 13, "15": [13, 204, 223, 232, 233, 235, 245, 307, 308, 310, 311, 417, 439, 450, 457, 464], "extra": [13, 37, 204, 210, 212, 322, 418, 483], "column": [13, 18, 33, 46, 48, 58, 70, 71, 86, 122, 129, 141, 142, 157, 193, 202, 203, 207, 211, 219, 227, 236, 238, 242, 247, 249, 250, 257, 306, 316, 319, 450, 466, 470, 471, 480, 484, 490], "edge_id": 13, "uniqu": [13, 47, 48, 122, 193, 196, 211, 215, 216, 219, 221, 236, 237, 238, 239, 248, 296, 297, 306, 310, 315, 316, 319, 322, 424, 430, 463, 470, 471], "kept": [13, 221, 223, 247], "summari": [13, 244, 337], "argument": [13, 23, 30, 51, 95, 166, 167, 221, 223, 230, 234, 236, 322, 324, 325, 326, 355, 363, 393, 400, 404, 405, 406, 407, 408, 435, 457, 460, 463, 464, 470, 471, 480], "use_perfect_hash": [13, 247, 298, 319, 464], "load_from": [13, 22, 30, 319, 464, 468], "realli": 13, "margin": 13, "former": [13, 240], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 213, 215, 223, 241, 319, 464, 469, 470, 487], "localvertexmap": 13, "suitabl": [13, 48, 237, 244, 307, 311, 317, 376, 470, 473], "dozen": 13, "hundr": [13, 386, 397], "repeatedli": [13, 211, 240], "add_vertic": [13, 207, 215, 236, 319, 457, 460, 461, 484, 485, 490], "sure": [13, 23, 27, 30, 41, 46, 196, 197, 199, 201, 212, 215, 223, 311, 315, 317, 464, 470], "fairli": [13, 213], "8": [13, 20, 31, 32, 33, 35, 37, 122, 199, 204, 210, 213, 215, 221, 223, 226, 229, 245, 248, 306, 360, 383, 402, 425, 434, 436, 442, 446, 452, 454, 457, 459, 470, 472, 483, 488], "absolut": 13, "int32_t": [13, 236, 319, 490], "vid_typ": [13, 33, 247, 298, 319, 464], "compact_edg": [13, 247, 298, 319, 464], "compact": [13, 247, 319], "varint": [13, 319], "half": [13, 319], "generated_eid": 13, "save": [13, 18, 28, 29, 46, 210, 307, 319, 322, 470], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 43, 46, 48, 49, 50, 86, 87, 93, 96, 102, 122, 167, 193, 198, 200, 207, 210, 211, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 236, 237, 239, 240, 243, 244, 246, 276, 319, 398, 447, 462, 464, 477, 484, 488], "vertex_id": [13, 24, 207, 236, 490], "retain_oid": [13, 210, 236, 247, 298, 319, 464, 471, 490], "gain": [13, 37], "signific": [13, 239, 244], "arrowprojectedfrag": [13, 15, 16, 247, 256], "implicit": [13, 460], "arrowflattenfrag": 13, "thought": [13, 385], "view": [13, 20, 24, 197, 202, 236, 237, 268, 330, 334, 353, 354, 457, 460, 466, 478], "mainli": [13, 47, 51, 211, 216, 223, 244, 313], "purpos": [13, 43, 218, 223, 237, 469], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 249, 472, 473], "r2": [13, 249, 472, 473], "r3": [13, 249, 472], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 223, 240, 248, 306, 310, 311, 312, 322, 339, 376, 396, 406, 455, 457, 464, 469, 470], "express": [14, 15, 24, 211, 216, 217, 219, 230, 239, 241, 249, 306, 308, 311, 408, 457, 488], "modifi": [14, 20, 24, 28, 200, 210, 216, 222, 261, 262, 277, 278, 312, 335, 388, 455, 468, 469], "adher": [14, 35, 48, 218, 469], "think": [14, 24], "principl": [14, 315], "privileg": 14, "experienc": [14, 241], "inform": [14, 15, 16, 19, 27, 29, 38, 122, 193, 197, 199, 201, 204, 211, 212, 215, 216, 219, 233, 238, 240, 242, 243, 252, 266, 305, 306, 307, 308, 311, 313, 315, 319, 322, 337, 355, 396, 418, 419, 447, 457, 464, 466, 470, 477], "hop": [14, 211, 219, 221, 223, 226, 227, 230, 237, 241, 242, 305, 309, 311, 313, 314, 315, 317], "slow": [14, 213], "consequ": [14, 237, 240], "piec": [14, 198, 209, 316, 464], "destin": [14, 33, 46, 47, 48, 70, 73, 141, 144, 210, 215, 216, 223, 227, 236, 238, 247, 249, 265, 306, 307, 308, 310, 311, 317, 319, 321, 463, 468, 469, 470, 490], "abovement": 14, "peval": [14, 16, 17, 18, 34, 240, 247, 255, 474, 480], "incev": [14, 16, 17, 18, 34, 240, 247, 255, 474, 480], "assembl": [14, 34, 211, 239, 240, 247, 319], "unlik": [14, 17, 217, 227, 230, 237, 457], "modif": [14, 22, 226, 237, 242, 319, 460], "convent": [14, 37, 204, 218, 390, 416, 478], "taught": [14, 223], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 204, 215, 237, 470], "collect": [14, 34, 42, 122, 193, 216, 221, 222, 223, 241, 242, 243, 317, 457], "partial": [14, 16, 18, 34, 221, 247, 249, 306, 399, 474], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 47, 210, 230, 244, 306, 314, 322, 392, 457], "accur": [14, 215, 218], "long": [14, 17, 30, 33, 38, 215, 219, 221, 223, 239, 244, 248, 311, 469, 470, 480, 488], "const": [14, 15, 16, 203, 247, 250, 315, 316, 469, 470, 471], "fragment_t": [14, 15, 16, 247], "frag": [14, 17, 18, 203, 255, 466, 471, 480], "context_t": [14, 15, 16, 247], "ctx": [14, 17, 22, 247, 468, 480], "message_manager_t": [14, 16, 247], "vertex_t": [14, 16, 203, 247], "native_sourc": [14, 18, 480], "getinnervertex": [14, 247], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 203, 247, 466, 480], "get_neighbor": 14, "min": [14, 18, 24, 216, 250, 480, 488], "static_cast": [14, 16, 203, 466], "get_data": [14, 203], "isoutervertex": [14, 247], "put": [14, 16, 17, 22, 48, 49, 51, 93, 122, 165, 193, 315], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 86, 87, 93, 96, 102, 122, 193, 203, 223, 307, 317, 319, 415, 469, 470, 480], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 203, 247, 466, 480], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 223, 250, 469], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 480], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 203, 247], "dijkstra": [14, 18, 240, 322, 480], "checkout": [14, 37, 312], "seri": [15, 223, 242, 247, 311, 469], "strong": [15, 199, 211, 240], "typenam": [15, 16, 52, 56, 59, 66, 75, 79, 85, 118, 120, 203, 247], "frag_t": [15, 16, 247], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 45, 193, 210, 222, 223, 241, 308, 311, 315, 317, 463, 472], "shared_ptr": [15, 203, 247, 466, 471], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 41, 51, 201, 215, 223, 236, 464, 480, 490], "global": [15, 24, 46, 211, 219, 221, 223, 242, 298, 319, 449, 464, 471, 477, 488], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 41, 47, 210, 211, 223, 236, 242, 419, 463], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 47, 51, 98, 193, 203, 232, 236, 247, 248, 250, 255, 305, 307, 308, 312, 315, 317, 457, 460, 466, 474, 480, 489, 490], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 365], "len": [15, 221, 223, 232, 234, 307, 322, 331, 362, 379, 381, 384, 386, 387, 391, 457], "ed": [15, 23, 390, 404, 411, 434, 440], "ctruee": 15, "rather": [15, 18, 47, 200, 223, 236, 241, 243, 244, 322, 376, 418, 469], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 259, 460], "dynamic_properti": [15, 272, 460], "def": [15, 18, 23, 193, 214, 229, 232, 233, 234, 235, 236, 238, 255, 305, 307, 308, 309, 310, 311, 314, 317, 363, 470, 480, 484, 485, 489, 490], "arg": [15, 86, 87, 93, 96, 102, 122, 232, 234, 247, 248, 249, 250, 283, 301, 308, 309, 310, 311, 314, 317, 321, 464, 470], "appasset": [15, 18, 255, 256, 260, 462, 480], "algo": [15, 16, 17, 22, 23, 248, 256], "flash_bf": 15, "vertex_data": [15, 16, 187, 248, 256], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 49, 197, 201, 458, 460, 462], "gs_conf": [15, 16, 256], "yaml": [15, 16, 28, 29, 38, 45, 47, 48, 51, 193, 194, 196, 197, 201, 210, 222, 234, 248, 256, 464, 468, 470, 488], "cpp_flash": 15, "class_nam": [15, 16, 256], "compatible_graph": [15, 16, 256], "immutableedgecutfrag": 15, "log": [15, 17, 45, 89, 160, 204, 209, 232, 233, 237, 239, 469, 471, 483], "p2p": [15, 17, 22, 23], "network": [15, 27, 48, 199, 204, 207, 209, 212, 223, 227, 231, 233, 237, 238, 240, 243, 244, 245, 246, 248, 305, 306, 307, 309, 311, 313, 317, 322, 377, 378, 384, 386, 390, 393, 394, 395, 398, 410, 434, 445, 446, 448, 449, 454, 458, 472, 483], "load_p2p_network": [15, 16, 17, 18, 207, 248, 249, 480], "attribut": [15, 19, 48, 219, 230, 233, 238, 240, 242, 247, 248, 281, 292, 307, 308, 310, 313, 317, 318, 321, 322, 324, 325, 326, 341, 342, 351, 363, 376, 381, 400, 404, 405, 406, 407, 408, 411, 412, 413, 447, 449, 451, 454, 455, 457, 458, 460, 466], "convert": [15, 20, 23, 51, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 201, 218, 227, 248, 263, 264, 274, 275, 287, 288, 305, 306, 313, 317, 377, 378, 435, 452, 457, 459, 460, 466], "simple_graph": [15, 16], "dist": [15, 17, 214, 248, 249, 312, 315, 404, 406, 408, 464, 480, 488], "codegen": [15, 51, 211], "bit": [15, 213, 216, 221, 223, 468], "longer": [15, 232, 250, 464], "retriev": [15, 50, 209, 215, 219, 221, 238, 239, 249, 263, 264, 274, 275, 279, 283, 287, 288, 308, 309, 311, 317, 322, 463, 470, 471], "displai": [15, 197, 199, 222, 306], "vertex_rang": [15, 249, 263, 264, 274, 275, 279, 287, 288, 319, 463], "end": [15, 16, 203, 207, 216, 221, 223, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 244, 249, 250, 311, 316, 322, 336, 345, 350, 351, 364, 376, 459, 463, 469, 474], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 193, 197, 199, 204, 214, 222, 477, 481, 483, 487], "degre": [16, 19, 20, 203, 207, 218, 223, 230, 248, 250, 308, 309, 314, 322, 331, 356, 357, 376, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 402, 414, 415, 416, 417, 451, 457, 458, 470], "vertexdatacontext": [16, 17, 247, 322, 480], "myappcontext": 16, "explicit": [16, 247, 401, 457, 464], "parallelmessagemanag": [16, 17, 480], "param1": 16, "setvalu": [16, 17, 480], "vertex_array_t": [16, 247], "variabl": [16, 29, 33, 39, 41, 48, 122, 193, 197, 199, 201, 204, 212, 221, 255, 376, 464, 470, 471, 483], "And": [16, 18, 23, 29, 31, 36, 38, 196, 207, 211, 213, 223, 236, 245, 248, 249, 310, 315, 460, 463, 464, 470], "zero": [16, 48, 239, 248, 306, 311, 322, 339, 357, 366, 399, 451, 452, 471], "myapp": 16, "parallelappbas": [16, 17, 480], "parallelengin": [16, 17, 480], "install_parallel_work": 16, "constexpr": [16, 247], "messagestrategi": [16, 18, 247, 250, 480], "message_strategi": [16, 247], "ksynconoutervertex": [16, 18, 247, 250, 480], "loadstrategi": [16, 247], "load_strategi": [16, 247], "kbothoutin": [16, 247], "initchannel": 16, "noth": [16, 250, 266, 319, 321, 457], "forc": [16, 37, 236], "forcecontinu": [16, 17, 480], "getincomingadjlist": [16, 203, 247], "counter": [16, 223], "runnabl": [16, 17, 23, 83, 154, 197], "content": [16, 48, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 207, 223, 233, 236, 238, 322, 454, 468, 490], "my_app": [16, 18, 480], "cpp_pie": [16, 248, 256], "context_typ": [16, 247, 248, 256], "dynamicprojectedfrag": 16, "codebas": [16, 35, 50], "my_app_context": 16, "zip": [16, 46, 214, 215, 222, 256, 404, 408, 457, 488], "jr": 16, "load_app": [16, 17, 18, 22, 480], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 248, 249, 319, 463, 480], "demo": [17, 22, 23, 213, 252, 464, 470, 478, 480], "turn": [17, 50, 200, 202, 204, 215, 245, 252, 451, 478], "verbos": [17, 23, 38, 204, 478], "cluster_typ": [17, 22, 215, 236, 248, 249, 464, 468, 480, 490], "add_lib": [17, 22, 464], "home": [17, 22, 23, 28, 38, 47, 204, 207, 236, 247, 312, 313, 315, 316, 318, 319, 322, 366, 477, 478, 480, 482, 490], "19": [17, 22, 23, 32, 199, 204, 214, 223, 245, 307, 308, 310, 478, 483, 487], "shade": [17, 22, 23, 480], "java_pi": [17, 248], "threadnum": [17, 480], "info": [17, 38, 45, 51, 86, 157, 204, 213, 223, 234, 250, 319, 457, 460, 464, 469, 470, 471, 478], "avail": [17, 23, 29, 30, 41, 45, 47, 122, 193, 198, 199, 207, 215, 216, 219, 222, 230, 236, 239, 245, 248, 304, 317, 405, 406, 407, 457, 464, 466, 469, 480], "mvn": [17, 22, 51, 122, 252, 470], "clean": [17, 32, 51, 122, 207, 213, 215, 238, 252, 315, 469], "dskiptest": [17, 51, 252], "pom": [17, 23, 122, 470], "xml": [17, 23, 247, 470], "groupid": [17, 23, 122, 470, 480], "artifactid": [17, 23, 122, 470, 480], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 470, 480], "spark": [17, 468], "drastic": 17, "great": [17, 23, 37, 470], "suppos": [17, 223, 451, 469], "traversecontext": [17, 480], "overrid": [17, 236, 247, 305, 315, 477, 480], "ifrag": [17, 480], "parallelcontextbas": [17, 480], "adjlist": [17, 247, 250, 468, 480], "nbr": [17, 20, 203, 247, 250, 457, 480], "dst": [17, 18, 30, 207, 219, 230, 236, 249, 305, 308, 319, 321, 463, 466, 469, 480, 489, 490], "largest": [17, 223, 322, 402, 480], "vertexarrai": [17, 247, 250, 480], "math": [17, 229, 233, 238, 322, 406, 407, 484, 486], "max": [17, 216, 250, 318, 322, 480, 488], "pars": [17, 211, 236, 248, 306, 466, 470], "maxiter": [17, 480], "jsonobject": [17, 480], "gsvertexarrai": [17, 480], "createfficontext": [17, 480], "containskei": [17, 480], "getinteg": [17, 480], "javadoc": [17, 35], "proper": [17, 37], "javaapp": [17, 462, 480], "But": [17, 196, 210, 223, 236, 244, 252, 457, 463], "rememb": [17, 22, 23, 30, 33, 45, 46, 122, 193, 196, 197, 199, 201, 470, 477], "pack": [17, 23, 480], "param": [17, 23, 29, 83, 105, 154, 167, 176, 196, 204, 213, 215, 234, 248, 268, 269, 283, 298, 300, 304, 311, 317, 464, 470, 480], "b": [17, 18, 22, 37, 51, 216, 218, 221, 223, 311, 366, 384, 397, 403, 404, 408, 413, 414, 415, 417, 445, 453, 457, 480, 488], "bother": 17, "click": [17, 36, 37, 230, 307, 308, 311, 481], "pure": [18, 247, 474], "just": [18, 19, 23, 27, 46, 47, 49, 197, 199, 204, 207, 210, 221, 223, 244, 252, 315, 319, 457, 460, 464, 470, 472], "udf": [18, 255, 463, 480], "decor": [18, 480], "vd_type": [18, 250, 255, 480], "md_type": [18, 250, 255, 480], "youralgorithm": [18, 480], "staticmethod": [18, 255, 480], "statu": [18, 27, 29, 30, 38, 46, 50, 51, 86, 87, 89, 93, 96, 102, 103, 122, 157, 158, 160, 165, 167, 173, 174, 193, 202, 204, 232, 315, 316, 322, 470, 474, 478], "cython": [18, 34, 204, 283, 462, 480], "sssp_pie": [18, 480], "v_label_num": [18, 471, 480], "vertex_label_num": [18, 250, 466, 471, 480], "v_label_id": [18, 250, 480], "init_valu": [18, 250, 480], "1000000000": [18, 248, 480], "pieaggregatetyp": [18, 250, 480], "kminaggreg": [18, 250, 480], "register_sync_buff": [18, 250, 480], "get_config": [18, 250, 464, 480], "declar": [18, 122, 193, 199, 211, 221, 223, 226, 241, 244, 307, 480], "get_inner_nod": [18, 250, 480], "break": [18, 37, 122, 193, 200, 222, 317, 480], "set_node_valu": [18, 250, 480], "e_label_num": [18, 203, 471, 480], "edge_label_num": [18, 250, 466, 471, 480], "e_label_id": [18, 480], "get_outgoing_edg": [18, 250, 480], "third": [18, 51, 236, 237, 241, 319, 442, 443], "get_int": [18, 250, 480], "get_node_valu": [18, 250, 480], "iv": [18, 480], "inner_nod": [18, 250, 480], "v_dist": [18, 480], "u_dist": [18, 203, 480], "classic": [18, 230, 310, 458], "yourpregelalgorithm": [18, 480], "sssp_pregel": [18, 480], "set_valu": [18, 250, 480], "src_id": [18, 47, 203, 230, 306, 307, 308, 310, 311, 314, 317, 321, 480], "cur_dist": [18, 480], "new_dist": [18, 480], "outgoing_edg": [18, 250, 480], "vote_to_halt": [18, 250, 480], "sin": [18, 480], "m_pi": [18, 480], "translat": [18, 37, 215, 237], "generate_eid": [18, 210, 236, 247, 298, 319, 464, 471, 480, 490], "test": [18, 23, 29, 33, 46, 50, 86, 93, 122, 157, 165, 197, 199, 201, 202, 204, 209, 210, 213, 223, 226, 229, 232, 233, 238, 242, 305, 315, 317, 321, 341, 342, 376, 457, 459, 464, 469, 470, 477, 481, 482, 484, 489], "futur": [18, 48, 122, 193, 200, 216, 221, 223, 236], "to_gar": [18, 480], "my_sssp_pregel": [18, 480], "gar": [18, 248, 256, 480], "construct": [19, 200, 202, 223, 227, 230, 236, 237, 238, 239, 247, 298, 305, 306, 307, 308, 309, 319, 320, 324, 325, 365, 386, 388, 389, 391, 397, 401, 402, 403, 411, 414, 415, 416, 417, 419, 435, 439, 443, 449, 451, 464, 468, 471], "expand": [19, 200, 211, 223, 224, 309, 311, 458], "add_edges_from": [19, 20, 341, 457], "add_nod": [19, 20, 457, 460], "number_of_nod": [19, 20, 322, 366, 450, 457], "number_of_edg": [19, 20, 331, 366, 450, 457], "sort": [19, 20, 203, 211, 223, 322, 328, 356, 360, 363, 366, 391, 392, 450, 451, 457, 469], "connected_compon": [19, 322], "nx": [19, 20, 207, 259, 261, 262, 265, 268, 270, 272, 277, 278, 282, 285, 286, 319, 322, 457, 459, 460], "add_nodes_from": [19, 20, 457], "red": [19, 20, 37, 215, 306, 457], "green": [19, 20, 36, 37], "add_edg": [19, 20, 207, 215, 236, 319, 335, 341, 342, 345, 350, 351, 457, 460, 484, 485, 490], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 198], "dict": [19, 20, 27, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 248, 249, 276, 284, 304, 307, 308, 311, 319, 320, 404, 405, 406, 407, 414, 415, 435, 457, 463, 464, 470], "draw": [19, 196, 200, 223, 404, 407], "matplotlib": [19, 223], "with_label": 19, "font_weight": 19, "bold": [19, 245], "twitter": [19, 245], "wget": [19, 22, 23, 29, 35, 46, 193, 214, 312, 488], "raw": [19, 22, 23, 46, 47, 49, 51, 193, 210, 211, 227, 274, 275, 307, 313, 315, 316, 321], "githubusercont": [19, 22, 23, 46, 193], "p": [19, 20, 31, 36, 49, 51, 93, 122, 201, 215, 221, 223, 238, 239, 248, 307, 317, 322, 380, 381, 382, 384, 393, 394, 395, 398, 399, 401, 403, 405, 406, 407, 408, 411, 413, 488], "o": [19, 22, 23, 27, 30, 33, 38, 247, 317, 322, 339, 390, 392, 397, 405, 406, 407, 409, 410, 411, 457, 470, 481, 484], "gs_nx": 19, "g1": [19, 319, 461, 472, 473], "read_edgelist": [19, 459], "expandvar": [19, 22], "nodetyp": [19, 459], "create_us": [19, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 386, 387, 388, 389, 391, 393, 394, 395, 397, 401, 402, 403, 409, 410, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 452, 459], "g2": [19, 319, 457, 461, 472, 473], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 215, 221, 243, 322], "hashabl": [20, 337, 352, 414, 457, 459], "float": [20, 78, 92, 216, 219, 221, 232, 236, 245, 248, 305, 306, 307, 308, 316, 317, 318, 322, 376, 379, 380, 381, 382, 384, 395, 396, 397, 398, 399, 404, 405, 406, 407, 408, 411, 412, 413, 449, 457, 459, 464, 468, 472, 488, 489, 490], "tupl": [20, 223, 236, 306, 307, 308, 317, 319, 322, 341, 342, 351, 363, 404, 408, 414, 453, 457, 459, 464], "though": [20, 376, 457, 470], "yield": [20, 122, 197, 201, 311, 317, 404, 408, 457], "node_attribute_dict": 20, "discuss": [20, 204, 223, 322, 469, 483], "incorpor": [20, 51, 196, 218], "path_graph": [20, 322, 333, 335, 336, 342, 457, 459], "grown": [20, 366, 399, 457], "unpack": [20, 222, 247, 457], "ebunch": [20, 457], "dictionari": [20, 198, 248, 292, 322, 404, 405, 406, 407, 414, 415, 416, 417, 457, 459, 468], "11": [20, 27, 30, 31, 32, 210, 213, 223, 229, 245, 248, 306, 307, 308, 310, 324, 325, 326, 362, 457, 470, 478], "complaint": 20, "clear": [20, 37, 221, 223, 261, 262, 357, 359, 360, 362, 364, 366, 367, 369, 371, 372, 375, 386, 388, 389, 391, 393, 394, 395, 397, 401, 402, 403, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 452, 457, 459, 470], "quietli": [20, 352, 457], "ignor": [20, 49, 322, 333, 352, 457, 464], "spam": 20, "stage": [20, 204, 209, 227, 243, 244, 311, 469], "seen": [20, 197, 211, 237, 469], "report": [20, 204, 218, 245, 282, 380, 381, 382, 457, 460], "adj": [20, 250, 322, 457], "item": [20, 29, 47, 197, 202, 234, 237, 306, 307, 308, 311, 317, 322, 457, 470], "One": [20, 211, 216, 237, 241, 242, 243, 244, 248, 309, 311, 388, 397, 451, 470], "nbunch": [20, 330, 334, 336, 352, 457], "remove_nod": [20, 457], "remove_nodes_from": [20, 457], "remove_edg": [20, 457], "remove_edges_from": [20, 386, 388, 457], "instanti": [20, 248, 317, 472], "digraph": [20, 319, 324, 334, 336, 341, 342, 345, 350, 351, 362, 379, 380, 381, 384, 388, 389, 391, 393, 394, 395, 396, 400, 451, 452, 453, 455, 458, 459, 460], "edgelist": [20, 435, 459], "subscript": [20, 457], "notat": [20, 45, 47, 422, 424, 426, 428, 430, 436, 438, 457], "yellow": [20, 306], "blue": [20, 306, 457], "undirect": [20, 48, 236, 242, 248, 268, 307, 311, 319, 322, 328, 332, 354, 377, 378, 384, 386, 393, 395, 398, 400, 401, 402, 404, 405, 406, 407, 408, 414, 419, 423, 424, 427, 430, 431, 433, 439, 452, 454, 457, 471], "twice": [20, 435, 457], "fg": [20, 471], "add_weighted_edges_from": [20, 341, 457], "125": [20, 306, 390, 401], "75": [20, 223, 229, 232, 233, 238, 245, 322, 380, 381, 382, 384, 464, 484], "375": 20, "eattr": [20, 457], "wt": 20, "attach": [20, 247, 306, 393, 396], "fridai": [20, 457, 460], "mondai": 20, "5pm": [20, 457], "2pm": [20, 457], "room": [20, 457], "714": [20, 457], "to_direct": [20, 319, 377, 378, 393, 395, 457], "represent": [20, 48, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 211, 237, 239, 242, 319, 455, 457, 468], "dg": [20, 226, 242], "dgv": 20, "as_view": [20, 353, 354, 457], "shallow": 20, "out_edg": [20, 334, 457], "in_degre": [20, 230, 232, 309, 311, 314, 317, 388, 414, 415, 457], "predecessor": [20, 327, 400, 451, 457], "successor": [20, 294, 327, 394, 395, 400, 457], "out_degre": [20, 388, 414, 415, 457], "feel": [20, 37, 204], "inconsist": [20, 245], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 221, 230, 242, 248, 309, 314, 379, 380, 381, 382, 384, 386, 390, 393, 395, 396, 397, 398, 399, 404, 405, 406, 407, 408, 411, 413], "to_undirect": [20, 319, 393, 395, 457], "theoret": 20, "load_ldbc": [20, 223, 468, 488], "foo": [20, 457], "famou": [22, 23, 456], "hadoop": [22, 470], "stop": [22, 27, 30, 102, 122, 173, 193, 239, 243, 247, 322], "open": [22, 36, 37, 51, 199, 212, 222, 224, 230, 241, 244, 317, 459, 469, 470], "actual": [22, 23, 28, 46, 48, 122, 193, 194, 196, 197, 212, 219, 221, 223, 230, 251, 253, 310, 408, 457, 460, 468, 478], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 319], "p2pvertexinputformat": 22, "eformat": [22, 319], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33, 51], "graphscope_sess": [22, 319], "31": [22, 23, 207, 236, 307, 308, 310, 490], "v_prop": [22, 247, 281], "vdata": 22, "e_prop": [22, 247, 281], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 197, 322], "toward": [22, 470], "offici": [22, 210, 212, 213, 222, 241], "pl": 22, "snapshot": [22, 219, 244, 466, 470], "writabl": 22, "degrad": [22, 244], "procedur": [22, 29, 45, 50, 93, 96, 165, 167, 199, 200, 202, 210, 211, 223, 258, 399], "except": [22, 122, 193, 200, 204, 222, 229, 232, 233, 236, 238, 243, 310, 317, 335, 352, 356, 367, 376, 386, 388, 437, 457, 464, 469, 484], "right": [22, 216, 218, 221, 236, 315, 358, 367, 369, 390, 455], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 207, 211, 226, 240, 242, 244, 245, 379], "proceed": [23, 27, 197, 379, 397], "side": [23, 37, 211, 221, 222, 248, 267, 307, 360, 469], "venv": [23, 213, 238], "virtualenv": [23, 193], "pyspark_venv": 23, "bin": [23, 31, 51, 212, 213, 222, 223, 237, 238, 331, 470, 478, 482, 488], "pyspark_venv_g": 23, "tar": [23, 29, 31, 470], "gz": [23, 31, 459, 470], "upload": [23, 46, 47, 210], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 237, 468, 488], "oss": [23, 29, 31, 46, 236, 247, 312, 319, 470, 480, 481, 490], "beij": [23, 29, 31, 227, 242, 306, 470, 481], "fixm": 23, "yuansi": 23, "env": [23, 204, 213, 234, 238, 312], "var": [23, 33, 38, 204, 236, 317, 470, 478, 490], "gs_jar": 23, "l": [23, 29, 35, 51, 197, 230, 242, 309, 377, 378, 380, 381, 382, 389, 390, 391, 393, 394, 395, 398, 405, 406, 407, 408, 410, 414, 415, 416, 417, 446, 449, 457, 477, 478], "lib": [23, 31, 122, 198, 212, 256, 470], "7077": 23, "master_url": 23, "conf": [23, 45, 212, 222, 247, 470, 488], "executor": [23, 35, 38, 49, 210, 212, 237, 320, 478], "driver": [23, 27, 86, 87, 93, 96, 102, 122, 157, 158, 165, 193, 197, 201, 217, 222, 236, 284, 319, 470, 488], "2g": 23, "10g": [23, 482], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 216], "url": [23, 89, 160, 212, 319, 320, 470, 488], "rdd": 23, "classifi": [23, 227, 229, 233, 238, 242, 317, 480], "maven": [23, 50, 252, 470, 480], "conflict": [23, 213, 223, 229, 319, 447, 470], "correctli": [23, 37, 197, 201, 204, 226, 322, 470], "resolv": [23, 28, 204, 236, 319, 471], "goal": [23, 200, 202, 211, 216, 227, 239, 242, 469], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 203, 211, 363, 470], "config": [23, 27, 28, 31, 46, 49, 210, 212, 222, 234, 282, 292, 304, 305, 318, 321, 461, 464, 466, 470, 471, 477, 488, 489], "socket": [23, 28, 30, 212, 247, 471], "bound": [23, 48, 93, 122, 165, 193, 221, 223, 241, 283, 376, 464, 469, 472], "vineyardsock": 23, "filepath": [23, 113], "sock": [23, 28, 212], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 197, 201, 210, 212, 217, 241, 248], "grow": [24, 200, 207, 226, 237, 376, 386, 393, 394, 395, 456, 469], "capac": [24, 33, 212, 457, 464], "indivis": 24, "succinctli": 24, "oppos": [24, 230], "orient": [24, 230, 244, 314, 470], "googl": [24, 35, 240, 482], "powergraph": [24, 244, 245], "wa": [24, 29, 30, 37, 218, 221, 223, 239, 245, 311, 322, 376, 391, 404, 405, 406, 407, 456, 470], "2010": [24, 245, 248, 322, 382, 449, 454], "sequenc": [24, 216, 221, 223, 248, 319, 356, 376, 386, 387, 388, 389, 390, 391, 392, 408, 414, 415, 418, 451, 452, 457, 458, 471], "conceptu": [24, 218], "behavior": [24, 45, 51, 221, 223, 236, 250, 464], "becom": [24, 207, 218, 223, 230, 457, 469, 470], "inact": 24, "again": [24, 204, 221, 236, 472, 477], "termin": [24, 36, 215], "halt": [24, 241, 250, 396], "individu": [24, 210, 212, 218, 233, 238], "messageiter": [24, 250], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 47, 227, 230, 306, 317, 322, 419, 471], "getvalu": [24, 86, 87, 93, 96, 102, 122, 203], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 204, 470], "dramat": 24, "face": [24, 31, 211, 223, 240, 442, 443], "power": [24, 122, 193, 201, 216, 217, 221, 223, 226, 241, 248, 322, 376, 386, 434, 457], "law": [24, 376, 386], "gather": [24, 464], "scatter": [24, 307], "accumul": [24, 230, 451], "workload": [27, 36, 200, 207, 209, 211, 212, 220, 223, 226, 237, 239, 245, 470, 472, 473], "grpc": [27, 28, 31, 204, 247, 481, 483], "linux": [27, 30, 31, 36, 51, 199, 210, 229, 245, 252, 487], "maco": [27, 30, 36, 51, 199, 204, 213, 481, 483, 484, 487], "skip": [27, 31, 35, 241, 252, 470], "minikub": [27, 30, 470], "instruct": [27, 29, 30, 33, 37, 51, 197, 200, 210, 212, 213, 214, 215, 222, 238, 241, 247, 260, 311], "platform": [27, 32, 37, 43, 51, 199, 209, 210, 211, 229, 243, 244, 245, 252, 306, 448, 464], "desktop": [27, 470, 484], "server": [27, 29, 49, 51, 86, 96, 157, 167, 199, 211, 212, 215, 219, 222, 224, 226, 230, 235, 237, 239, 241, 246, 310, 315, 316, 317, 470, 482, 488], "kubectl": [27, 29, 30, 33, 38, 49, 204, 210, 470, 478, 483], "kube": [27, 464], "apivers": [27, 33, 234], "v1": [27, 33, 35, 51, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 204, 221, 223, 229, 232, 233, 234, 238, 241, 305, 422, 435, 460, 483, 484, 489], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 223, 311, 316, 319, 379, 451, 478], "16": [27, 31, 210, 212, 223, 245, 305, 307, 308, 310, 312, 413, 436, 450, 489], "2023": [27, 218, 478], "44": [27, 49, 245, 307, 308, 310, 450], "05": [27, 384, 397], "cst": 27, "sig": [27, 480, 487], "28": [27, 221, 223, 227, 242, 245, 307, 308, 310, 454], "cluster_info": 27, "172": [27, 245], "21": [27, 31, 207, 223, 245, 248, 307, 308, 310, 430, 470], "67": [27, 245, 248], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 234, 464], "profil": [27, 488], "encapsul": [27, 122, 193, 201, 226, 227, 305, 311, 464], "entranc": [27, 51, 311], "tag": [27, 41, 49, 221, 223, 245, 384, 464, 470, 482], "intranet": 27, "internet": [27, 29, 31, 199, 215, 223, 240, 454, 456], "might": [27, 45, 48, 193, 197, 204, 322, 414, 457, 473], "k8s_image_registri": [27, 33, 464], "k8s_image_repositori": [27, 464], "k8s_image_tag": [27, 33, 234, 464], "fit": [27, 200, 207, 210, 231, 232, 252], "increas": [27, 38, 45, 204, 207, 307, 355, 356, 364, 386, 388, 396, 414, 417, 419, 469], "cpu": [27, 204, 210, 234, 235, 312, 464, 473, 483], "num_work": [27, 28, 33, 234, 235, 304, 464, 488], "k8s_engine_cpu": [27, 304, 464], "32": [27, 221, 245, 307, 308, 310, 318, 322, 468], "k8s_engine_mem": [27, 204, 234, 304, 464, 483], "256gi": 27, "vineyard_shared_mem": [27, 204, 234, 304, 464, 483], "preexist": [27, 218], "k8s_client_config": [27, 464], "disk": [27, 46, 200, 204, 210, 237, 470], "test_data": [27, 229, 233, 238, 481, 484], "testingdata": [27, 30, 33, 481, 484], "k8s_volum": [27, 30, 33, 304, 464, 481, 484], "constructor": [27, 236, 357, 359, 360, 362, 364, 366, 367, 369, 371, 372, 375, 386, 388, 389, 391, 393, 394, 395, 397, 401, 402, 403, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 452, 459], "vm": [27, 30, 247], "copi": [27, 29, 30, 199, 210, 237, 239, 244, 265, 322, 329, 333, 335, 336, 394, 400, 455, 457, 460, 468, 469, 470, 471, 472], "hostpath": [27, 30, 33, 49, 210, 464, 481, 484], "expandus": [27, 481, 484], "mountpath": [27, 30, 33, 234, 464, 481, 484], "expect": [27, 34, 37, 204, 236, 252, 386, 388, 390, 460, 464], "monitor": [27, 29, 226], "wait": [27, 46, 89, 122, 193, 204, 464], "finish": [27, 46, 122, 203, 222, 232, 250, 307, 310, 470], "remov": [27, 29, 86, 157, 197, 218, 221, 223, 248, 252, 312, 329, 335, 337, 383, 386, 388, 390, 432, 435, 451, 457, 470], "remain": [27, 200, 216, 221, 236, 240, 306, 311, 391, 418], "statefulset": [27, 470], "svc": [27, 49, 210], "left": [27, 36, 45, 216, 218, 221, 248, 319, 322, 358, 390], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 471], "0000": [28, 207, 223], "rpc_port": 28, "9600": 28, "sai": [28, 41], "configmap": [28, 234], "mount": [28, 30, 33, 204, 211, 236, 316, 464, 481, 483, 484], "ideal": [29, 37, 48, 200, 244], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 49, 204, 210, 212, 223, 470, 481, 483], "minut": [29, 204, 211], "succe": 29, "past": [29, 48, 211, 472], "noteport": 29, "node_ip": [29, 470], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 234, 247, 317], "nodeport": [29, 234, 464, 470, 484], "echo": [29, 31], "listen": [29, 45, 49, 199, 200, 212, 247], "statement": [29, 311, 470], "ident": [29, 249, 265, 353, 354, 358, 429, 449, 451, 457], "reconnect": [29, 464], "disconnect": [29, 197, 322, 398, 399, 414, 417, 464, 477], "sess2": 29, "comment": [29, 37, 207, 215, 216, 223, 236, 306, 457, 459, 460, 468, 485, 490], "homepag": 29, "remot": [29, 36, 122, 222, 234, 235, 252, 320, 464, 488], "cater": [29, 237], "tgz": 29, "unzip": [29, 214, 215, 222, 488], "zxvf": 29, "bundl": [30, 464], "aliv": 30, "reserv": 30, "simplifi": [30, 43, 210, 237, 238, 239, 241, 243, 306, 311, 469], "etcd": [30, 204, 210, 464, 466, 481], "replica": [30, 210, 234], "etcd_replica": 30, "greater": [30, 33, 216, 221, 248, 307, 322, 376, 407, 464, 469], "ag": [30, 33, 46, 47, 48, 86, 122, 157, 165, 193, 211, 218, 219, 221, 223, 227, 242, 305, 306, 319, 463, 478, 488, 489], "33": [30, 200, 221, 307, 308, 310, 447, 450], "vineyardd": [30, 33, 212], "vineyardctl": [30, 464], "v6d": [30, 31, 210, 236, 464], "blob": [30, 204, 480], "cmd": [30, 247, 464], "readm": [30, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 252], "md": [30, 45, 317], "notic": [30, 33, 197, 210, 219, 223, 237, 311, 319, 450, 457, 464, 472], "charact": [30, 47, 448, 453, 459], "vineyard_deploy": 30, "restart": [30, 45, 102, 122, 173, 193, 201, 478], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 304, 464], "k8s_vineyard_deploy": [30, 33, 304, 464], "reload": [30, 470], "vineyard_id": [30, 33, 319, 478], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 247, 319, 464, 469, 471], "softwar": [30, 33, 47, 201, 210, 213, 218, 221, 226, 237, 319, 471], "successfulli": [30, 46, 96, 122, 167, 193, 199, 212, 215, 227, 232, 376, 470], "folder": [31, 38, 51, 234, 236, 469], "cento": [31, 32, 204, 213, 245, 483, 487], "82": [31, 245], "boost": [31, 226, 237, 247], "perl": 31, "v3": [31, 241, 245], "24": [31, 210, 223, 245, 307, 308, 310, 424, 442, 450], "openmpi": [31, 245], "gflag": 31, "glog": [31, 218], "arrow": [31, 47, 203, 247, 259, 272, 319, 460], "74": [31, 245, 448], "openssl": [31, 204, 483], "zlib": 31, "protobuf": [31, 42], "49": [31, 223, 245, 307, 308, 310], "13": [31, 35, 223, 245, 306, 307, 308, 310, 362, 403], "libclang": 31, "curl": [31, 222], "lo": [31, 222], "czf": 31, "mkdir": [31, 51, 204, 317, 483], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 203], "y": [31, 32, 223, 234, 235, 248, 403, 404, 408], "devtoolset": 31, "python38": 31, "opt": [31, 36, 45, 51, 211, 212, 228, 317], "bash": [31, 45, 51, 221, 234, 478, 482], "euxo": 31, "pipefail": 31, "dir": [31, 470], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 482], "manylinux2010_x86_64": 31, "whl": [31, 312, 315], "x86_64": [31, 199, 234], "sh": [31, 35, 51, 222, 312, 470, 488], "licens": [31, 482], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 306], "program_opt": 31, "regex": [31, 221], "chrono": 31, "atom": [31, 470], "date_tim": [31, 48], "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 51, 63, 83, 105], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 211, 237, 442, 470], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 247], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 51, 199, 204, 210, 213, 312, 481, 483, 487], "04": [32, 51, 204, 210, 213, 223, 245, 312, 481, 483, 487], "intel": [32, 213, 481, 483, 487], "appl": [32, 204, 213, 457, 481, 483, 487], "silicon": [32, 213, 481, 483], "jdk": [32, 210, 213, 225, 474, 480], "wheel": [32, 204, 375, 441, 483, 486], "manylinux2014": [32, 482], "abi": 32, "wish": [32, 37, 45, 197], "nightli": [32, 204, 483], "tidi": 32, "quickli": [32, 36, 200, 226, 238, 241, 242, 244, 317, 464], "insid": [32, 38, 47, 204, 221, 223, 248, 256, 306, 318, 319, 432, 463, 464, 488], "apt": [32, 312], "ipython": 32, "tensorflow": [32, 226, 227, 229, 232, 233, 237, 238, 242, 243, 305, 306, 307, 310, 311, 313, 317, 484], "tool": [32, 35, 36, 51, 196, 199, 200, 207, 210, 217, 224, 226, 228, 237, 404, 406, 466, 469, 470, 471, 487], "dep": [32, 35, 50, 477, 481, 482], "fly": [32, 200, 238], "clang": [32, 35, 213, 482], "essenti": [32, 47, 48, 204, 216, 221, 226, 241, 243], "arm": [32, 51], "preliminari": 32, "yet": [32, 122, 193, 199, 214, 221, 249, 414, 417, 457, 463, 470], "calcul": [33, 211, 218, 221, 223, 248, 250, 308, 322, 376, 408], "period": [33, 470], "restor": [33, 464, 470], "persistentvolum": [33, 470], "dump": [33, 248, 284], "cat": [33, 234, 235, 470, 478], "eof": 33, "metadata": [33, 46, 47, 51, 86, 87, 93, 100, 113, 157, 158, 165, 171, 184, 204, 234, 247, 319, 457, 466, 470], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 464], "persistentvolumeclaim": [33, 464, 470], "matchlabel": 33, "request": [33, 122, 193, 197, 204, 236, 247, 276, 307, 315, 318, 320, 351, 457, 464, 470, 483], "extern": [33, 37, 230, 237, 464, 470], "ccc": 33, "sub_graph": [33, 219, 238, 484, 485], "haslabel": [33, 207, 213, 219, 223, 238, 488], "simple_g": [33, 238, 480, 484], "pr_result": 33, "tc_result": 33, "add_column": [33, 238, 247, 319, 480, 484, 485], "tc": [33, 238, 484], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 61, 86, 93, 96, 102, 104, 122, 157, 464], "pvc_name": [33, 464], "schema": [33, 46, 47, 51, 58, 60, 80, 86, 122, 129, 157, 165, 193, 200, 203, 211, 212, 215, 217, 218, 219, 223, 232, 233, 236, 248, 306, 307, 316, 319, 457, 466, 468, 469, 470, 471, 485, 488, 490], "oid_typ": [33, 236, 247, 248, 276, 298, 319, 464, 490], "ulong": 33, "lang": [33, 35, 47, 213, 215, 218, 221, 238, 320], "eid": [33, 203, 215, 319, 470], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 45, 196, 211, 217, 237, 241, 243, 244], "behind": [34, 232, 469, 472, 477, 478], "scene": [34, 211, 232, 314], "lower": [34, 211, 221, 223, 241, 376, 383, 396], "cost": [34, 211, 223, 237, 241, 322, 470], "ownership": 34, "cach": [34, 197, 227, 234, 240, 244, 457], "layout": [34, 240, 470], "were": [34, 37, 223, 245, 408, 470], "outperform": [34, 226, 240, 242, 243, 244], "art": [34, 226, 240, 243, 245], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 200, 201], "promot": 35, "readabl": [35, 221, 457], "qualiti": [35, 37, 242], "black": [35, 482], "enforc": 35, "rule": [35, 45, 51, 201, 211, 223, 230, 240, 309, 315, 319, 356, 466], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 50, 202, 209, 234, 481, 482], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 51, 212, 222], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 228], "devcontain": 36, "json": [36, 86, 87, 93, 102, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 210, 212, 464, 466, 470, 471], "setup": [36, 37, 193, 204, 319, 464, 482], "visual": [36, 37, 200, 237], "studio": 36, "collabor": [36, 237, 469], "stabl": [36, 248, 319, 466, 470, 487], "haven": [36, 193, 199, 223], "navig": [36, 469, 477], "icon": 36, "bottom": [36, 367], "corner": 36, "window": [36, 223, 487], "reopen": 36, "marketplac": 36, "prompt": [36, 215, 222], "shift": [36, 216, 221, 223, 322, 422], "ctrl": 36, "made": [36, 37, 45, 210, 230, 245, 306, 309, 315, 322, 417, 469], "rebuild": 36, "subcommand": [36, 228], "assembli": [36, 212], "learning_engin": 36, "graphlearn": [36, 38, 227, 229, 232, 233, 234, 238, 305, 306, 307, 311, 312, 317, 318, 321, 464, 478, 484, 489], "compos": [36, 38, 51, 218, 227, 230, 238, 240, 244], "alon": [36, 211, 219, 477], "circul": [36, 360], "edit": [36, 37, 215, 403, 440, 477], "entrypoint": [36, 477, 484], "plai": [36, 211, 225, 246, 316, 321, 474], "thank": [37, 207, 215, 237], "interest": [37, 223, 226, 240, 470], "focus": [37, 218, 223, 237, 243, 245, 311, 449, 470], "eager": [37, 248, 249, 298, 300, 319, 464], "contributor": [37, 450], "welcom": [37, 197], "engag": [37, 199, 237, 238], "good": 37, "particip": [37, 45], "join": [37, 45, 216, 218, 223, 234, 307, 317, 358, 361, 369, 376, 385, 386, 399, 401, 404, 405, 406, 407, 408, 416, 417, 457, 469], "ask": [37, 209], "question": [37, 209, 217, 223, 483], "ve": [37, 210, 214, 222, 237], "hasn": [37, 223], "confirm": 37, "concis": [37, 218, 219, 241, 320], "descript": [37, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 201, 210, 211, 216, 218, 221, 230, 234, 236, 306, 309, 314, 315, 319, 414, 422, 470], "relev": [37, 45, 46, 312, 351, 457, 468], "reproduc": [37, 457], "yourself": 37, "why": [37, 204, 223, 248], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 207, 215, 227, 242, 313], "submiss": 37, "fact": [37, 211, 215, 218, 414, 417], "page": [37, 46, 194, 197, 209, 239, 248, 251, 253, 367, 382, 446, 486], "button": [37, 215], "tbf": [37, 208, 245, 465, 476, 479], "isn": [37, 219, 310], "someon": 37, "approach": [37, 200, 215, 219, 226, 227, 237, 239, 241, 242, 310, 386, 399, 454, 469], "spend": 37, "secret": [37, 236, 464, 481, 490], "accident": 37, "hook": 37, "titl": [37, 46, 223, 233, 238], "grammar": 37, "spell": [37, 47], "500": [37, 51, 86, 93, 96, 102, 157, 165, 167, 173, 376], "word": [37, 223, 233, 238, 241, 242, 317, 319, 457], "42": [37, 223, 245, 307, 308, 310, 380, 382, 392, 450], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 241], "patch": 37, "rest": [37, 43, 49, 50, 51, 202, 457, 470], "attain": 37, "brief": [37, 206], "valid": [37, 51, 201, 211, 232, 233, 242, 255, 305, 352, 376, 398, 404, 453, 464, 466], "typo": 37, "feat": 37, "inv": [37, 311, 317, 488], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 470], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 322, 457], "insight": [37, 207, 240, 242, 477], "feedback": [37, 207], "discourag": 37, "rebas": 37, "workflow": [37, 51, 207, 237, 242, 243, 247], "upstream": [37, 311], "leas": 37, "ping": [37, 480], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 202, 209, 450], "approv": 37, "date": [37, 48, 216, 223, 468, 469, 470], "todo": [37, 45, 49, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 216, 218, 234, 235, 315], "dongz": 37, "potenti": [37, 200, 227, 237, 469], "concern": [37, 237, 244, 469], "reach": [37, 204, 219, 223, 241, 311, 316, 319, 322, 399, 414, 417, 469], "action": 37, "realiti": [37, 311], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 236, 464, 470], "failur": [37, 244], "stream": [38, 204, 210, 221, 222, 223, 227, 311, 316, 319], "stdout": 38, "log_level": [38, 45, 51, 234, 304], "permiss": [38, 48, 204, 256, 483], "consol": [38, 210, 212, 215, 224, 226, 236, 241, 320, 470, 486], "frontend": [38, 39, 49, 51, 210, 212, 213, 214, 222, 470, 478], "event": [38, 376], "involvedobject": 38, "warn": [38, 457], "pinpoint": 38, "exec": [38, 470, 478], "diagnost": 38, "forward": [38, 200, 227, 229, 230, 232, 233, 238, 242, 311, 470, 484], "browser": [38, 223], "explain": [38, 223, 306, 464, 469, 488], "leverag": [39, 122, 217, 219, 225, 226, 239, 241, 252, 449, 466, 470, 474], "opentelemetri": 39, "javaag": 39, "agent": 39, "protocol": [39, 214, 217, 236, 244, 464], "java_tool_opt": 39, "TO": 39, "otel_service_nam": 39, "compris": [41, 46, 216, 219, 233, 237, 310], "busi": [41, 211, 223, 227, 236, 237, 238, 244], "e2": [41, 436], "coupl": [41, 239, 244, 437, 466], "entri": [43, 211, 221, 223, 230, 232, 321, 322, 369, 386, 388, 389, 414, 416, 417, 435, 477], "swagger": 43, "shield": 43, "understand": [43, 46, 47, 50, 223, 230, 241, 305, 311, 319, 469], "8080": [45, 197, 199], "v0": [45, 49, 245, 312, 460], "admin": [45, 49, 50, 51, 173, 199, 200, 319, 470], "7777": [45, 49, 51, 122, 193, 197, 199, 201], "storedproc": [45, 197, 198, 199, 201], "10000": [45, 49, 51, 122, 193, 197, 199, 201, 454], "cypher": [45, 46, 49, 50, 51, 63, 83, 93, 105, 165, 199, 201, 202, 210, 211, 212, 213, 215, 217, 218, 237, 238, 239, 243, 244, 320, 464], "7687": [45, 49, 51, 122, 193, 197, 199, 200, 201, 210, 212, 214, 215], "meta": [45, 51, 199, 212, 227, 236, 247, 308, 309, 468, 470], "8081": [45, 199], "7778": [45, 199], "7688": [45, 199], "10001": [45, 199, 306, 307, 308, 310], "straightforward": [45, 213, 238], "tailor": 45, "align": [45, 46, 47, 48, 58, 129, 197, 211, 221, 230, 241, 305, 308, 309, 408, 469], "engine_config": [45, 51, 464], "unconfigur": 45, "glimps": 45, "what": [45, 197, 204, 210, 223, 224, 241, 316, 403, 457, 463, 469], "compute_engin": [45, 51], "thread_num_per_work": [45, 51], "planner": [45, 51, 201], "is_on": [45, 51], "rbo": [45, 51, 211], "filtermatchrul": [45, 51], "filterintojoinrul": [45, 51], "notexisttoantijoinrul": 45, "query_timeout": [45, 51], "20000": 45, "timeout": [45, 204, 212, 213, 470], "millisecond": [45, 48, 216, 221, 245, 468], "default_listen_address": [45, 51], "localhost": [45, 51, 212, 214, 222, 234, 236, 464, 490], "bolt_connector": [45, 51, 200], "gremlin_connector": [45, 51], "8182": [45, 49, 51, 210, 212, 222, 470], "http_servic": [45, 51], "admin_port": [45, 51], "query_port": [45, 51], "hierarchi": [45, 47], "propertynam": [45, 55, 65, 84, 470], "databas": [45, 51, 198, 204, 211, 216, 217, 218, 221, 223, 237, 239, 241, 243, 245, 470, 480], "debug": [45, 204, 234, 306, 311, 464, 470, 478], "default_graph": [45, 51], "benefit": [45, 218, 222, 236, 240, 469], "throughput": [45, 49, 200, 202, 211, 237, 243, 244, 470], "claus": [45, 200, 217, 218], "calcit": [45, 210, 218], "notmatchtoantijoinrul": [45, 51], "transform": [45, 196, 211, 218, 223, 247, 259, 272, 449, 457, 458, 462, 468], "anti": [45, 216, 218, 237, 241, 244], "bind": [45, 248, 469], "submit": [45, 46, 50, 87, 96, 167, 200, 202, 211, 214, 215, 221, 222, 223, 238, 241, 306, 307, 320, 466, 470, 484], "definit": [46, 51, 221, 237, 322, 403, 404, 406], "test_graph": [46, 122, 157, 165, 193], "vertex_typ": [46, 48, 86, 122, 133, 152, 157, 165, 193], "type_nam": [46, 47, 48, 86, 122, 123, 127, 130, 137, 146, 150, 156, 157, 165, 189, 191, 193], "property_nam": [46, 47, 48, 86, 122, 126, 136, 155, 157, 165, 193, 223, 249, 250, 463], "property_typ": [46, 48, 86, 122, 126, 136, 155, 157, 165, 193], "primitive_typ": [46, 48, 86, 122, 149, 157, 164, 165, 167, 193], "dt_signed_int64": [46, 48, 78, 86, 92, 122, 157, 165, 193], "long_text": [46, 48, 86, 122, 157, 161, 165, 178, 193], "dt_signed_int32": [46, 48, 78, 86, 92, 122, 157, 165, 167, 193], "primary_kei": [46, 48, 86, 122, 127, 137, 156, 157, 165, 193, 470], "vertex_type_pair_rel": [46, 48, 86, 122, 123, 130, 150, 157, 165, 193], "source_vertex": [46, 47, 48, 86, 122, 124, 144, 157, 165, 192, 193], "destination_vertex": [46, 47, 48, 86, 122, 124, 144, 157, 165, 192, 193], "many_to_mani": [46, 48, 53, 86, 122, 157, 165, 193], "dt_doubl": [46, 48, 78, 86, 92, 122, 157, 165, 193], "comprehens": [46, 122, 193, 200, 201, 237, 243, 245, 246], "csv": [46, 49, 86, 122, 157, 193, 202, 207, 210, 215, 236, 319, 457, 460, 468, 470, 471, 484, 485, 490], "person_knows_person": [46, 47, 86, 122, 157, 193, 470], "flex": [46, 51, 122, 193, 194, 200, 202, 477], "column_map": [46, 47, 86, 122, 129, 140, 157, 189, 193], "edge_map": [46, 47, 86, 122, 140, 157, 168, 193], "type_triplet": [46, 47, 86, 122, 140, 157, 193], "source_vertex_map": [46, 47, 86, 122, 140, 157, 193], "destination_vertex_map": [46, 47, 86, 122, 140, 157, 193], "consult": 46, "datasourc": [46, 98, 236, 490], "dataourc": 46, "loading_config": [46, 47, 168, 193], "import_opt": [46, 47, 169, 193], "overwrit": [46, 47, 98, 464, 470], "delimit": [46, 47, 210, 319, 459, 471, 485], "header_row": [46, 47, 210, 319, 471], "loaderjob": 46, "xxx": [46, 213, 215, 315, 319, 464, 480], "desc": [46, 197, 201, 221, 223], "job_id": [46, 87, 122, 157, 158, 159, 193], "hangzhou": [46, 236, 306, 490], "taglin": 46, "born": 46, "acted_in": 46, "review": [46, 237, 248, 322, 386, 404], "wrote": 46, "graph_algo": 46, "delv": 47, "deeper": 47, "thorough": 47, "data_sourc": [47, 169, 193], "col_nam": 47, "disregard": 47, "examin": [47, 218, 238], "modern_graph_import": 47, "showcas": 47, "dissect": 47, "prepend": 47, "x_csr_param": [47, 48, 124, 127, 137, 156, 169], "build_csr_in_mem": [47, 172], "use_mmap_vector": [47, 172], "quot": 47, "quote_char": 47, "double_quot": 47, "escape_char": 47, "block_siz": 47, "4mb": 47, "dst_id": [47, 306, 307, 308, 310, 311, 317, 321], "person_created_softwar": 47, "dd_graph": 47, "your_proj_nam": 47, "table_nam": 47, "partition_col_nam": 47, "partition_nam": 47, "src_user_id": 47, "dst_user_id": 47, "mandatori": [47, 48, 238, 306], "ye": [47, 207, 457], "No": [47, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 204, 221, 457], "header": [47, 210, 319, 469, 470], "escap": 47, "null_valu": 47, "recogn": [47, 469, 470], "null": [47, 216, 221, 322, 339, 355, 356, 363, 370, 422, 452, 457], "batch_siz": [47, 230, 232, 234, 235, 305, 309, 310, 311, 314, 317, 473, 489], "mmap_vector": 47, "mmap_arrai": 47, "triplet": [47, 48, 219], "outlin": [47, 212, 216], "seamlessli": [47, 122, 193, 197, 207, 210, 217, 224, 226, 237, 243, 244], "encompass": [48, 214, 218, 222, 233], "friendship": 48, "peopl": [48, 211, 215, 223, 457, 470], "since_d": 48, "explan": [48, 196, 200, 248, 309], "terminologi": [48, 216], "delin": 48, "plan": [48, 51, 200, 201, 211, 216, 237, 239, 240, 241, 252, 470, 478], "dt_unsigned_int32": [48, 78, 92], "dt_unsigned_int64": [48, 78, 92], "var_char": [48, 178, 185], "fixed_char": [48, 147], "character": [48, 309], "exclus": [48, 216], "symbol": 48, "skill": 48, "profici": [48, 223], "one_to_on": [48, 53], "one_to_mani": [48, 53], "many_to_on": [48, 53], "max_vertex_num": [48, 128], "mmap": 48, "48": [48, 207, 245, 307, 308, 310, 409, 410, 456], "edge_storage_strategi": [48, 125], "only_in": [48, 54], "only_out": [48, 54], "both_out_in": [48, 54], "pertain": [48, 210], "dt_bool": [48, 78, 92], "dt_float": [48, 78, 92], "categor": [48, 200, 230], "subtyp": 48, "length": [48, 203, 207, 216, 221, 223, 236, 241, 248, 309, 322, 361, 363, 368, 390, 411, 415, 421, 443, 452, 457, 490], "unlimit": 48, "text": [48, 96, 167, 242, 250, 358], "char": [48, 147, 178, 316, 319, 469], "fixed_length": [48, 148], "desir": [48, 196, 219, 319, 376, 398, 418, 420, 421], "restrict": 48, "max_length": [48, 186], "uint32": [48, 216], "situat": [48, 221, 223, 226, 306, 307, 470], "df_yyyy_mm_dd": 48, "iso": 48, "fomat": 48, "2019": [48, 450], "01": [48, 223, 229, 233, 235, 238, 248, 306, 322, 381, 484], "date_format": 48, "tf_hh_mm_ss_sss": 48, "00": [48, 223], "000": [48, 210, 223, 245], "time_format": 48, "tzf_utc": 48, "tzf_offset": 48, "time_zone_format": 48, "dtf_yyyy_mm_dd_hh_mm_ss_sss": 48, "date_time_format": 48, "date32": [48, 67, 109, 138, 180], "int32": [48, 216, 229, 233, 238, 306, 308, 316, 317, 468, 484], "1970": 48, "time32": 48, "midnight": 48, "timestamp": [48, 109, 110, 180, 181, 468, 470], "int64": [48, 216, 236, 250, 276, 298, 306, 308, 309, 314, 316, 317, 319, 464, 468, 490], "000000": 48, "zone": [48, 216], "signifi": [48, 341, 342], "integ": [48, 57, 72, 75, 77, 79, 80, 82, 83, 84, 85, 89, 101, 103, 115, 120, 121, 216, 221, 322, 357, 360, 361, 362, 363, 364, 366, 368, 369, 371, 372, 375, 376, 379, 380, 381, 382, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 435, 449, 450, 451, 452, 454, 457, 468, 470], "januari": 48, "timezon": 48, "albeit": 48, "previous": [48, 223, 256, 393, 394, 395, 468, 469], "mention": [48, 221, 223, 468, 469, 478], "crucial": [48, 51, 237], "component_typ": 48, "overflow": 48, "truncat": [48, 442, 443, 444, 449], "bolt": [49, 197, 200, 212, 214, 215, 241], "grep": [49, 210], "awk": [49, 210], "192": 49, "168": [49, 245], "pvc": [49, 210, 464, 470], "higher": [49, 211, 243, 322, 332, 396, 470], "nf": [49, 204, 316, 483], "dataload": [49, 86, 87, 122, 157, 158, 193, 234, 235], "pv": [49, 204, 210, 464, 470, 483], "vim": 49, "volum": [49, 204, 210, 218, 222, 234, 380, 381, 382, 392, 401, 446, 464, 469], "someth": [49, 213, 457], "27": [49, 219, 221, 223, 245, 307, 308, 310, 438], "claim": [49, 210, 439, 469, 470], "emptydir": [49, 234], "existingclaim": 49, "replicacount": [49, 210, 470], "num": [49, 203, 212, 222, 223, 318, 469], "cypherport": [49, 210], "hiactor": [49, 51, 237], "hiactorworkernum": 49, "hiactortimeout": 49, "240000": 49, "adminservic": 50, "setuptool": 50, "debian": 51, "redhat": 51, "22": [51, 223, 245, 307, 308, 310, 319, 450, 468], "x86": 51, "seastar": 51, "incompat": [51, 408, 469], "gen_code_from_plan": 51, "physic": [51, 201, 210, 211, 237, 248, 322, 380, 381, 382, 404, 468], "graph_db": 51, "graphdb": 51, "hqps_db": 51, "http_server": 51, "httpd": 51, "dockerfil": [51, 226, 312], "openapi": [51, 194], "openapi_interact": [51, 194], "immutable_graph": 51, "rt_mutable_graph": 51, "mutable_csr": [51, 80, 101, 172], "third_parti": 51, "parti": [51, 237, 437], "gaia": [51, 237, 488], "ir": [51, 210, 211, 212, 237, 239], "submodul": [51, 312, 315, 469], "pexperiment": 51, "referenc": [51, 249], "accuraci": [51, 234, 235, 242], "establish": [51, 197, 199, 207, 470], "workspac": [51, 234], "depth": [51, 197, 212, 216, 238, 305, 317, 322, 489], "github_workspac": 51, "flex_data_dir": 51, "tmp_interactive_workspac": 51, "interactive_workspac": 51, "schema_fil": 51, "bulk_load_fil": 51, "bulk_load": [51, 157, 158, 193], "cp": [51, 210, 212, 454, 469], "glog_v": 51, "akin": 51, "hous": [51, 237, 431, 432], "temp_workspac": 51, "graph_meta": 51, "indices_lock": 51, "job_meta": 51, "plugin_meta": 51, "plugins_lock": 51, "running_graph": 51, "subsequ": [51, 197, 210, 211, 212, 218, 222, 248, 306, 307], "hqps_admin_test": 51, "hqp": 51, "engine_config_test": 51, "mcsr": 51, "metadata_stor": 51, "reader": [51, 316], "uri": [51, 86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 214, 236, 319, 468, 490], "interv": [51, 216, 376, 408, 464], "1000": [51, 122, 221, 248, 307, 322, 454, 457, 470], "statist": [51, 86, 157, 193, 211, 218, 223, 308], "86400000": 51, "40000": 51, "gremlin_script_language_nam": 51, "antlr_gremlin_calcit": [51, 210], "interactive_serv": 51, "maintan": 51, "subprocess": 51, "statuscod": 51, "ok": [51, 193, 247], "200": [51, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 223, 305, 463, 473, 489], "invalidargu": 51, "400": [51, 86, 93, 157, 165, 463], "unsupportedoper": 51, "alreadyexist": 51, "409": 51, "notexist": 51, "404": [51, 86, 93, 157, 165], "codegenerror": 51, "uninitializedstatu": 51, "invalidschema": 51, "permissionerror": [51, 256], "403": 51, "illegaloper": 51, "internalerror": 51, "invalidimportfil": 51, "ioerror": 51, "notfound": 51, "queryfail": 51, "vertextypepairrel": [52, 59, 79], "baseedgetypevertextypepairrelationsinn": [52, 59, 79, 122, 123, 130, 150, 193], "sourcevertex": [53, 73, 121], "destinationvertex": [53, 73, 121], "xcsrparam": [53, 56, 66, 85, 98], "baseedgetypevertextypepairrelationsinnerxcsrparam": [53, 122, 124, 193], "edgestoragestrategi": 54, "sortoncompact": 54, "boolean": [54, 83, 101, 105, 216, 218, 221, 236, 248, 250, 307, 311, 322, 341, 342, 379, 381, 384, 415, 455, 468], "oemut": 54, "iemut": 54, "propertytyp": [55, 65, 84], "gsdatatyp": [55, 65, 84, 91, 96, 111, 122, 126, 136, 155, 163, 167, 182, 193], "primarykei": [56, 66, 85], "basevertextypexcsrparam": [56, 66, 85, 122, 127, 137, 156, 193], "maxvertexnum": 57, "edgemappingsourcevertexmappingsinnercolumn": [58, 70, 71, 122, 129, 141, 142, 193], "createpropertymeta": [59, 66, 122, 130, 137, 193], "storedprocedur": [60, 80, 196], "createprocedurerequest": [60, 93, 122, 131, 165, 193], "creategraphschemarequest": [60, 122, 131, 193], "vertextyp": [62, 81], "createvertextyp": [62, 122, 133, 193], "edgetyp": [62, 81, 459], "createedgetyp": [62, 122, 133, 193], "procedureid": [64, 93, 96], "srclabel": [68, 74, 470], "dstlabel": [68, 74, 470], "edgelabel": [68, 74, 221, 269], "srcprimarykeyvalu": [68, 74], "dstprimarykeyvalu": [68, 74], "typetriplet": 69, "edgemappingtypetriplet": [69, 122, 140, 193], "sourcevertexmap": 69, "edgemappingsourcevertexmappingsinn": [69, 122, 140, 193], "destinationvertexmap": 69, "edgemappingdestinationvertexmappingsinn": [69, 122, 140, 193], "columnmap": [69, 118, 122, 140, 189, 193], "typeid": [75, 79, 85, 120], "vertextypepairstatist": [75, 146], "_char": [76, 107], "fixedcharchar": [76, 107, 122, 147, 178, 193], "fixedlength": 77, "primitivetyp": [78, 96, 122, 167, 193], "stringtypestr": [78, 106, 122, 149, 177, 193], "tempor": [78, 108, 149, 179, 216, 221], "temporaltypetempor": [78, 108, 149, 179], "signed_int32": [78, 92, 96], "unsigned_int32": [78, 92], "signed_int64": [78, 92], "unsigned_int64": [78, 92], "dt_string": [78, 92], "getpropertymeta": [79, 85, 122, 150, 156, 193], "storetyp": 80, "creationtim": [80, 83], "dataupdatetim": 80, "getprocedurerespons": [80, 93, 122, 151, 165, 193], "getgraphschemarespons": [80, 86, 122, 151, 157, 193], "dataimportconfig": 80, "schemamap": [80, 86, 122, 151, 157, 193], "getvertextyp": [81, 122, 152, 193], "getedgetyp": [81, 122, 152, 193], "totalvertexcount": 82, "totaledgecount": 82, "vertextypestatist": 82, "vertexstatist": [82, 153], "edgetypestatist": 82, "edgestatist": [82, 153], "boundgraph": 83, "updatetim": 83, "propertyid": 84, "interactive_admin_endpoint": [86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 197, 199, 201], "post": [86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193, 204, 223, 236, 311, 376, 490], "graph_id": [86, 87, 93, 96, 122, 132, 157, 158, 165, 167, 173, 175, 193, 464], "getgraphrespons": [86, 103, 122, 157, 174, 193], "getallgraph": 86, "getr": [86, 87, 93], "isok": [86, 87, 93, 96, 102, 122], "println": [86, 87, 93, 96, 102, 122, 470], "getstatusmessag": [86, 87, 93, 96, 102, 122], "got": [86, 87, 93, 157], "Not": [86, 87, 93, 102, 157, 158, 165, 173, 200, 218, 457, 470], "creategraphrespons": [86, 122, 157, 193], "creategraphrequest": [86, 122, 157, 165, 193], "privat": [86, 122], "modern_graph_schema_json": 86, "fromjson": [86, 122], "rep": [86, 122], "getgraphid": [86, 122], "badrequest": [86, 157], "jobrespons": [86, 122, 157, 193], "modern_graph_bulk_loading_json": 86, "throw": [86, 93, 96, 122, 167, 310], "ioexcept": [86, 122], "getjobid": [86, 122], "deleter": [86, 93], "getgraphresponseresult": 86, "getgraphstatisticsrespons": [86, 157], "503": [86, 157], "unavail": [86, 157], "getschema": 86, "jobid": [87, 88, 122, 158], "histori": [87, 158, 221, 223, 241], "bulkload": [87, 122, 193], "graphmanagementapi": [87, 122, 193], "jobstatu": [87, 122, 158, 193], "getjobr": 87, "getjobstatu": [87, 122, 193], "getjobsr": 87, "starttim": [89, 103], "endtim": 89, "procedure_id": [93, 122, 135, 165, 193], "createprocedurerespons": [93, 122, 165, 193], "regist": [93, 96, 122, 193, 197, 198, 200, 211, 218, 236, 247, 250, 279, 464], "cppstoredprocedur": [93, 96, 167], "cypherstoredprocedur": [93, 96, 167], "testprocedur": [93, 96, 122, 193], "typeenum": [93, 122], "resp": [93, 122, 157, 158, 165, 167, 173, 193], "runtimeexcept": [93, 122], "bad": [93, 165], "listr": 93, "updateprocedurerequest": [93, 122, 165, 193], "setdescript": 93, "updater": 93, "querynam": 95, "typedvalu": [95, 96, 122, 166, 167, 193], "attempt": [96, 167, 207, 210, 240, 241, 244, 457], "irresult": 96, "collectiveresult": [96, 122, 167, 193], "proto": [96, 167, 247, 267, 292], "creation": [96, 167, 226, 307, 381], "apicli": [96, 464], "apiexcept": 96, "queryrequest": [96, 122, 167, 193], "setquerynam": 96, "addargumentsitem": 96, "primitivetypeenum": 96, "queryr": 96, "bodi": [96, 167, 311, 315, 423], "plain": [96, 167, 242], "exit": [96, 222, 234, 248, 488], "byte": [96, 216, 248, 256, 316], "loadingconfig": 97, "schemamappingloadingconfig": [97, 122, 168, 193], "schemamappingloadingconfigxcsrparam": [98, 169], "schemamappingloadingconfigdatasourc": [98, 169], "importopt": 98, "schemamappingloadingconfigformat": [98, 122, 169, 193], "odp": [99, 202, 306], "buildcsrinmem": 101, "usemmapvector": 101, "metric": [102, 173, 242, 404, 405, 406, 407, 408], "servicestatu": [102, 122, 173, 193], "startservicerequest": [102, 122, 173, 193], "boltport": 103, "hqpsport": 103, "gremlinport": [103, 210], "longtext": [107, 122, 193], "varchar": [107, 122, 193], "varcharvarchar": [107, 114, 122, 178, 185, 193], "maxlength": 115, "vertexrequest": [117, 122, 188, 193], "edgerequest": [117, 122, 188, 193], "primarykeyvalu": 119, "gradl": 122, "ossrh": 122, "127": [122, 193, 197, 199, 201, 212, 245, 470], "interactive_stored_proc_endpoint": [122, 193, 197, 199, 201], "interactive_cypher_endpoint": [122, 193, 197, 199, 201], "neo4j": [122, 193, 196, 198, 199, 200, 209, 210, 212, 213, 214, 215, 216, 239, 244, 245, 320, 468], "gettingstart": [122, 200], "neo4jsess": 122, "getneo4jsess": [122, 193, 197, 201], "tostr": [122, 247, 471], "persson": [122, 193], "test_graph_schema_json": 122, "creategraph": [122, 193], "programmat": [122, 193], "reprens": 122, "replas": 122, "reop": 122, "test_graph_bulk_loading_json": 122, "getstatu": 122, "statusenum": 122, "sleep": [122, 193, 317], "catch": [122, 470], "interruptedexcept": 122, "printstacktrac": 122, "infom": 122, "complelet": [122, 193], "defini": 122, "createprocedur": [122, 193], "procnam": 122, "invokd": 122, "term": [122, 193, 198, 227], "moment": [122, 193, 216, 252, 470], "startservic": [122, 193], "startservicerespons": 122, "starservic": 122, "gremlincli": 122, "getgremlincli": 122, "deletegraphrespons": 122, "deletegraph": [122, 193], "five": [122, 193], "categori": [122, 193, 216, 221, 227, 229, 230, 238, 242, 317], "proceduremanagementapi": [122, 193], "jobmanagementapi": [122, 193], "servicemanagementapi": [122, 193], "queryserviceapi": [122, 193], "getgraphmeta": [122, 193], "getgraphschema": [122, 193], "listgraph": [122, 193], "canceljob": [122, 193], "getjobbyid": [122, 193], "listjob": [122, 193], "deleteprocedur": [122, 193], "getprocedur": [122, 193], "listprocedur": [122, 193], "updateprocedur": [122, 193], "getservicestatu": [122, 193], "restartservic": [122, 193], "stopservic": [122, 193], "callprocedur": [122, 193], "callprocedureoncurrentgraph": [122, 193], "baseedgetyp": [122, 193], "basepropertymeta": [122, 193], "basevertextyp": [122, 193], "edgedata": [122, 193], "fixedchar": [122, 193], "keyvalu": [122, 193], "propertyarrai": [122, 193], "storedproceduremeta": [122, 193], "stringtyp": [122, 193], "temporaltyp": [122, 193], "timestamptyp": [122, 193], "vertexdata": [122, 193], "authent": [122, 193, 212, 214, 243, 470], "gs_interact": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 201], "base_edge_typ": 123, "base_edge_type_inst": 123, "from_json": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "to_json": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "base_edge_type_dict": 123, "to_dict": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "base_edge_type_from_dict": 123, "from_dict": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "back": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 223, 226, 232, 315, 469, 477], "base_edge_type_vertex_type_pair_relations_inn": 124, "base_edge_type_vertex_type_pair_relations_inner_inst": 124, "base_edge_type_vertex_type_pair_relations_inner_dict": 124, "base_edge_type_vertex_type_pair_relations_inner_from_dict": 124, "sort_on_compact": 125, "oe_mut": 125, "ie_mut": 125, "base_edge_type_vertex_type_pair_relations_inner_x_csr_param": 125, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_inst": 125, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_dict": 125, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_from_dict": 125, "base_property_meta": 126, "base_property_meta_inst": 126, "base_property_meta_dict": 126, "base_property_meta_from_dict": 126, "base_vertex_typ": 127, "base_vertex_type_inst": 127, "base_vertex_type_dict": 127, "base_vertex_type_from_dict": 127, "base_vertex_type_x_csr_param": 128, "base_vertex_type_x_csr_params_inst": 128, "base_vertex_type_x_csr_params_dict": 128, "base_vertex_type_x_csr_params_from_dict": 128, "var_properti": [129, 141, 142], "column_mapping_inst": 129, "column_mapping_dict": 129, "column_mapping_from_dict": 129, "create_edge_typ": 130, "create_edge_type_inst": 130, "create_edge_type_dict": 130, "create_edge_type_from_dict": 130, "stored_procedur": [131, 151], "var_schema": [131, 151], "create_graph_request": [131, 157, 165, 193], "create_graph_request_inst": 131, "create_graph_request_dict": 131, "create_graph_request_from_dict": 131, "create_graph_respons": 132, "create_graph_response_inst": 132, "create_graph_response_dict": 132, "create_graph_response_from_dict": 132, "create_graph_schema_request": 133, "create_graph_schema_request_inst": 133, "create_graph_schema_request_dict": 133, "create_graph_schema_request_from_dict": 133, "create_procedure_request": [134, 165], "create_procedure_request_inst": 134, "create_procedure_request_dict": 134, "create_procedure_request_from_dict": 134, "create_procedure_respons": 135, "create_procedure_response_inst": 135, "create_procedure_response_dict": 135, "create_procedure_response_from_dict": 135, "create_property_meta": 136, "create_property_meta_inst": 136, "create_property_meta_dict": 136, "create_property_meta_from_dict": 136, "create_vertex_typ": 137, "create_vertex_type_inst": 137, "create_vertex_type_dict": 137, "create_vertex_type_from_dict": 137, "date_typ": 138, "date_type_inst": 138, "date_type_dict": 138, "date_type_from_dict": 138, "src_label": [139, 145, 210, 236, 319, 460, 464, 470, 471, 484, 485], "dst_label": [139, 145, 210, 236, 319, 460, 464, 470, 471, 484, 485], "src_primary_key_valu": [139, 145], "dst_primary_key_valu": [139, 145], "modelproperti": [139, 145, 187, 190, 193], "edge_data": [139, 282, 472], "edge_data_inst": 139, "edge_data_dict": 139, "edge_data_from_dict": 139, "edge_mapping_inst": 140, "edge_mapping_dict": 140, "edge_mapping_from_dict": 140, "edge_mapping_destination_vertex_mappings_inn": 141, "edge_mapping_destination_vertex_mappings_inner_inst": 141, "edge_mapping_destination_vertex_mappings_inner_dict": 141, "edge_mapping_destination_vertex_mappings_inner_from_dict": 141, "edge_mapping_source_vertex_mappings_inn": 142, "edge_mapping_source_vertex_mappings_inner_inst": 142, "edge_mapping_source_vertex_mappings_inner_dict": 142, "edge_mapping_source_vertex_mappings_inner_from_dict": 142, "edge_mapping_source_vertex_mappings_inner_column": 143, "edge_mapping_source_vertex_mappings_inner_column_inst": 143, "edge_mapping_source_vertex_mappings_inner_column_dict": 143, "edge_mapping_source_vertex_mappings_inner_column_from_dict": 143, "edge_mapping_type_triplet": 144, "edge_mapping_type_triplet_inst": 144, "edge_mapping_type_triplet_dict": 144, "edge_mapping_type_triplet_from_dict": 144, "edge_request": [145, 188], "edge_request_inst": 145, "edge_request_dict": 145, "edge_request_from_dict": 145, "type_id": [146, 150, 156, 191], "vertex_type_pair_statist": [146, 192], "edge_statist": 146, "edge_statistics_inst": 146, "edge_statistics_dict": 146, "edge_statistics_from_dict": 146, "fixed_char_inst": 147, "fixed_char_dict": 147, "fixed_char_from_dict": 147, "fixed_char_char": 148, "fixed_char_char_inst": 148, "fixed_char_char_dict": 148, "fixed_char_char_from_dict": 148, "gs_data_typ": 149, "gs_data_type_inst": 149, "gs_data_type_dict": 149, "gs_data_type_from_dict": 149, "get_edge_typ": 150, "get_edge_type_inst": 150, "get_edge_type_dict": 150, "get_edge_type_from_dict": 150, "store_typ": 151, "creation_tim": [151, 154], "data_update_tim": 151, "data_import_config": 151, "get_graph_respons": 151, "get_graph_response_inst": 151, "get_graph_response_dict": 151, "get_graph_response_from_dict": 151, "get_graph_schema_respons": 152, "get_graph_schema_response_inst": 152, "get_graph_schema_response_dict": 152, "get_graph_schema_response_from_dict": 152, "total_vertex_count": 153, "total_edge_count": 153, "vertex_type_statist": 153, "edge_type_statist": 153, "get_graph_statistics_respons": 153, "get_graph_statistics_response_inst": 153, "get_graph_statistics_response_dict": 153, "get_graph_statistics_response_from_dict": 153, "bound_graph": 154, "update_tim": 154, "get_procedure_respons": 154, "get_procedure_response_inst": 154, "get_procedure_response_dict": 154, "get_procedure_response_from_dict": 154, "property_id": [155, 250], "get_property_meta": 155, "get_property_meta_inst": 155, "get_property_meta_dict": 155, "get_property_meta_from_dict": 155, "get_vertex_typ": 156, "get_vertex_type_inst": 156, "get_vertex_type_dict": 156, "get_vertex_type_from_dict": 156, "create_graph": [157, 165, 193], "test_graph_def": [157, 165, 193], "assert": [157, 158, 165, 167, 173, 193, 222, 248, 469], "is_ok": [157, 158, 165, 167, 173, 193], "get_valu": [157, 158, 165, 167, 173, 193], "delete_graph": [157, 193], "get_graph": 157, "get_graph_meta": 157, "get_graph_statist": 157, "get_graph_schema": 157, "list_graph": 157, "schema_map": [157, 168], "test_graph_datasourc": [157, 193], "bulk_load_request": [157, 158, 193], "cancel_job": 158, "loading_resp": 158, "get_job": [158, 193], "list_job": 158, "job_respons": 159, "job_response_inst": 159, "job_response_dict": 159, "job_response_from_dict": 159, "start_tim": [160, 174], "end_tim": 160, "job_statu": 160, "job_status_inst": 160, "job_status_dict": 160, "job_status_from_dict": 160, "long_text_inst": 161, "long_text_dict": 161, "long_text_from_dict": 161, "model_properti": 162, "model_property_inst": 162, "model_property_dict": 162, "model_property_from_dict": 162, "parameter_inst": 163, "parameter_dict": 163, "parameter_from_dict": 163, "primitive_type_inst": 164, "primitive_type_dict": 164, "primitive_type_from_dict": 164, "create_procedur": [165, 193], "create_proc_request": [165, 193], "test_procedur": [165, 193, 197, 201], "proc_id": [165, 167], "delete_procedur": 165, "get_procedur": 165, "list_procedur": 165, "update_procedur": 165, "update_procedure_request": [165, 183], "update_proc_req": 165, "proc": [165, 198, 409, 410, 414, 415, 456], "query_nam": [166, 167], "query_request": 166, "query_request_inst": 166, "query_request_dict": 166, "query_request_from_dict": 166, "call_procedur": 167, "req": [167, 315], "call_procedure_curr": 167, "schema_mapping_inst": 168, "schema_mapping_dict": 168, "schema_mapping_from_dict": 168, "schema_mapping_loading_config": 169, "schema_mapping_loading_config_inst": 169, "schema_mapping_loading_config_dict": 169, "schema_mapping_loading_config_from_dict": 169, "schema_mapping_loading_config_data_sourc": 170, "schema_mapping_loading_config_data_source_inst": 170, "schema_mapping_loading_config_data_source_dict": 170, "schema_mapping_loading_config_data_source_from_dict": 170, "schema_mapping_loading_config_format": 171, "schema_mapping_loading_config_format_inst": 171, "schema_mapping_loading_config_format_dict": 171, "schema_mapping_loading_config_format_from_dict": 171, "schema_mapping_loading_config_x_csr_param": 172, "schema_mapping_loading_config_x_csr_params_inst": 172, "schema_mapping_loading_config_x_csr_params_dict": 172, "schema_mapping_loading_config_x_csr_params_from_dict": 172, "get_service_statu": 173, "restart_servic": 173, "start_servic": [173, 193], "start_service_request": [173, 175, 193], "stop_servic": [173, 193], "stop_r": 173, "bolt_port": 174, "hqps_port": 174, "gremlin_port": [174, 470], "service_statu": 174, "service_status_inst": 174, "service_status_dict": 174, "service_status_from_dict": 174, "start_service_request_inst": 175, "start_service_request_dict": 175, "start_service_request_from_dict": 175, "stored_procedure_meta": 176, "stored_procedure_meta_inst": 176, "stored_procedure_meta_dict": 176, "stored_procedure_meta_from_dict": 176, "string_typ": 177, "string_type_inst": 177, "string_type_dict": 177, "string_type_from_dict": 177, "string_type_str": 178, "string_type_string_inst": 178, "string_type_string_dict": 178, "string_type_string_from_dict": 178, "temporal_typ": 179, "temporal_type_inst": 179, "temporal_type_dict": 179, "temporal_type_from_dict": 179, "temporal_type_tempor": 180, "temporal_type_temporal_inst": 180, "temporal_type_temporal_dict": 180, "temporal_type_temporal_from_dict": 180, "time_stamp_typ": 181, "time_stamp_type_inst": 181, "time_stamp_type_dict": 181, "time_stamp_type_from_dict": 181, "typed_valu": 182, "typed_value_inst": 182, "typed_value_dict": 182, "typed_value_from_dict": 182, "update_procedure_request_inst": 183, "update_procedure_request_dict": 183, "update_procedure_request_from_dict": 183, "file_path": 184, "upload_file_respons": 184, "upload_file_response_inst": 184, "upload_file_response_dict": 184, "upload_file_response_from_dict": 184, "var_char_inst": 185, "var_char_dict": 185, "var_char_from_dict": 185, "var_char_var_char": 186, "var_char_var_char_inst": 186, "var_char_var_char_dict": 186, "var_char_var_char_from_dict": 186, "vertex_data_inst": 187, "vertex_data_dict": 187, "vertex_data_from_dict": 187, "vertex_request": [188, 190], "vertex_edge_request": 188, "vertex_edge_request_inst": 188, "vertex_edge_request_dict": 188, "vertex_edge_request_from_dict": 188, "vertex_mapping_inst": 189, "vertex_mapping_dict": 189, "vertex_mapping_from_dict": 189, "primary_key_valu": 190, "vertex_request_inst": 190, "vertex_request_dict": 190, "vertex_request_from_dict": 190, "vertex_statist": 191, "vertex_statistics_inst": 191, "vertex_statistics_dict": 191, "vertex_statistics_from_dict": 191, "vertex_type_pair_statistics_inst": 192, "vertex_type_pair_statistics_dict": 192, "vertex_type_pair_statistics_from_dict": 192, "assist": [193, 212, 217, 240], "har": 193, "isol": [193, 219, 322, 418, 470], "build_proto": 193, "sudo": [193, 312, 481, 482], "pytest": 193, "graph_nam": [193, 212], "dictionali": 193, "pyyaml": [193, 481], "yaml_str": 193, "python_dict": 193, "safe_load": 193, "afterward": 193, "interpret": [193, 207, 237, 322], "elif": [193, 317], "rais": [193, 204, 211, 248, 256, 258, 292, 304, 311, 319, 320, 322, 328, 337, 341, 342, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 396, 398, 401, 402, 403, 414, 417, 449, 452, 453, 457, 460, 464], "uncom": 193, "proc_nam": 193, "forbid": 193, "getgraphstatist": 193, "stub": [194, 245, 251, 253, 386, 414, 417], "intric": [196, 223], "inspir": [196, 252, 457], "empow": [196, 217, 224, 241], "craft": [196, 200, 201], "skeleton": [196, 425, 428, 442, 443], "param_nam": [196, 200], "procedure_nam": 196, "come": [196, 211, 215, 223, 226, 236, 238, 239, 242, 243, 245, 308, 423, 460], "till": [196, 315, 464], "flexibli": [196, 226, 237, 242, 244], "123": [196, 306], "parameter": [196, 201], "personid": 196, "get_person_nam": 196, "administr": [197, 434], "graph_data": 197, "breakdown": [197, 202], "gs_interactive_default_graph": [197, 201], "th": [197, 201, 223, 309, 322, 435], "connector": [197, 200, 214, 223], "opencyph": [197, 239], "supported_cyph": [197, 200], "shutdown": [197, 234], "uninstal": [197, 204, 210, 483], "storp": 198, "sproc": 198, "stopro": 198, "storeproc": 198, "subroutin": 198, "rdbm": [198, 215], "wikipedia": [198, 240, 248, 419, 423, 424, 425, 426, 428, 429, 430, 436, 437, 438, 439, 441, 442, 443, 444, 450], "sole": [199, 215, 216], "theori": [199, 230, 309, 317], "arm64": 199, "mac": [199, 252, 482, 484], "installt": 199, "apiserv": 199, "streamlin": [199, 218, 221], "screen": [199, 472], "coordinator_port": 199, "expos": [199, 219, 225, 309, 320, 464, 474], "secur": [199, 227, 242, 243], "firewal": 199, "concurr": [200, 202, 237, 307], "impress": [200, 202], "Its": [200, 202, 204, 239, 436, 469], "timefram": [200, 202], "emphas": [200, 202, 244], "stand": [200, 244, 309, 310, 469], "shoulder": 200, "pivot": 200, "pillar": 200, "qp": [200, 210, 223, 243, 470], "snb": [200, 223, 236, 485, 490], "180": 200, "87": [200, 245, 448], "op": [200, 249, 259, 261, 262, 263, 264, 266, 267, 269, 271, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 291, 292, 315, 457, 461, 464], "boast": 200, "highlight": [200, 216, 237, 241], "laid": 200, "triumph": 200, "ten": [200, 240, 244, 309], "thousand": 200, "swiftli": 200, "versatil": [200, 218, 243, 469], "expans": [200, 241, 242, 314, 488], "prowess": 200, "prime": [200, 401, 403], "gql": [200, 211, 237, 244], "scalabl": [200, 210, 222, 240, 241, 242, 243, 244, 454], "possess": 200, "larger": [200, 219, 223, 233, 404], "massiv": [200, 211, 241], "too": [200, 210, 223, 244, 307, 376, 457], "offload": [200, 470], "excess": 200, "slave": 200, "constraint": [200, 216, 223, 224, 241], "portion": [200, 223, 240, 241, 249, 319], "occurr": [200, 215, 241], "ddl": 200, "acid": [200, 243], "movi": [201, 202, 239, 307], "personnam": 201, "softwareid": 201, "softwarenam": 201, "taken": [201, 457], "account": [201, 211, 241, 455, 488], "marko": [201, 219, 221, 223], "solid": [202, 425, 442, 443], "prerequisit": 202, "destroi": 202, "complic": [202, 207, 211, 223, 249], "entiti": [202, 218, 219, 223, 233, 238, 242, 306], "helm": [202, 204, 209, 210, 470, 481, 483], "\u6807\u7b7e": 203, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 203, "\u5c5e\u6027": [203, 488, 490], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 203, "\u539f\u59cbid": 203, "oid": [203, 247, 249, 250], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 203, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 203, "\u5b50\u56feid": 203, "fid": [203, 247, 250, 282, 466], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 203, "\u5206\u533a\u5668": 203, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 203, "\u7684\u6620\u5c04": 203, "\u5b50\u56fe": 203, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 203, "\u5b58\u50a8\u4e86\u9876\u70b9": 203, "\u8fb9": [203, 480], "\u9876\u70b9\u6570\u636e": 203, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 203, "\u5185\u90e8\u70b9": 203, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 203, "\u5916\u90e8\u70b9": 203, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 203, "\u672c\u5730id": 203, "lid": [203, 247, 282], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 203, "\u5168\u5c40id": 203, "gid": [203, 247, 282], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 203, "\u88abfragment\u5171\u8bc6": 203, "\u7528\u4e8e\u5b58\u50a8gid": 203, "oid\u7684\u6620\u5c04\u5173\u7cfb": 203, "\u7684\u8282\u70b9": 203, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 203, "gid\u7f16\u7801": 203, "\u5176\u4e2d": [203, 480, 485], "\u548c": [203, 311, 480, 482, 483, 484, 485, 487, 488, 489, 490], "\u5171\u540c\u7ec4\u6210": 203, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 203, "\u7684\u9876\u70b9": 203, "\u5e8f\u53f7": 203, "lid\u7f16\u7801": 203, "\u586b\u5145": 203, "\u603b\u662f": 203, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 203, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 203, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 203, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 203, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 203, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 203, "\u8fb9\u6587\u4ef6": 203, "\u5f97\u5230\u591a\u4e2avertex": 203, "\u548cedg": 203, "etabl": 203, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 203, "\u5206\u7ec4": 203, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 203, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 203, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 203, "\u8fb9\u8868": 203, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 203, "partial_v_t": 203, "partial_e_t": 203, "table\u5305\u542boid": 203, "table\u5305\u62ecsrc\u548cdst\u7684oid": 203, "\u8bbf\u95eevtable\u7684oid\u5217": 203, "\u6839\u636eoid\u67e5\u8be2partit": 203, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 203, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 203, "gather\u64cd\u4f5c": 203, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 203, "\u6839\u636efrag\u6570\u91cf": 203, "label\u6570\u91cf\u548c\u5168\u90e8oid": 203, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 203, "fid_t": [203, 247], "fnum_": 203, "label_id_t": [203, 247], "label_num_": 203, "hashmapbuild": 203, "cur_gid": 203, "id_parser_": 203, "generateid": 203, "\u8d77\u59cbgid": 203, "vnum": 203, "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 203, "\u751f\u6210gid": 203, "emplac": 203, "getview": 203, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 203, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 203, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 203, "\u6839\u636epartitioner\u83b7\u53d6fid": 203, "\u6839\u636efid": 203, "id\u548coid\u67e5\u8be2gid": 203, "\u751f\u6210gid\u6570\u7ec4": 203, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 203, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 203, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 203, "\u5bf9etable\u6267\u884cshuffl": 203, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 203, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 203, "\u5904\u7406\u9876\u70b9": 203, "\u521d\u59cb\u5316id": 203, "parser": [203, 211, 234], "\u521d\u59cb\u5316ivnum": 203, "ovnum\u548ctvnum\u6570\u7ec4": 203, "\u6309\u7167vertex": 203, "label\u5206\u7ec4": 203, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 203, "\u5411vertex": 203, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 203, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 203, "\u5c06vertex": 203, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 203, "vid_parser_": 203, "vertex_label_num_": 203, "resiz": 203, "ivnums_": 203, "ovnums_": 203, "tvnums_": 203, "combinechunk": 203, "default_memory_pool": 203, "vm_ptr_": 203, "getinnervertexs": [203, 247], "fid_": 203, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 203, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 203, "\u901a\u8fc7src": 203, "gid\u5217\u548cdst": 203, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 203, "\u5e76\u6309\u7167vertex": 203, "edge_t": [203, 306, 317], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 203, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 203, "collect_outer_vertic": 203, "dynamic_pointer_cast": [203, 471], "converttoarrowtyp": [203, 247], "arraytyp": [203, 247], "chunk": [203, 292, 319, 468], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 203, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 203, "\u5916\u90e8\u70b9\u7684lid\u7531label": 203, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 203, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 203, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 203, "ovg2l_maps_": 203, "ovgid_lists_": 203, "cur_list": 203, "collected_ovgids_": 203, "\u6392\u5e8fgid": 203, "cur_map": 203, "buildertyp": 203, "vec_build": 203, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 203, "\u5176\u4e2dfid\u4e3a0": 203, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 203, "cur_id": 203, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 203, "append": [203, 223, 232, 233, 234, 235, 238, 250, 305, 316, 317, 388, 451, 484, 489], "cur_list_length": 203, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 203, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 203, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 203, "\u5220\u9664edg": 203, "table\u7684src\u5217\u548cdst\u5217": 203, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 203, "generate_local_id_list": 203, "gid_list": 203, "lid_list": 203, "vec": 203, "getfid": 203, "\u751f\u6210\u5185\u90e8\u70b9lid": 203, "getlabelid": 203, "getoffset": 203, "\u67e5\u8be2g2l": 203, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 203, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 203, "edge_src_": 203, "edge_dst_": 203, "table\u7684src\u5217\u548cgid\u5217": 203, "\u53ea\u4fdd\u7559\u5c5e\u6027": 203, "tmp_table0": 203, "removecolumn": 203, "\u6784\u5efacsr": 203, "\u5bf9\u4e8e\u6709\u5411\u56fe": 203, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 203, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 203, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 203, "\u6784\u5efarow": 203, "offset\u6570\u7ec4": 203, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 203, "\u4f7f\u7528row": 203, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 203, "\u586b\u5145dst": 203, "lid\u548ceid\u5230nbr": 203, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 203, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 203, "generate_directed_csr": 203, "vid_array_t": [203, 247], "src_list": 203, "dst_list": 203, "fixedsizebinaryarrai": 203, "int64arrai": 203, "edge_offset": 203, "actual_edge_num": 203, "v_label": [203, 247, 466], "edge_num": [203, 282, 484, 488], "src_list_ptr": 203, "raw_valu": 203, "dst_list_ptr": 203, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 203, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 203, "tvnum": 203, "offset_vec": 203, "degree_vec": 203, "int64build": 203, "podarraybuild": 203, "nbr_unit_t": [203, 247], "edge_build": 203, "v_offset": 203, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 203, "ptr": 203, "mutablepoint": 203, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 203, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 203, "vid": [203, 247, 319], "eid_t": [203, 247], "\u66f4\u65b0offset": 203, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 203, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 203, "offsets_ptr": 203, "lh": 203, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 203, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 203, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 203, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 203, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 203, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 203, "lid\u548ceid": 203, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 203, "\u5c01\u88c5": 203, "seal": [203, 226, 242], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 203, "ovgid\u548cg2l_map\u540e": 203, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 203, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 203, "\u4e5f\u5c31\u662f\u8bf4": [203, 481], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 203, "\u5f53\u524dfragment": 203, "fragment\u603b\u6570": 203, "directed_": 203, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 203, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 203, "edge_label_num_": 203, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 203, "propertygraphschema": 203, "schema_": 203, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 203, "\u9876\u70b9\u5c5e\u6027\u8868": 203, "\u4e0d\u5305\u542bid\u5217": 203, "\u5916\u90e8\u70b9gid": 203, "gid\u5230lid\u6620\u5c04": 203, "\u8fb9\u5c5e\u6027": 203, "csr\u7ed3\u6784\u7684column": 203, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 203, "csr\u7ed3\u6784\u7684row": 203, "vertex_map_t": [203, 247], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 203, "edge_tables_columns_": 203, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 203, "flatten_edge_tables_columns_": 203, "\u540c\u4e0a": 203, "vertex_tables_columns_": 203, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 203, "ie_ptr_lists_": 203, "oe_ptr_lists_": 203, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 203, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 203, "\u4e5f\u5c31\u662fcolumn": 203, "index\u7684\u8d77\u59cb\u5730\u5740": 203, "ie_offsets_ptr_lists_": 203, "oe_offsets_ptr_lists_": 203, "\u51fa\u8fb9\u7684row": 203, "offset\u8d77\u59cb\u5730\u5740": 203, "offset\u7684\u8d77\u59cb\u5730\u5740": 203, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 203, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 203, "\u76ee\u7684\u9876\u70b9fid": 203, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 203, "idst_": 203, "odst_": 203, "iodst_": 203, "idoffset_": 203, "odoffset_": 203, "iodoffset_": 203, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 203, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 203, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 203, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 203, "id\u548c\u9876\u70b9\u5e8f\u53f7": 203, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 203, "ivnum": 203, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 203, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 203, "vertex_range_t": [203, 247], "label_id": [203, 247, 249, 250, 282], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 203, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 203, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 203, "\u5c5e\u6027id": 203, "\u5217\u53f7": 203, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 203, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 203, "\u884c\u53f7": 203, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 203, "getdata": [203, 247], "prop_id_t": [203, 247], "prop_id": 203, "property_graph_util": [203, 247], "valuegett": 203, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 203, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 203, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 203, "adj_list_t": [203, 247], "e_label": [203, 247], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 203, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 203, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 203, "offset_arrai": 203, "\u8bbf\u95eerow": 203, "oe": 203, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 203, "\u751f\u6210adjlist\u5bf9\u8c61": 203, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 203, "\u7ed3\u675f\u5730\u5740": 203, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 203, "\u548c\u51fa\u8fb9\u540c\u7406": 203, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 203, "ie": 203, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 203, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 203, "\u5bf9\u5e94\u5230\u884c\u53f7": 203, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 203, "\u4f8b\u5982": [203, 480, 484, 488, 490], "\u83b7\u53d6edg": 203, "struct": [203, 247, 380, 413], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 203, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 203, "edata_arrays_": 203, "nbr_": 203, "8g": [204, 234], "18": [204, 213, 223, 245, 307, 308, 310, 319, 322, 380, 429, 434, 438, 440, 443, 449, 468, 480, 483, 487], "silent": [204, 457, 478], "did": [204, 317], "role": [204, 211, 225, 234, 239, 307, 316, 322, 408, 446, 454, 470, 474, 478, 483], "rolebind": [204, 483], "recycl": 204, "alloc": [204, 228, 232], "seem": [204, 223], "stuck": 204, "consumpt": 204, "poor": [204, 313], "acquir": [204, 214, 222], "mostli": [204, 212, 283], "visibl": [204, 250], "cloud": [204, 243, 244, 470], "k8s_vineyard_mem": [204, 234, 304, 464, 483], "shape": [204, 229, 230, 233, 238, 247, 249, 308, 309, 310, 311, 314, 317, 321, 379, 484], "forth": 204, "smaller": [204, 223, 245, 320, 322, 378, 379, 383], "shared_mem": [204, 483], "grpcio": [204, 483], "grpc_python_build_system_openssl": [204, 483], "scipi": [204, 404, 405, 406, 407, 457, 460, 483], "anaconda": [204, 483], "workaround": 204, "openbla": 204, "tri": [204, 207, 232, 241, 386, 392], "pkgconfig": 204, "cmake_prefix_path": 204, "brew": 204, "deni": [204, 256, 483], "appear": [204, 211, 223, 248, 362, 364, 366, 369, 371, 398, 399, 457, 483], "kafka": [204, 466, 470, 483], "zookeep": [204, 483], "crashloopbackoff": [204, 483], "bitnami": [204, 483], "755": 204, "1001": [204, 470], "brutal": 204, "chmod": [204, 222, 483], "777": [204, 245, 483], "eleg": [204, 207], "grant": [204, 454], "timeout_second": [204, 304, 464, 483], "600": [204, 245, 464, 483], "enterpris": 204, "proxi": [204, 483], "properli": [204, 219], "wrong": 204, "resolut": [204, 470], "occup": 204, "hostnam": [204, 483], "no_proxi": [204, 483], "suffix": [204, 221], "flush": 204, "forcibli": 204, "contact": 204, "slack": [204, 483], "dingtalk": [204, 483], "happi": 204, "90": [206, 245], "traffic": 207, "web": [207, 248, 322, 390, 404, 409, 450], "ever": [207, 230], "amount": [207, 222, 228, 242, 309, 311, 313], "hidden": [207, 239, 240, 242, 305, 489], "attract": 207, "attent": [207, 242, 311], "difficult": [207, 306, 316, 470], "obstacl": 207, "curv": [207, 240], "hard": [207, 221, 231, 232, 418, 469], "sql": [207, 211, 218, 221, 223, 224], "deep": [207, 230, 237, 305, 310, 311, 313, 333, 336, 445, 457], "gnn": [207, 209, 227, 229, 230, 233, 237, 238, 243, 244, 305, 309, 310, 311, 313, 314, 464, 486, 489], "train": [207, 215, 227, 229, 230, 231, 237, 238, 243, 244, 246, 307, 310, 311, 313, 314, 317, 321, 464, 484, 489], "fist": 207, "mount_dataset": [207, 236], "ran": [207, 232], "p2p_network": 207, "embed": [207, 227, 233, 238, 242, 306, 313], "inter": [207, 318, 376, 379], "wherea": [207, 376, 469], "numpi": [207, 223, 227, 247, 249, 264, 275, 284, 308, 309, 311, 312, 313, 314, 317, 319, 321, 322, 449, 457, 460, 486], "datafram": [207, 236, 249, 263, 274, 284, 287, 319, 457, 480, 490], "head": [207, 210, 215, 221, 223], "creationd": [207, 221, 223, 236, 468, 485, 490], "locationip": [207, 236, 490], "browserus": [207, 223, 236, 490], "618475290625": 207, "2011": [207, 223, 390], "08": [207, 245, 322], "17t14": 207, "26": [207, 221, 223, 234, 245, 307, 308, 310, 406], "59": [207, 245], "961": 207, "210": [207, 245, 453], "17": [207, 223, 245, 307, 308, 310, 480], "chrome": [207, 223], "618475290626": 207, "17t11": 207, "570": 207, "comment_replyof_com": 207, "274877907301": 207, "274877907299": 207, "274877907302": 207, "pd": [207, 215, 236, 490], "df_v": [207, 236, 480, 490], "read_csv": [207, 215, 236, 490], "sep": [207, 215, 236, 319, 490], "df_e": [207, 236, 490], "graphcomput": [209, 488], "gl": [209, 230, 243, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318], "neural": [209, 227, 237, 238, 243, 244, 246, 305, 306, 309, 311, 313, 317], "posit": [209, 223, 242, 243, 305, 311, 322, 367, 386, 388, 389, 391, 392, 396, 404, 405, 406, 407, 408, 452, 455, 469, 472], "frequent": [209, 237, 240, 470], "groot": [209, 219, 237, 244], "graphar": [209, 319], "gart": 209, "gap": 209, "oltp": [209, 237, 239], "style": [209, 226, 237, 462], "wonder": 210, "throughout": [210, 211, 221], "smoothli": 210, "easiest": 210, "websit": [210, 240, 376], "untar": 210, "tree": [210, 239, 357, 359, 367, 387, 393, 395, 405, 406, 407, 420, 421, 458, 464, 490], "your_release_nam": 210, "littl": [210, 221, 223], "v6d_modern_load": [210, 212], "data_path": [210, 471], "store_data_path": [210, 212], "thing": [210, 311, 477], "key1": 210, "value1": [210, 236, 490], "key2": 210, "value2": 210, "token": [210, 221], "column_typ": 210, "infer": [210, 236, 242, 243], "filed1": 210, "filed2": 210, "unexpect": 210, "troubl": 210, "correspondingli": [210, 230, 414, 417], "v6d_ldbc_loader": 210, "hdf": [210, 236, 284, 316, 319, 470, 480, 490], "pegasusworkernum": 210, "pegasustimeout": 210, "durat": [210, 216, 221], "pegasusbatchs": 210, "1024": [210, 212, 221, 468], "pegasusoutputcapac": 210, "frontendquerypersecondlimit": 210, "2147483647": [210, 470], "gremlinscriptlanguagenam": 210, "antlr_gremlin_travers": 210, "inher": 211, "manufactur": 211, "upcom": 211, "sticki": 211, "shelv": 211, "intellig": [211, 223, 237, 244, 414, 417], "hybrid": [211, 469, 470], "dedupl": 211, "latenc": [211, 222, 237, 243, 244], "hope": [211, 223, 470], "trade": [211, 237, 470], "inevit": 211, "realist": [211, 449], "lengthi": 211, "verif": [211, 237], "80": [211, 245, 436], "decoupl": [211, 237, 244], "upper": [211, 221, 223, 227, 241, 376, 469], "briefli": [211, 242], "algebra": [211, 446], "edgeexpans": 211, "pathexpans": 211, "legal": 211, "predic": [211, 223], "arithmet": [211, 221, 223], "aspect": [211, 218, 223, 244], "firstli": [211, 219, 223, 236, 244], "down": [211, 218, 235, 374], "cbo": 211, "glogu": 211, "shuffl": [211, 221, 234, 235, 311, 317, 321], "plu": [211, 221, 223, 360, 432], "unaccept": 211, "end2end": 212, "sf": [212, 223], "v6d_object_id": 212, "unsur": [212, 215], "vineyard_ipc_socket": [212, 471], "gie_test_hom": 212, "rpc": [212, 234, 247, 318, 464, 470], "1234": 212, "11234": 212, "pegasu": [212, 237], "gaia_executor": 212, "log4r": [212, 470], "yml": [212, 468, 470], "usernam": [212, 470], "password": [212, 470], "auth": [212, 214, 322, 470], "3000000": [212, 213, 470], "djna": 212, "kill": [212, 464], "pkill": 212, "gcc": [213, 245, 487], "64": [213, 222, 230, 310, 311, 388, 468, 488], "chip": [213, 487], "hereaft": [213, 223, 238], "q1": [213, 215, 223, 238], "q2": [213, 223, 238], "q3": [213, 223, 238], "453": 213, "pppp": 213, "startup": 213, "3000": 213, "entr": 213, "ee": 213, "syntact": [213, 219, 224, 241], "sugar": [213, 219, 224, 241], "graphdatabas": 214, "routingcontrol": [214, 238], "print_top_10": 214, "execute_queri": 214, "routing_": [214, 238], "simpler": [214, 222, 223, 457], "nowadai": 215, "shortcom": [215, 219, 223], "gpt": 215, "materi": 215, "year": [215, 221, 223, 238, 240, 484], "mislead": 215, "hot": 215, "cold": 215, "workabl": 215, "significantli": [215, 218, 219, 240, 243], "openai": 215, "novic": 215, "dream": 215, "chamber": 215, "25": [215, 223, 229, 233, 238, 245, 307, 308, 310, 379, 381, 384, 403, 450, 484], "langchain": 215, "316": 215, "suchun": 215, "sv": 215, "nodes_set": 215, "stone_story_nodes_rel": 215, "vid_field": [215, 236, 319, 485], "edges_set": 215, "stone_story_edg": 215, "edges_sets_": 215, "src_field": [215, 236, 319, 485], "dst_field": [215, 236, 319, 485], "daughter_in_law_of_grandson_of": 215, "wife_of": 215, "api_kei": 215, "query_to_cyph": 215, "langchain_prompt": 215, "son": 215, "baoyu": 215, "jia": 215, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 215, "cypher_sent": 215, "son_of": 215, "q": [215, 222, 309, 311, 317, 399, 403], "\u8d3e\u5b9d\u7389": 215, "lastli": 215, "\u8d3e\u653f": 215, "stori": 215, "syntax": [216, 221, 230, 241, 249, 311, 457, 463], "compli": [216, 311], "unaddress": 216, "regard": [216, 223, 233, 469], "keyword": [216, 324, 325, 326, 393, 400, 404, 405, 406, 407, 408, 457, 460, 463, 464], "insensit": [216, 221], "capit": [216, 218], "lowercas": 216, "letter": [216, 451], "clariti": 216, "slightli": [216, 312, 376, 463], "elabor": [216, 244], "uint64": [216, 298, 319, 464], "byte_arrai": 216, "datetim": 216, "citizen": 216, "unsupport": [216, 219, 221], "conceiv": [216, 404], "inner_typ": 216, "mathemat": [216, 389, 391, 399, 401, 403, 412], "averag": [216, 221, 233, 238, 248, 322, 376], "avg": [216, 221, 322], "summar": [216, 223, 227], "subtract": [216, 221], "divis": [216, 221], "modulo": [216, 221, 401], "exponenti": [216, 221, 223, 242, 404, 406, 407], "multipli": [216, 221, 444], "inequ": 216, "NOT": [216, 221, 469], "sensit": [216, 449], "WITH": [216, 221], "conjunct": 216, "AND": [216, 221, 238, 250], "disjunct": 216, "OR": [216, 219, 221, 250, 457], "xor": [216, 221], "negat": [216, 221], "bitopr": 216, "scalar": [216, 315, 322], "listliter": 216, "fold": [216, 469, 488], "mapliter": 216, "elementid": [216, 221], "notabl": 216, "AS": [216, 219, 454, 458], "BY": [216, 219], "interconnect": [217, 240, 307], "tcp": [217, 234], "llm": 217, "sentenc": [217, 218, 221, 223], "tradition": 218, "accommod": [218, 244], "heurist": [218, 241, 384], "coexist": 218, "sophist": [218, 239], "cardin": 218, "primarili": [218, 223, 241, 469], "stem": 218, "atc": 218, "instrument": 218, "efficaci": 218, "alias": [218, 221], "p1": [218, 223], "p2": [218, 223], "id1": [218, 488], "id2": [218, 488], "expedit": 218, "intent": 218, "k1": [218, 221], "k2": [218, 221], "p3": 218, "retain": [218, 221, 398, 471], "constrain": 218, "simultan": [218, 238, 244, 466], "necessit": [218, 237], "lai": 218, "groundwork": 218, "conform": 218, "nonexist": 218, "kno": 218, "mismatch": 218, "websocket": [219, 488], "worth": [219, 233, 311, 319, 457], "mutat": 219, "lambda": [219, 223, 305, 311, 317, 322, 393, 404, 406, 407, 408, 489], "groovi": 219, "currenttimemilli": [219, 470, 488], "expr": [219, 221, 223, 488], "transact": [219, 237, 243, 244, 245, 466, 470, 480], "secondari": 219, "rocksdb": [219, 470], "therein": 219, "council": [219, 245], "birthdai": [219, 236, 490], "differenti": 219, "123456": [219, 227, 242, 470], "hasid": 219, "secondli": [219, 244], "path_expand": 219, "concret": [219, 248, 249, 319], "endv": [219, 223, 241, 488], "repeat": [219, 241, 242, 311, 317, 391, 396, 399, 419, 422, 488], "path_opt": [219, 221, 223, 241, 488], "pathexpand": 219, "hasstep": 219, "groupcount": [219, 488], "age_cnt": 219, "age_sum": 219, "scan": [219, 469], "propertyidvalu": 219, "moreov": [219, 221, 237, 241, 243, 469], "propertyidvalue1": 219, "propertyidvalue2": 219, "inE": [219, 311, 488], "conquer": 220, "meant": [221, 223], "vertexid": 221, "inject": 221, "edgeid": 221, "propertykei": 221, "accessor": 221, "eq": [221, 223, 241, 248, 488], "neq": [221, 488], "gt": [221, 223, 488], "lt": [221, 223, 488], "gte": [221, 223, 238, 484, 488], "lte": [221, 238, 484, 488], "outsid": [221, 488], "textp": [221, 488], "startingwith": [221, 488], "endingwith": [221, 488], "rko": 221, "ark": 221, "notstartingwith": [221, 488], "notendingwith": [221, 488], "notcontain": [221, 488], "unequ": 221, "nest": 221, "wheretravers": 221, "act": [221, 305, 454, 457, 477, 489], "startkei": 221, "alter": [221, 457], "opposit": [221, 311, 385, 432], "nottravers": 221, "duplic": [221, 223, 384, 386, 388, 457, 458], "deduplabel": 221, "composit": [221, 223], "de": [221, 232], "impli": 221, "flat": 221, "br": 221, "selectkei": 221, "roll": [221, 223, 226], "accompani": 221, "aggregatefunc": 221, "emit": [221, 223, 305, 308, 311, 317, 489], "ascend": [221, 223], "asc": [221, 223], "bias": 221, "toss": 221, "merg": [221, 311], "uniontravers": 221, "matchsent": 221, "binder": 221, "__": [221, 222, 223, 238, 311, 484, 488], "graphnam": 221, "unrol": 221, "linear": [221, 391, 393, 449, 469], "result_opt": [221, 223, 488], "all_v": [221, 223, 488], "lengthrang": 221, "keyvaluepair": 221, "end_v": [221, 223, 488], "all_v_": 221, "vada": 221, "josh": 221, "29": [221, 223, 307, 308, 310], "lop": 221, "72057594037927939": 221, "rippl": 221, "72057594037927941": 221, "35": [221, 223, 245, 307, 308, 310, 317, 384, 434, 450], "peter": 221, "ongo": 221, "liter": 221, "1l": 221, "0f": 221, "0d": 221, "2l": 221, "IN": [221, 239], "isnul": 221, "month": 221, "bitwis": 221, "startswith": 221, "ma": 221, "endswith": 221, "ko": 221, "substr": [221, 488], "preced": [221, 457, 470], "parenthes": 221, "unari": 221, "modulu": 221, "membership": [221, 457], "34": [221, 223, 245, 307, 308, 310, 450], "729": 221, "1225": 221, "841": 221, "v2": [221, 223, 229, 241, 305, 435, 489], "simplepath": [221, 488], "imper": [221, 241], "reflect": [221, 469, 477], "latter": [221, 223, 240], "mix": [221, 248, 469], "sack": [221, 488], "guidanc": 222, "gremlinpython": [222, 470], "sy": [222, 317], "gremlin_python": [222, 470], "graph_travers": 222, "driver_remote_connect": 222, "driverremoteconnect": [222, 470], "gremlin_endpoint": [222, 470], "remoteconn": [222, 470], "withremot": [222, 470], "oom": 222, "vast": 222, "mitig": 222, "risk": [222, 237], "queue": [222, 250], "graph_url": [222, 320, 470, 488], "stopiter": 222, "resultiterationbatchs": 222, "addcontactpoint": [222, 470], "resultset": [222, 470], "hasnext": 222, "dlcdn": 222, "your_endpoint_address": 222, "your_endpoint_port": 222, "classnam": [222, 488], "ser": [222, 488], "gryomessageserializerv1d0": [222, 488], "serializeresulttostr": [222, 488], "x": [222, 223, 234, 235, 245, 248, 305, 311, 317, 322, 360, 393, 401, 403, 404, 408, 432, 489], "realm": 223, "audit": 223, "toolsuit": 223, "simul": [223, 282, 317], "conclus": 223, "confid": 223, "permit": [223, 457], "3k": 223, "gremlin_queri": 223, "190376": 223, "787074": 223, "sf1": 223, "432345564227583365": 223, "504403158265495622": 223, "576460752303435306": 223, "432345564227579434": 223, "hastyp": 223, "504403158265495612": 223, "144115188075855941": 223, "issubclassof": 223, "504403158265495553": 223, "confus": [223, 405, 406, 407], "mechan": [223, 239, 242, 244, 466, 474], "belong": [223, 242, 248, 249, 250, 319, 447, 450, 457, 463, 470], "distinguish": [223, 237, 305, 306, 307, 469], "worri": 223, "havelabel": 223, "216172782113783808": 223, "216172782113784710": 223, "label1": 223, "label2": 223, "forum": 223, "72057594037936036": 223, "360287970189718653": 223, "360287970189718655": 223, "joseph": 223, "firstnam": [223, 236, 468, 485, 490], "yacin": 223, "01t00": 223, "curiou": 223, "38416": 223, "mayb": 223, "pyplot": 223, "plt": 223, "comment_cont": 223, "comment_length": 223, "histogram": 223, "hist": [223, 331], "50": [223, 245, 404, 406, 407], "607c8e": 223, "grid": [223, 450], "axi": [223, 247, 248, 249, 264, 288, 317, 463], "xlabel": 223, "ylabel": 223, "gender": [223, 236, 490], "person_gend": 223, "male": 223, "femal": 223, "male_count": 223, "female_count": 223, "216172782113784483": 223, "around": [223, 320], "432345564227569033": 223, "288230376151712472": 223, "144115188075856168": 223, "144115188075860911": 223, "72057594037934114": 223, "hasmoder": 223, "studyat": 223, "workat": 223, "islocatedin": 223, "432345564227582847": 223, "hasinterest": 223, "504403158265496227": 223, "864691128455136658": 223, "1008806316530991636": 223, "360287970189645858": 223, "en": [223, 240, 248, 419, 423, 424, 425, 426, 428, 429, 430, 436, 437, 438, 439, 441, 442, 443, 444], "e1": 223, "citi": [223, 227, 240, 242], "ispartof": 223, "countri": 223, "288230376151711797": 223, "216172782113784555": 223, "14": [223, 245, 307, 308, 310, 362, 422, 430, 442, 457], "exactli": [223, 227, 241, 248, 322, 367, 376, 390, 435, 463, 470], "432345564227569357": 223, "432345564227570524": 223, "288230376151712984": 223, "144115188075861043": 223, "replyof": [223, 468, 485], "54336": 223, "33411": 223, "360287970189700805": 223, "59465": 223, "33403": 223, "awai": 223, "ineffect": 223, "illeg": 223, "simple_path": 223, "unfold": [223, 248], "hascreat": 223, "nation": 223, "china": 223, "np": [223, 308, 311, 317, 321, 472], "market": 223, "japan": 223, "browsers_us": 223, "browser_list": 223, "firefox": 223, "safari": 223, "browser_count": 223, "autopct": 223, "1f": 223, "univers": [223, 237, 322, 355, 356, 403, 413, 445, 449], "person1": 223, "person2": 223, "university1": 223, "university2": 223, "studi": [223, 233, 238, 244, 403, 405], "216172782113784481": 223, "216172782113784279": 223, "144115188075858884": 223, "216172782113784361": 223, "216172782113784291": 223, "144115188075858879": 223, "216172782113784642": 223, "216172782113784473": 223, "216172782113784328": 223, "144115188075858700": 223, "216172782113784700": 223, "216172782113784331": 223, "144115188075860619": 223, "216172782113784375": 223, "216172782113784333": 223, "144115188075858813": 223, "216172782113784593": 223, "216172782113784688": 223, "144115188075860870": 223, "216172782113784047": 223, "216172782113784692": 223, "144115188075862429": 223, "isomorph": [223, 242, 307, 311, 436, 458], "23": [223, 307, 308, 310], "216172782113784192": 223, "216172782113784107": 223, "216172782113784171": 223, "regular": [223, 396, 401, 402, 403, 425, 430, 433, 438, 441, 442, 443, 444], "squar": [223, 384, 403, 431, 432, 435, 450], "butterfli": 223, "notion": 223, "matchanalyticsalgorithm": 223, "matchoptimizationalgorithm": 223, "216172782113784587": 223, "216172782113784363": 223, "144115188075860919": 223, "216172782113784532": 223, "216172782113784400": 223, "144115188075861858": 223, "216172782113784491": 223, "216172782113784401": 223, "144115188075858086": 223, "216172782113784598": 223, "216172782113784629": 223, "144115188075858881": 223, "216172782113783931": 223, "216172782113784657": 223, "144115188075858708": 223, "repli": 223, "pa": 223, "pb": 223, "216172782113783809": 223, "216172782113784011": 223, "360287970189640007": 223, "360287970189640008": 223, "360287970189640009": 223, "2012": [223, 416], "216172782113783812": 223, "216172782113783882": 223, "36": [223, 245, 307, 308, 310, 362, 442, 450, 482], "360287970189640010": 223, "37": [223, 245, 307, 308, 310, 322, 450, 482], "216172782113784105": 223, "38": [223, 245, 307, 308, 310, 450, 482], "41": [223, 245, 307, 308, 310, 397, 450], "43": [223, 307, 308, 310, 322, 424, 450, 480], "216172782113783814": 223, "216172782113783962": 223, "360287970189640135": 223, "52": [223, 450], "216172782113784199": 223, "54": [223, 245, 397, 450], "216172782113784038": 223, "56": [223, 245, 356, 450], "216172782113783816": 223, "216172782113784144": 223, "175": 223, "360287970189640462": 223, "72057594037927936": 223, "144115188075855872": 223, "288230376151711744": 223, "432345564227567616": 223, "504403158265495555": 223, "india": 223, "hasmemb": 223, "8248": 223, "8101": 223, "imposs": 223, "2822": 223, "tag1": 223, "tag2": 223, "37164": 223, "432": 223, "property1": 223, "property2": 223, "lastnam": [223, 236, 468, 485, 490], "donati": 223, "luigi": 223, "hall": 223, "costa": 223, "carlo": 223, "khan": 223, "meera": 223, "mahinda": 223, "eli": 223, "94": 223, "228": [223, 245], "emb": [223, 305, 489], "dom": 223, "pedro": 223, "ii": 223, "condariuc": 223, "bonomi": 223, "anyth": 223, "david": [223, 358, 369, 434], "silva": 223, "guliyev": 223, "tagclass": 223, "504403158265495552": 223, "504403158265495554": 223, "504403158265495556": 223, "504403158265495557": 223, "504403158265495558": 223, "504403158265495559": 223, "504403158265495560": 223, "504403158265495561": 223, "504403158265495562": 223, "504403158265495563": 223, "504403158265495564": 223, "504403158265495565": 223, "504403158265495566": 223, "504403158265495567": 223, "504403158265495568": 223, "504403158265495569": 223, "504403158265495570": 223, "504403158265495571": 223, "504403158265495572": 223, "504403158265495573": 223, "504403158265495574": 223, "504403158265495575": 223, "504403158265495576": 223, "504403158265495577": 223, "504403158265495578": 223, "504403158265495579": 223, "504403158265495580": 223, "504403158265495581": 223, "504403158265495582": 223, "504403158265495583": 223, "504403158265495584": 223, "504403158265495585": 223, "504403158265495586": 223, "504403158265495587": 223, "504403158265495588": 223, "504403158265495589": 223, "504403158265495590": 223, "504403158265495591": 223, "504403158265495592": 223, "504403158265495593": 223, "504403158265495594": 223, "504403158265495595": 223, "504403158265495596": 223, "504403158265495597": 223, "504403158265495598": 223, "504403158265495599": 223, "504403158265495600": 223, "504403158265495601": 223, "504403158265495602": 223, "504403158265495603": 223, "504403158265495604": 223, "504403158265495605": 223, "504403158265495606": 223, "504403158265495607": 223, "504403158265495608": 223, "504403158265495609": 223, "504403158265495610": 223, "504403158265495611": 223, "504403158265495613": 223, "504403158265495614": 223, "504403158265495615": 223, "504403158265495616": 223, "504403158265495617": 223, "504403158265495618": 223, "504403158265495619": 223, "504403158265495620": 223, "504403158265495621": 223, "q4": 223, "690": 223, "134313148716225": 223, "216172782113783811": 223, "216172782113783813": 223, "216172782113784707": 223, "216172782113784708": 223, "216172782113784709": 223, "216172782113783910": 223, "216172782113784104": 223, "216172782113784207": 223, "216172782113784318": 223, "216172782113784305": 223, "216172782113784597": 223, "216172782113784693": 223, "216172782113784018": 223, "216172782113784092": 223, "216172782113784108": 223, "216172782113784161": 223, "216172782113784162": 223, "73": [223, 245, 403], "216172782113783875": 223, "216172782113783932": 223, "216172782113784057": 223, "216172782113784068": 223, "216172782113784065": 223, "216172782113784235": 223, "216172782113784247": 223, "meaning": [223, 236, 249, 319], "449": 223, "454": [223, 245], "216172782113783810": 223, "descend": [223, 451], "216172782113784082": 223, "216172782113784169": 223, "216172782113784267": 223, "216172782113784368": 223, "216172782113784376": 223, "216172782113783938": 223, "216172782113784405": 223, "216172782113783980": 223, "216172782113783844": 223, "216172782113783901": 223, "216172782113783935": 223, "216172782113784439": 223, "216172782113784315": 223, "216172782113784374": 223, "216172782113784601": 223, "216172782113784431": 223, "216172782113783815": 223, "216172782113783817": 223, "216172782113783971": 223, "216172782113784154": 223, "216172782113784381": 223, "216172782113783933": 223, "earlier": [223, 408, 470], "216172782113783819": 223, "216172782113783826": 223, "216172782113783836": 223, "bi": [223, 240, 243], "query2": 223, "09": [223, 245], "07": [223, 232, 245, 376, 384], "hastag": 223, "count1": 223, "count2": 223, "jet_li": 223, "zhang_yim": 223, "faye_wong": 223, "tsui_hark": 223, "bruce_le": 223, "johnny_depp": 223, "tom_cruis": 223, "jackie_chan": 223, "query3": 223, "moder": 223, "infinit": [223, 418], "seriou": 223, "song": 223, "containerof": 223, "message_count": 223, "824633725780": 223, "08t02": 223, "334": [223, 245], "album": 223, "hao": 223, "wang": [223, 389, 391], "19791209300479": 223, "755914248304": 223, "02t20": 223, "03": [223, 245, 478], "344": 223, "wall": 223, "lin": 223, "lei": 223, "24189255811275": 223, "824633725045": 223, "02": [223, 384], "03t18": 223, "633": 223, "893353201782": 223, "28t23": 223, "53": [223, 245, 450], "251": 223, "1030792152809": 223, "03t09": 223, "47": [223, 234, 235, 245, 307, 308, 310], "414": 223, "chen": 223, "32985348833887": 223, "07t07": 223, "30": [223, 245, 307, 308, 310, 381, 426, 428, 433, 470, 488], "038": 223, "zhang": [223, 480], "yang": [223, 480], "15393162789707": 223, "query4": 223, "membercount": 223, "country_count": 223, "personcount": 223, "72057594037932503": 223, "72057594037932473": 223, "72057594037932489": 223, "72057594037932494": 223, "72057594037932501": 223, "72057594037934803": 223, "72057594037934804": 223, "72057594037935005": 223, "72057594037928132": 223, "72057594037935879": 223, "288230376151711799": 223, "country_top100_forums_dict": 223, "personcountforum": 223, "72057594037935702": 223, "72057594037930685": 223, "72057594037932114": 223, "72057594037934231": 223, "72057594037935703": 223, "72057594037935730": 223, "72057594037935734": 223, "72057594037932509": 223, "72057594037935707": 223, "72057594037935708": 223, "72057594037935711": 223, "72057594037935714": 223, "72057594037935719": 223, "72057594037935729": 223, "72057594037935731": 223, "72057594037935724": 223, "72057594037929560": 223, "72057594037931546": 223, "72057594037931545": 223, "72057594037932479": 223, "72057594037932485": 223, "72057594037932505": 223, "72057594037932511": 223, "72057594037935710": 223, "72057594037935722": 223, "72057594037929246": 223, "72057594037928266": 223, "72057594037935713": 223, "72057594037934308": 223, "72057594037934313": 223, "72057594037934302": 223, "72057594037930430": 223, "72057594037934303": 223, "72057594037932482": 223, "72057594037935147": 223, "72057594037935148": 223, "72057594037935157": 223, "72057594037927973": 223, "72057594037929386": 223, "72057594037934315": 223, "72057594037935720": 223, "72057594037935015": 223, "72057594037934300": 223, "72057594037930861": 223, "72057594037934319": 223, "72057594037931542": 223, "72057594037929583": 223, "72057594037933324": 223, "72057594037929182": 223, "72057594037929739": 223, "72057594037934829": 223, "72057594037935658": 223, "72057594037935660": 223, "72057594037935674": 223, "72057594037935682": 223, "72057594037935683": 223, "72057594037935672": 223, "72057594037927978": 223, "72057594037935163": 223, "72057594037935014": 223, "72057594037931544": 223, "72057594037934297": 223, "72057594037927979": 223, "72057594037932474": 223, "72057594037934384": 223, "72057594037932639": 223, "72057594037934380": 223, "72057594037935146": 223, "72057594037935152": 223, "72057594037928134": 223, "72057594037928674": 223, "72057594037929248": 223, "72057594037931240": 223, "72057594037931247": 223, "72057594037931256": 223, "72057594037930958": 223, "72057594037930963": 223, "72057594037931259": 223, "72057594037931260": 223, "72057594037931262": 223, "72057594037929365": 223, "72057594037929419": 223, "72057594037929421": 223, "72057594037929431": 223, "72057594037929434": 223, "72057594037929437": 223, "72057594037929446": 223, "72057594037929447": 223, "72057594037929449": 223, "72057594037929450": 223, "72057594037935166": 223, "72057594037929519": 223, "72057594037929451": 223, "72057594037929452": 223, "72057594037935046": 223, "72057594037932339": 223, "72057594037932481": 223, "72057594037934294": 223, "72057594037932389": 223, "72057594037932976": 223, "72057594037930870": 223, "72057594037931266": 223, "72057594037928092": 223, "72057594037928495": 223, "72057594037929510": 223, "72057594037929517": 223, "72057594037929961": 223, "72057594037929965": 223, "72057594037930242": 223, "72057594037930248": 223, "72057594037930250": 223, "72057594037930313": 223, "72057594037931547": 223, "72057594037935686": 223, "72057594037929052": 223, "72057594037929053": 223, "72057594037929055": 223, "72057594037929057": 223, "72057594037929060": 223, "72057594037934811": 223, "72057594037934813": 223, "72057594037934816": 223, "72057594037934821": 223, "72057594037934822": 223, "72057594037934823": 223, "72057594037934828": 223, "72057594037934835": 223, "72057594037934837": 223, "72057594037934975": 223, "72057594037934976": 223, "72057594037935032": 223, "72057594037935038": 223, "72057594037935045": 223, "72057594037935664": 223, "72057594037935673": 223, "72057594037935678": 223, "72057594037935685": 223, "72057594037931549": 223, "72057594037931550": 223, "72057594037931552": 223, "72057594037931554": 223, "72057594037931557": 223, "72057594037931560": 223, "72057594037931566": 223, "72057594037935671": 223, "72057594037935670": 223, "72057594037934977": 223, "72057594037931543": 223, "72057594037929518": 223, "72057594037935679": 223, "72057594037931575": 223, "72057594037932438": 223, "72057594037932878": 223, "72057594037932886": 223, "72057594037932888": 223, "72057594037927982": 223, "72057594037930526": 223, "72057594037930535": 223, "72057594037930546": 223, "72057594037930976": 223, "72057594037930536": 223, "72057594037931358": 223, "72057594037930366": 223, "72057594037931574": 223, "72057594037932435": 223, "72057594037935020": 223, "72057594037935864": 223, "72057594037933861": 223, "72057594037932440": 223, "72057594037927981": 223, "72057594037931349": 223, "72057594037931366": 223, "72057594037932885": 223, "72057594037927980": 223, "72057594037930529": 223, "72057594037930532": 223, "72057594037931304": 223, "72057594037932433": 223, "72057594037932441": 223, "72057594037934547": 223, "query11": 223, "live": 223, "startdat": 223, "enddat": 223, "216172782113784091": 223, "216172782113784250": 223, "216172782113784403": 223, "216172782113784537": 223, "216172782113784122": 223, "query14": 223, "country1": 223, "country2": 223, "subscor": 223, "award": [223, 480], "chile": 223, "case1": 223, "case2": 223, "case3": 223, "case4": 223, "216172782113784153": 223, "216172782113784100": 223, "216172782113783956": 223, "216172782113784673": 223, "216172782113784252": 223, "216172782113784263": 223, "216172782113784193": 223, "216172782113784242": 223, "216172782113784623": 223, "216172782113784498": 223, "216172782113784251": 223, "216172782113784538": 223, "216172782113784167": 223, "216172782113783864": 223, "216172782113784613": 223, "216172782113784116": 223, "faq": 224, "javasdk": [225, 474], "transit": [226, 426, 454], "magnitud": [226, 239], "superior": [226, 238, 240, 244], "rich": [226, 237, 240, 242, 307, 309], "neg": [226, 227, 305, 309, 311, 313, 317, 322, 341, 419], "gsl": [226, 227, 237, 307, 308, 309, 310, 314, 321], "gat": [226, 242, 305, 313, 489], "deepwalk": [226, 305, 489], "trans": [226, 305, 489], "pyg": [226, 227, 230, 231, 242, 243, 244], "pytorch": [226, 227, 234, 237, 242, 311, 313], "onlin": [226, 239, 242, 243, 466, 470], "fed": [226, 238, 242], "ek": 226, "aw": [226, 245, 481], "ack": 226, "failov": [226, 244], "concentr": [226, 244, 361], "industri": [227, 237, 242, 244, 245], "feasibl": [227, 242], "preprocess": [227, 317], "uniformli": [227, 394, 395, 396, 404, 405, 406, 407, 408, 452], "lookup": [227, 242, 317, 457], "topolog": [227, 307], "nn": [227, 229, 232, 233, 234, 235, 238, 242, 248, 305, 317, 484, 489], "ego": [227, 242, 313, 458, 489], "dimension": [227, 233, 238, 242, 306, 308, 309], "conv": [227, 230, 242], "edge_index": [227, 230, 234, 235], "carri": 227, "predict": [227, 233, 237, 238, 242], "asynchron": 227, "tensor": [227, 230, 247, 248, 249, 288, 305, 309, 313, 315, 461, 463], "plaintext": 227, "clearli": [227, 242], "space": [227, 242, 306, 307, 311, 322, 356, 404, 405, 406, 407, 408], "dimens": [227, 229, 232, 233, 238, 242, 306, 404, 405, 406, 407, 449, 484], "batchgraph": 227, "mini": [227, 242], "loss": [227, 229, 232, 233, 234, 235, 238, 242, 317, 484, 489], "mind": 227, "classif": [227, 231, 238, 242, 246, 305, 306, 317], "trainer": [227, 229, 232, 233, 238, 305, 484, 489], "hk": 228, "rm": [228, 317], "4g": 228, "aarch64": 229, "processor": 229, "egographsag": [229, 232, 238, 484], "349": [229, 233, 238, 484], "venu": [229, 238], "confer": [229, 238, 309, 480], "www": [229, 232, 233, 238, 322, 376, 430, 439, 442, 470, 484], "tf": [229, 230, 232, 233, 238, 305, 306, 311, 312, 317, 484, 489], "disable_v2_behavior": [229, 232, 233, 238, 484], "importerror": [229, 232, 233, 238, 484], "load_ogbn_mag": [229, 232, 233, 236, 238, 484, 490], "egosagesuperviseddataload": [229, 233, 238, 484], "localtrain": [229, 232, 233, 238, 484], "node_typ": [229, 232, 233, 238, 305, 307, 308, 311, 314, 317, 321, 484, 489], "class_num": [229, 233, 238, 305, 484, 489], "features_num": [229, 232, 233, 238, 305, 484, 489], "hops_num": [229, 233, 238, 305, 484, 489], "nbrs_num": [229, 232, 233, 238, 484], "epoch": [229, 230, 232, 233, 234, 235, 238, 305, 310, 468, 484, 489], "hidden_dim": [229, 232, 233, 238, 305, 317, 484, 489], "256": [229, 233, 234, 235, 238, 245, 386, 446, 470, 484], "in_drop_r": [229, 233, 238, 484], "learning_r": [229, 232, 233, 238, 317, 484], "reset_default_tf_graph": [229, 233, 238, 484], "act_func": [229, 233, 238, 484], "relu": [229, 233, 238, 484], "dropout": [229, 232, 233, 238, 317, 484], "train_data": [229, 232, 233, 238, 484], "mask": [229, 233, 238, 321, 484], "train_embed": [229, 233, 238, 484], "src_ego": [229, 232, 233, 238, 484], "train_label": [229, 233, 238, 484], "reduce_mean": [229, 233, 238, 305, 317, 484, 489], "sparse_softmax_cross_entropy_with_logit": [229, 233, 238, 305, 317, 484, 489], "logit": [229, 233, 238, 317, 484], "adamoptim": [229, 232, 233, 238, 317, 484], "test_embed": [229, 233, 238, 484], "test_label": [229, 233, 238, 484], "test_indic": [229, 233, 238, 484], "argmax": [229, 233, 234, 235, 238, 484], "output_typ": [229, 233, 238, 292, 461, 484], "test_acc": [229, 233, 234, 235, 238, 484], "div": [229, 233, 238, 484], "reduce_sum": [229, 233, 238, 484], "cast": [229, 233, 236, 238, 317, 469, 484], "float32": [229, 233, 234, 235, 238, 308, 317, 484], "obgn": [229, 233], "mag": [229, 233, 238, 484], "paper_featur": [229, 238, 484], "feat_": [229, 232, 233, 234, 235, 238, 484], "128": [229, 232, 233, 234, 235, 238, 317, 484], "lg": [229, 232, 233, 238, 300, 464, 478, 484], "cite": [229, 232, 233, 238, 484], "gen_label": [229, 232, 233, 238, 300, 464, 484], "val": [229, 232, 233, 238, 305, 321, 464, 484, 489], "85": [229, 232, 233, 238, 245, 248, 464, 484], "seed": [230, 305, 313, 317, 376, 379, 380, 381, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 405, 406, 407, 408, 411, 412, 413, 414, 417, 449, 452, 454], "sampler": [230, 232, 310, 313, 315], "perceptu": 230, "unsupervis": [230, 232, 246, 305, 311, 313, 314, 464], "mainstream": [230, 309, 310], "putback": 230, "outofrangeerror": [230, 310, 311, 317], "evolv": [230, 237, 470], "neighborsampl": [230, 309], "edge_weight": [230, 309, 311], "random_with_replac": 230, "topk": [230, 309, 311], "pad": [230, 309], "expand_factor": [230, 309, 314], "sparsenod": [230, 308, 309, 311], "sparseedg": [230, 308, 309, 311], "layer1": [230, 309], "layer2": [230, 309], "neighbor_sampl": [230, 309], "bui": [230, 237, 308, 309, 310, 311, 314, 317], "i2i": [230, 309, 311], "layer_nod": [230, 309], "int_attr": [230, 308, 309, 310, 314, 317], "layer_edg": [230, 309], "float_attr": [230, 308, 309, 310, 314, 317], "egograph": [230, 242, 305, 313, 489], "negativesampl": [230, 314], "node_weight": [230, 311, 314], "edge_sampl": [230, 310, 314], "negative_sampl": [230, 305, 314, 489], "neg_nod": [230, 314], "heterogen": [230, 233, 238, 240, 242, 306, 307, 308, 309, 311], "randomli": [230, 311, 376, 382, 386, 388, 397, 399, 404, 407, 412, 454], "outv": [230, 305, 309, 311, 317, 488, 489], "overs": 230, "citat": [231, 233, 234, 235, 238, 246, 317, 484], "revisit": [231, 232, 246], "ho2": 231, "with_dataset": [232, 234, 304, 464, 490], "k8s_service_typ": [232, 234, 304, 464, 484], "loadbalanc": [232, 464, 484], "k8s_image_pull_polici": [232, 234, 304, 464], "cell": [232, 450], "metainfo": 232, "obgn_mag": 232, "ogbn_mag_smal": [232, 236, 484, 490], "chose": [232, 233], "i_featur": [232, 233], "argpars": [232, 234], "tfg": 232, "egosageunsuperviseddataload": 232, "parse_arg": [232, 234], "argumentpars": [232, 234], "egosag": 232, "add_argu": [232, 234], "output_dim": [232, 305, 489], "neg_num": 232, "0001": 232, "agg_typ": 232, "drop_out": 232, "neg_sampl": 232, "temperatur": 232, "dim": [232, 234, 235, 404, 405, 406, 407], "src_emb": [232, 305, 489], "dst_emb": 232, "dst_ego": 232, "neg_dst_emb": 232, "neg_dst_ego": 232, "unsupervised_softmax_cross_entropy_loss": 232, "ogbn": [233, 234, 235, 238, 484], "academ": [233, 238, 484], "microsoft": [233, 238, 484], "institut": [233, 238, 484], "accomplish": [233, 238, 376], "word2vec": [233, 238, 484], "load_ogbn_arxiv": [234, 235], "num_server_nod": 234, "num_client_nod": 234, "ogbn_arxiv": [234, 235], "8gi": 234, "ifnotpres": [234, 464], "0a20240115": 234, "glt_graph": [234, 235], "graphlearn_torch": [234, 235], "node_featur": [234, 235], "node_label": [234, 235, 464], "edge_dir": [234, 235], "random_node_split": [234, 235], "num_val": [234, 235], "num_test": [234, 235], "num_client": [234, 235], "manifest_path": 234, "client_folder_path": 234, "kubeflow": [234, 316], "pytorchjob": 234, "torch": [234, 235], "pytorchreplicaspec": 234, "restartpolici": 234, "onfailur": 234, "imagepullpolici": 234, "node_rank": 234, "master_addr": [234, 235], "volumemount": 234, "medium": 234, "sizelimit": 234, "num_worker_replica": 234, "my_pod_nam": 234, "group_mast": 234, "valuefrom": 234, "fieldref": 234, "fieldpath": 234, "distributeddataparallel": 234, "torch_geometr": [234, 235], "glt": [234, 235], "gl_torch_graph": 234, "gltorchgraph": 234, "no_grad": [234, 235], "test_load": [234, 235], "dataset_nam": [234, 235], "eval": [234, 235, 461], "y_true": [234, 235], "enumer": [234, 235, 247], "devic": [234, 235, 245], "del": [234, 235, 319, 457], "y_pred": [234, 235], "keepdim": [234, 235], "run_client_proc": 234, "num_serv": [234, 235], "client_rank": [234, 235], "server_rank_list": 234, "training_pg_master_port": 234, "init_cli": [234, 235], "master_port": [234, 235], "server_client_master_port": [234, 235], "num_rpc_thread": [234, 235], "client_group_nam": 234, "k8s_glt_client": 234, "is_dynam": [234, 235], "current_ctx": 234, "get_context": 234, "init_process_group": 234, "gloo": 234, "world_siz": 234, "init_method": 234, "train_load": [234, 235], "distneighborload": [234, 235], "num_neighbor": [234, 235], "input_nod": [234, 235], "collect_featur": [234, 235], "to_devic": [234, 235], "worker_opt": [234, 235], "remotedistsamplingworkeropt": [234, 235], "server_rank": 234, "worker_devic": [234, 235], "worker_concurr": [234, 235], "buffer_s": [234, 235], "256mb": 234, "prefetch_s": [234, 235], "workload_typ": [234, 235], "in_channel": [234, 235], "hidden_channel": [234, 235], "num_lay": [234, 235], "out_channel": [234, 235], "device_id": 234, "adam": [234, 235], "lr": [234, 235], "001": 234, "arxiv": [234, 235, 322, 365, 380, 381, 382, 396, 449], "zero_grad": [234, 235], "log_softmax": [234, 235], "nll_loss": [234, 235], "backward": [234, 235, 242, 311, 408, 464], "03d": [234, 235], "04f": 234, "barrier": 234, "4f": [234, 235], "shutdown_cli": [234, 235], "__name__": [234, 317], "__main__": [234, 317], "supervis": [234, 238, 246, 306, 309, 317, 464, 484], "sage": 234, "9997": 234, "train_loader_master_port": 234, "9998": 234, "test_loader_master_port": 234, "9999": 234, "9001": 234, "9002": 234, "9003": 234, "9004": 234, "k8s_launch": 234, "ogb": 235, "nodeproppr": 235, "unsqueez": 235, "acc": 235, "512": [235, 311], "1gb": 235, "shut": 235, "trivial": [236, 244, 373], "bucket": [236, 464, 480], "_e": [236, 319, 466, 490], "ldbc_sampl": [236, 470, 488, 490], "person_0_0": [236, 470, 485, 490], "didn": [236, 245], "person_knows_person_0_0": [236, 470, 485, 490], "comment_0_0": [236, 485, 490], "person_likes_comment_0_0": [236, 490], "deal": [236, 240, 309], "unseen": [236, 242, 472], "person_likes_post_0_0": [236, 490], "post_0_0": [236, 490], "ndarrai": [236, 249, 264, 275, 308, 309, 311, 314, 319, 321, 457, 490], "apart": [236, 404], "comment_replyof_comment_0_0": [236, 485, 490], "col_0": [236, 490], "col_1": [236, 490], "coo": [236, 468, 490], "array_v": [236, 490], "col": [236, 490], "array_": [236, 490], "s3": [236, 319, 490], "hood": 236, "distributedli": [236, 307, 313, 315, 316, 317], "fsspec": [236, 490], "kwarg": [236, 248, 249, 256, 267, 279, 283, 284, 301, 304, 314, 319, 320, 321, 464], "ds1": [236, 490], "datafil": [236, 490], "ds2": [236, 490], "graphscope_bucket": [236, 490], "ds3": [236, 490], "9000": [236, 470, 490], "extra_conf": [236, 490], "conf1": [236, 490], "d34": [236, 490], "client_kwarg": [236, 490], "region_nam": [236, 490], "east": [236, 490], "ossf": [236, 490], "subclass": [236, 247, 457], "abstractfilesystem": [236, 490], "abstractbufferfil": 236, "_upload_chunk": [236, 490], "_initiate_upload": [236, 490], "_fetch_rang": [236, 490], "register_implement": [236, 490], "protocol_nam": [236, 490], "protocol_file_system": [236, 490], "direction": 236, "exce": [236, 415, 416], "super": [236, 248, 307, 311], "precis": [236, 242, 449], "modular": [237, 449], "rapidli": [237, 309], "seller": 237, "buyer": [237, 241], "fraudul": 237, "sell": 237, "suspici": 237, "fraud": [237, 244], "feed": [237, 300, 305, 308, 311, 317, 321, 464, 489], "webui": 237, "diversifi": 237, "ingest": [237, 470], "rapid": 237, "analyst": 237, "resembl": [237, 449, 454, 456], "olap": 237, "gen": [237, 311], "dataflow": [237, 239], "arriv": 237, "financi": 237, "billion": [237, 240, 244], "preval": 237, "miniconda": 238, "scientif": 238, "field_of_studi": [238, 484], "subject": 238, "4307": [238, 484], "n1": 238, "n2": 238, "proven": 238, "2014": [238, 322, 484], "2020": [238, 484], "ret1": [238, 484], "k_core": [238, 248, 322, 458, 480, 484], "ret2": [238, 484], "kcore": [238, 484], "downstream": [238, 311], "train_sag": 238, "130": [238, 484], "effortlessli": 238, "conduit": 238, "icde2023": 239, "sigmod2017": [239, 480, 486], "gra": 239, "ph": 239, "arallel": 239, "ngine": 239, "opensourc": 239, "raph": 239, "nalysi": 239, "elat": 239, "ransact": 239, "loos": [239, 244, 466], "mysql": [239, 466], "nutshel": [239, 466], "exploit": [239, 466], "ahead": [239, 466], "wal": [239, 466], "etriev": 239, "terfac": 239, "portabl": [239, 469], "rust": [239, 469, 470], "handler": [239, 464], "chive": 239, "guardian": 239, "galaxi": 239, "steal": 239, "tackl": [239, 240], "imbal": 239, "nvlink": 239, "acut": 239, "asymmetr": 239, "holist": 239, "innov": 239, "speedup": 239, "cncf": 239, "sandbox": 239, "soon": [239, 243, 244, 245, 308], "amplifi": 239, "dissoci": 239, "ly": 239, "dag": [239, 248, 249, 267, 319, 457, 461, 464], "laptop": 239, "loop": [239, 322, 332, 345, 384, 386, 388, 390, 396, 404, 405, 406, 407, 408, 414, 417, 457, 458, 488], "correl": [239, 322], "subtask": 239, "earli": 239, "nsdi": [239, 486], "legaci": 239, "interchang": 239, "memoiz": 239, "vldb2021": 239, "artial": 239, "ncrement": 239, "transport": 240, "protein": [240, 398], "uncov": 240, "vari": [240, 306], "unless": [240, 309, 457], "discov": 240, "discoveri": [240, 242, 464, 470], "rough": 240, "accordingli": [240, 297], "snap": 240, "stanford": [240, 448], "cs224w": 240, "constitu": 240, "bellman": [240, 322], "ford": [240, 322], "wiki": [240, 248, 419, 423, 424, 425, 426, 428, 429, 430, 436, 437, 438, 439, 441, 442, 443, 444], "s_algorithm": 240, "towardsdatasci": 240, "9bd8951e7da": 240, "road": [240, 472], "logist": 240, "deliveri": 240, "media": 240, "nontrivi": [240, 429], "steep": 240, "sought": 240, "monei": [241, 244], "launder": [241, 244], "exact": [241, 386, 388, 484], "exclud": 241, "purchas": 241, "bolder": 241, "border": 241, "sens": [241, 449, 464], "worst": 241, "embrac": 241, "grasp": 241, "drug": 242, "likelihood": 242, "biologi": 242, "valuabl": 242, "bioinformat": 242, "chemic": 242, "promis": 242, "driven": [242, 449, 469], "carefulli": 242, "rewind": 242, "stack": 242, "convolut": [242, 313], "weigh": 242, "choic": [242, 469, 470], "huge": [242, 472], "gradient": 242, "recal": 242, "f1": [242, 319], "assess": [242, 317, 434], "irregular": 242, "unstructur": 242, "pool": 242, "hardwar": [242, 473], "undergo": 242, "perceiv": 242, "maxgraph": [243, 486], "2x": 243, "excel": 243, "elast": [243, 470], "encrypt": 243, "geminigraph": [244, 245], "plato": [244, 245], "empir": 244, "enjoi": 244, "janusgraph": 244, "nebula": 244, "dbm": 244, "relaunch": [244, 470], "recoveri": 244, "coars": 244, "grain": 244, "invest": 244, "trace": [244, 248], "dgl": 244, "nebular": 244, "movement": [244, 311], "grade": 245, "r6": 245, "8xlarg": 245, "alibabacloud": 245, "ec": 245, "xl": 245, "a038f97": 245, "170e7d3": 245, "21009d6": 245, "v4": 245, "mpich": 245, "fair": 245, "huge_pag": 245, "jemalloc": 245, "o3": 245, "determinist": [245, 250, 464, 470], "cdlp": [245, 248, 480], "load_direct": 245, "load_undirected_from_direct": 245, "reformat": 245, "mark": [245, 322], "datagen": 245, "9_0": 245, "fb": 245, "62": 245, "9_1": 245, "78": [245, 376, 450], "9_2": 245, "zf": 245, "88": [245, 389, 391], "60": [245, 322, 450, 470], "61": 245, "176": [245, 413], "graph500": 245, "71": [245, 322, 394, 398, 404], "79": [245, 389, 391], "friendster": 245, "97": 245, "39": [245, 307, 308, 310, 322, 450, 480, 482], "86": 245, "57": 245, "126": [245, 390], "98": 245, "83": 245, "66": 245, "1695": 245, "2742": 245, "3600": 245, "425": 245, "55": [245, 356], "lcc": 245, "521": 245, "51": [245, 450], "296": 245, "1859": 245, "201": [245, 453], "842": 245, "68": 245, "competitor": 245, "pagerank_loc": 245, "65": 245, "72": 245, "84": 245, "63": [245, 393, 395], "gunrock": 245, "0c9a96": 245, "grout": 245, "5ce160": 245, "v7": 245, "v10": 245, "gn6v": 245, "c8g1": 245, "16xlarg": 245, "8x": 245, "16gb": 245, "nvidia": 245, "v100": 245, "gb": 245, "soc": [245, 377, 378], "livejournal1": 245, "89": 245, "9345": 245, "215": [245, 446], "560": 245, "3029": 245, "129": [245, 412], "389": 245, "155": 245, "0549": 245, "sinaweibo": 245, "1649": 245, "647": 245, "orkut": 245, "105": [245, 377, 378], "121": 245, "193": 245, "658": 245, "3201": 245, "7677": 245, "137": [245, 384], "2139": 245, "319": 245, "261": 245, "69": [245, 444, 450], "235": 245, "567": 245, "283": 245, "073": 245, "6619": 245, "45": [245, 307, 308, 310, 386], "150": 245, "87299": 245, "162": 245, "60403": 245, "9676": 245, "141": 245, "347": 245, "7772": 245, "0118": 245, "306": 245, "8618": 245, "9134": 245, "467": 245, "60801": 245, "8666": 245, "3501": 245, "870": 245, "6451": 245, "198": 245, "829": 245, "5036": 245, "229": 245, "024": 245, "483": 245, "178": 245, "5593": 245, "807": 245, "367": 245, "6946": 245, "2339": 245, "jupyt": [246, 464], "notebook": [246, 464], "jupyterlab": 246, "playground": [246, 491], "bipartit": [246, 305, 307, 363, 411, 412, 413, 445, 489], "grapeengin": 247, "vineyardserv": 247, "grapeinst": 247, "graphscopeserv": 247, "inlin": 247, "dag_fil": 247, "dagfil": 247, "rundagfil": 247, "subscrib": 247, "charg": 247, "commspec": [247, 466, 469, 471], "comm_spec": [247, 466, 469, 471], "vineyard_socket": 247, "bl": 247, "dispatchresult": 247, "onrec": 247, "commanddetail": 247, "gsobject": 247, "objectmanag": 247, "appentri": 247, "icontextwrapp": 247, "ifragmentwrapp": 247, "projector": 247, "propertygraphutil": 247, "objecttyp": 247, "putobject": 247, "obj": 247, "removeobject": 247, "getobject": [247, 470, 471], "hasobject": 247, "analyticalserv": 247, "startserv": 247, "stopserv": 247, "engineconfig": 247, "tojsonstr": 247, "vineyard_rpc_endpoint": 247, "enable_java_sdk": 247, "setcommand": 247, "enum": 247, "aggregatepolici": 247, "kpickfirst": 247, "kpickfirstnonempti": 247, "krequireconsist": 247, "kconcat": 247, "kpickfirstnonemptygraphdef": 247, "kmergegraphdef": 247, "worker_id": 247, "error_cod": 247, "set_error": 247, "has_large_data": 247, "set_graph_def": 247, "graphdefpb": 247, "graph_def": 247, "set_data": 247, "large_data": 247, "inarch": 247, "arc": 247, "aggregate_polici": 247, "fragmentwrapp": 247, "addcolumn": 247, "vdata_t": 247, "edata_t": 247, "arrowvertexmap": 247, "internaltyp": 247, "arrowprojectedfragmentbas": 247, "bareregist": 247, "internal_oid_t": 247, "property_graph_typ": 247, "eid_typ": 247, "vertexrang": [247, 250], "inner_vertices_t": 247, "outer_vertices_t": 247, "vertices_t": 247, "sub_vertices_t": 247, "nbr_t": 247, "arrow_projected_fragment_impl": 247, "compact_nbr_t": 247, "compactnbr": 247, "nbrunit": 247, "compact_adj_list_t": 247, "compactadjlist": 247, "const_adj_list_t": 247, "const_compact_adj_list_t": 247, "property_vertex_map_t": 247, "arrowprojectedvertexmap": 247, "label_id_typ": 247, "prop_id_typ": 247, "property_graph_t": 247, "eid_array_t": 247, "data_t": 247, "inner_vertex_array_t": 247, "outer_vertex_array_t": 247, "objectmeta": 247, "preparetorunapp": 247, "prepareconf": 247, "fnum": [247, 250], "vertex_prop_id": 247, "edge_prop_id": 247, "mirrorvertic": 247, "getvertex": 247, "getid": 247, "getinternalid": 247, "getfragid": 247, "typedarrai": 247, "value_typ": 247, "gid2vertex": 247, "vertex2gid": 247, "getinnerverticesnum": 247, "getouterverticesnum": 247, "getverticesnum": 247, "getedgenum": [247, 471], "getinedgenum": [247, 471], "getoutedgenum": [247, 471], "getoutgoingedgenum": 247, "getincomingedgenum": 247, "gettotalverticesnum": 247, "isinnervertex": 247, "getoutervertex": 247, "getinnervertexid": 247, "getinnervertexinternalid": 247, "getoutervertexid": 247, "getoutervertexinternalid": 247, "gid2oid": 247, "oid2gid": 247, "innervertexgid2vertex": 247, "outervertexgid2vertex": 247, "getoutervertexgid": 247, "getinnervertexgid": 247, "compact_": 247, "enable_if": 247, "getincominginnervertexadjlist": 247, "getoutgoinginnervertexadjlist": 247, "getincomingoutervertexadjlist": 247, "getoutgoingoutervertexadjlist": 247, "src_fid": 247, "dst_fid": 247, "getlocaloutdegre": 247, "getlocalindegre": 247, "destlist": 247, "iedest": 247, "oedest": 247, "ioedest": 247, "getvertexmap": 247, "get_out_edges_ptr": 247, "get_in_edges_ptr": 247, "get_oe_offsets_begin_ptr": 247, "get_oe_offsets_end_ptr": 247, "get_ie_offsets_begin_ptr": 247, "get_ie_offsets_end_ptr": 247, "get_edata_array_accessor": 247, "get_vdata_array_accessor": 247, "get_arrow_frag": 247, "vertex_map_id": 247, "local_vertex_map": [247, 471], "getoid": 247, "getgid": 247, "offset2lid": 247, "getoffsetfromlid": 247, "getlidfromgid": 247, "getfidfromgid": 247, "oid_t_": 247, "vid_t_": 247, "arrowfragmentload": 247, "efil": [247, 471], "vfile": [247, 471], "graph_info": 247, "leaf": [247, 249, 294, 322, 367, 451], "table_vec_t": 247, "loadvertexedget": 247, "loadvertext": 247, "loadedget": 247, "loadfrag": 247, "loadfragmentasfragmentgroup": 247, "addlabelstofrag": 247, "frag_id": [247, 466, 471], "adddatatoexistedvlabel": 247, "adddatatoexistedelabel": 247, "addlabelstofragmentasfragmentgroup": 247, "extendlabeldata": 247, "extend_typ": 247, "initpartition": 247, "doxygenclass": 247, "arrowfragmentappend": 247, "doxygen": 247, "runner": [247, 480], "_build": 247, "appbas": 247, "defaultmessagemanag": 247, "need_split_edg": 247, "konlyout": 247, "propertyappbas": 247, "propertymessagemanag": 247, "propertyautoappbas": 247, "propertyautomessagemanag": 247, "app_t": 247, "defaultwork": 247, "parallelenginespec": 247, "pe_spec": 247, "defaultparallelenginespec": 247, "getcontext": 247, "ostream": 247, "parallelpropertywork": 247, "parallelpropertymessagemanag": 247, "propertyautowork": 247, "pointer": 247, "appfram": 247, "creatework": 247, "deletework": 247, "lib_path": 247, "worker_handl": 247, "queryarg": 247, "query_arg": [247, 292, 461], "context_kei": 247, "frag_wrapp": 247, "functiontyp": 247, "argsnum": 247, "argsunpack": 247, "datatyp": 247, "argtypeat": 247, "defaultpropertywork": 247, "ctx_t": 247, "ctxwrapperbuild": 247, "contextwrapp": 247, "vertexpropertycontext": [247, 480], "contextbas": 247, "labeledvertexdatacontext": 247, "contextdatatyp": 247, "icolumn": 247, "get_column": 247, "get_typed_column": 247, "vertex_properti": [247, 248, 250], "properties_map": 247, "vertexdatacontextwrapp": 247, "ivertexdatacontextwrapp": 247, "fragment_wrapp": 247, "unique_ptr": 247, "tondarrai": 247, "todatafram": 247, "tovineyardtensor": 247, "tovineyarddatafram": 247, "toarrowarrai": 247, "tensorcontext": [247, 249], "set_shap": 247, "tensor_t": 247, "tensorcontextwrapp": 247, "itensorcontextwrapp": 247, "cmake_extra_opt": 248, "asset": 248, "labeled_vertex_data": 248, "dynamic_vertex_data": 248, "labeled_vertex_properti": 248, "cpp_pregel": 248, "cython_pi": 248, "cython_pregel": 248, "appdagnod": [248, 283, 289], "__init__": [248, 305, 312, 319, 320, 321, 457, 458, 460, 464, 470, 489], "bytesio": [248, 256], "is_compat": 248, "graphdagnod": [248, 260, 274, 275, 291, 298, 300, 319, 320, 464], "invalidargumenterror": [248, 464], "scannererror": 248, "incorrect": 248, "signatur": [248, 311, 457], "full_jar_path": [248, 480], "java_app_class": [248, 480], "neccessari": 248, "resouc": 248, "__call__": 248, "qualifi": [248, 480], "app_asset": [248, 260, 266], "app_nod": 248, "__del__": 248, "unload": [248, 271, 289, 291], "attribute_assortativity_coeffici": [248, 480], "assort": 248, "ref": [248, 469], "joint": [248, 414, 415, 416, 417, 458], "newman": [248, 322, 386, 388, 449], "026126": 248, "2003": [248, 322, 379, 386, 397, 405], "numeric_assortativity_coeffici": [248, 480], "analog": 248, "k_": [248, 358, 422], "rac": 248, "s_i": 248, "sum_": [248, 322, 390], "w_": [248, 322, 390], "ij": [248, 322], "k_j": 248, "valueerror": [248, 304, 319, 322, 396, 453, 464], "barrat": 248, "barth\u00e9lemi": 248, "pastor": 248, "satorra": 248, "vespignani": 248, "pna": 248, "101": [248, 486], "3747": 248, "3752": 248, "2004": [248, 411], "average_shortest_path_length": [248, 322, 458, 480], "frac": [248, 322, 332, 390], "vertexdatacontextdagnod": [248, 249], "avg_clust": [248, 480], "degree_threshold": 248, "threshold": [248, 404, 405, 406, 407], "1e9": 248, "unweight": [248, 322], "foster": 248, "grassberg": 248, "paczuski": 248, "107": [248, 410], "10815": 248, "1e": [248, 317, 322, 376], "06": [248, 322], "html": [248, 322, 406, 409, 418, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 437, 439], "gv": 248, "hits_algorithm": 248, "vertexpropertycontextdagnod": [248, 249], "is_simple_path": [248, 480], "nonempti": 248, "biject": [248, 452], "smallest": [248, 409, 429, 439], "pairwis": 248, "k_shell": [248, 480], "katz_centrality_numpi": [248, 322], "auttenu": 248, "maximun": 248, "min_progress": 248, "progress_tri": 248, "progress": [248, 401], "met": 248, "blondel": 248, "et": [248, 454], "al": [248, 454], "stat": [248, 404, 406], "mech": 248, "10008": 248, "2008": [248, 376, 399], "sotera": 248, "lpa_u2i": [248, 480], "labeledvertexpropertycontextdagnod": [248, 249], "pagerank_nx": [248, 480], "max_it": [248, 322, 376], "tol": [248, 322, 376], "solver": 248, "voterank": [248, 480], "unsign": [248, 470], "basecontextdagnod": [249, 319], "bound_app": [249, 266], "contextdagnod": 249, "to_vineyard_tensor": [249, 463, 480], "to_vineyard_datafram": [249, 463, 480], "lazi": [249, 319, 464], "sg": 249, "resultdagnod": [249, 284], "r4": [249, 472], "62586": 249, "comparis": 249, "alphabet": [249, 463], "tensorcontextdagnod": 249, "quer": 249, "labeledvertexdatacontextdagnod": 249, "label_nam": [249, 463], "column_nam": [249, 463], "labeld": 249, "context_nod": 249, "result_schema": 249, "dynamicvertexdatacontext": 249, "dag_nod": 249, "get_str": 250, "get_doubl": 250, "edge_label_id": 250, "edge_label_nam": 250, "incoming_edg": 250, "register_aggreg": 250, "pregelaggregatortyp": 250, "aggr_typ": 250, "get_aggregated_valu": 250, "get_total_vertices_num": 250, "vertex_property_num": 250, "vertex_label_nam": 250, "vertex_label_id": 250, "edge_property_num": 250, "get_vertex_label_by_id": 250, "get_vertex_label_id_by_nam": 250, "get_edge_label_by_id": 250, "get_edge_label_id_by_nam": 250, "edge_properti": 250, "get_vertex_property_id_by_nam": 250, "vertex_property_nam": [250, 469], "get_vertex_property_by_id": 250, "vertex_property_id": 250, "get_edge_property_id_by_nam": 250, "edge_property_nam": 250, "get_edge_property_by_id": 250, "edge_property_id": 250, "kboolandaggreg": 250, "kbooloraggreg": 250, "kbooloverwriteaggreg": 250, "overwritten": 250, "kdoubleminaggreg": 250, "kdoublemaxaggreg": 250, "kdoublesumaggreg": 250, "kdoubleproductaggreg": 250, "kdoubleoverwriteaggreg": 250, "kint64minaggreg": 250, "kint64maxaggreg": 250, "kint64sumaggreg": 250, "kint64productaggreg": 250, "kint64overwriteaggreg": 250, "ktextappendaggreg": 250, "kalongoutgoingedgetooutervertex": 250, "kalongincomingedgetooutervertex": 250, "kalongedgetooutervertex": 250, "get_total_nodes_num": 250, "get_nodes_num": 250, "get_inner_nodes_num": 250, "get_outer_nodes_num": 250, "outer_nod": 250, "get_node_fid": 250, "is_inner_nod": 250, "is_outer_nod": 250, "get_nod": [250, 308], "get_outer_nod": 250, "get_node_id": 250, "get_incoming_edg": 250, "has_child": 250, "child": [250, 359, 451], "has_par": 250, "parent": [250, 252, 292, 297, 451], "get_indegre": 250, "get_outdegre": 250, "kmaxaggreg": 250, "ksumaggreg": 250, "kproductaggreg": 250, "koverwriteaggreg": 250, "subproject": 252, "scratch": 252, "never": [252, 457], "hopefulli": 252, "dmaven": 252, "antrun": 252, "jni": 252, "gae_java": 253, "graphscope_typ": 255, "graphscopetyp": 255, "myalgorithm": 255, "filenotfounderror": 256, "typeerror": [256, 292, 464], "arrowproperti": [257, 319], "subrang": 257, "loader_op": 258, "notimplementederror": 258, "run_app": [263, 264, 279, 287, 288], "copy_typ": 265, "session_id": [267, 271, 292, 319, 320, 457, 461], "graph_typ": [267, 457], "graphtyp": [267, 457, 466, 471], "view_typ": 268, "vertex_or_edge_label_list": 269, "graph_util": 269, "vertexlabel": 269, "op_typ": [271, 292, 461], "uiliti": 271, "interactive_queri": [276, 464], "gremlin_script": [276, 320], "request_opt": [276, 320], "interactivequerydagnod": 276, "modify_typ": [277, 278], "attr": [277, 278, 292, 311, 324, 325, 326, 457, 460], "type_pb2": [277, 278, 282], "nx_add_edg": 277, "nx_del_edg": 277, "nx_update_edg": 277, "nx_add_nod": 278, "nx_del_nod": 278, "nx_update_nod": 278, "fd": [279, 284, 480], "storage_opt": [279, 284], "write_opt": [279, 284], "adaptor": 279, "result_path": [279, 284], "vertex_collect": 280, "edge_collect": 280, "report_typ": 282, "variati": 282, "node_num": [282, 484, 488], "has_nod": [282, 457], "has_edg": [282, 457], "node_data": 282, "neighbors_by_nod": 282, "succs_by_nod": 282, "preds_by_nod": 282, "neighbors_by_loc": 282, "succs_by_loc": 282, "preds_by_loc": 282, "deg_by_nod": 282, "in_deg_by_nod": 282, "out_deg_by_nod": 282, "deg_by_loc": 282, "in_deg_by_loc": 282, "out_deg_by_loc": 282, "nodes_by_loc": 282, "loc": 282, "multigraph": [282, 322, 324, 332, 336, 345, 350, 351, 377, 378, 386, 388, 401, 402, 403, 457, 460], "multidigraph": [282, 324, 336, 345, 350, 351, 388, 396, 397, 455, 457], "large_attr": [292, 461], "types_pb2": [292, 457], "operationtyp": 292, "opdef": [292, 296], "attrvalu": [292, 319, 488], "largeattrvalu": 292, "op_def_pb2": 296, "incoming_data": [298, 319, 464], "as_default": [298, 464], "alia": [303, 305, 311, 457, 464, 489], "k8s_gs_imag": [304, 464, 482], "k8s_etcd_imag": 304, "k8s_image_pull_secret": [304, 464], "k8s_coordinator_cpu": [304, 464], "k8s_coordinator_mem": [304, 464], "k8s_vineyard_cpu": [304, 464], "k8s_mars_worker_cpu": [304, 464], "k8s_mars_worker_mem": [304, 464], "k8s_mars_scheduler_cpu": [304, 464], "k8s_mars_scheduler_mem": [304, 464], "with_mar": [304, 464], "k8s_waiting_for_delet": [304, 464], "dataset_download_retri": 304, "k8s_deploy_mod": [304, 464], "kv": 304, "cooper": [305, 319], "\u02bbegograph": 305, "\u02bbegotensor": 305, "sample_se": [305, 489], "positive_sampl": [305, 489], "receptive_fn": [305, 489], "egotensor": [305, 313, 489], "egoflow": [305, 313, 489], "cora": [305, 317, 489], "convers": [305, 306, 466], "node_t": [305, 306, 317, 489], "edge_table_with_self_loop": [305, 489], "train_tabl": [305, 489], "val_tabl": [305, 489], "test_tabl": [305, 489], "dataset_fold": [305, 489], "decod": [305, 306, 307, 317, 489], "attr_typ": [305, 306, 307, 317, 489], "1433": [305, 317, 489], "attr_delimit": [305, 306, 307, 489], "learningbasedmodel": [305, 489], "categorical_attrs_desc": [305, 489], "_sample_se": [305, 489], "_positive_sampl": [305, 489], "_receptive_fn": [305, 489], "ego_flow": [305, 489], "src_ego_spec": [305, 489], "pos_src_ego_tensor": [305, 489], "identityencod": [305, 489], "widendeepencod": [305, 489], "feature_encod": [305, 489], "gcnconv": [305, 489], "sparseegographencod": [305, 489], "_encod": [305, 489], "conv_lay": [305, 489], "_supervised_loss": [305, 489], "full_graph_mod": [305, 489], "localtftrain": [305, 489], "model_fn": [305, 317, 489], "load_graph": [305, 489], "server_id": [305, 489], "server_count": [305, 307, 317, 489], "tracker": [305, 317, 489], "conclud": 305, "bought": 306, "saturdai": 306, "morn": 306, "bigint": 306, "shanghai": 306, "localfilesystem": 306, "pai": [306, 311, 312], "tab": 306, "s2": [306, 422], "215340": 306, "933091": 306, "grei": 306, "362519": 306, "097545": 306, "chapter": [306, 307, 309, 403, 440], "comma": 306, "dscript": 306, "dentryfil": 306, "dtabl": 306, "prj": 306, "flag": [306, 307], "define_str": 306, "node_sourc": 306, "edge_sourc": 306, "hash": [306, 319], "bucket_s": 306, "greatli": [306, 307, 469], "your_attr_typ": 306, "you_delimit": 306, "scr_id": 306, "feature1": 306, "10002": [306, 307, 308, 310], "feature2": 306, "10003": [306, 307, 308, 310], "feature3": 306, "124": 306, "\u02bbitem_node_decod": 306, "\u02bbuser_node_decod": 306, "\u02bbedge_decod": 306, "item_node_decod": 306, "user_node_decod": 306, "edge_decod": [306, 317], "graph_object": 306, "commod": 307, "swing": [307, 308], "30001": [307, 308, 310], "30002": [307, 308, 310], "30003": [307, 308, 310], "table_1": 307, "table_2": 307, "dest": 307, "10004": [307, 308], "20001": [307, 308, 310], "20003": [307, 308, 310], "20004": [307, 308, 310], "46": [307, 308, 310, 322, 444], "ui_decod": 307, "uv_decod": 307, "table_3": 307, "table_4": 307, "click_v": 307, "task_index": [307, 317], "task_count": 307, "atyp": 307, "job_nam": [307, 317], "worker_host": 307, "respond": 307, "necessarili": [307, 419], "serious": 307, "decreas": [307, 386, 388], "speak": 307, "client_count": [307, 317], "wait_for_clos": [307, 317], "matter": [307, 463], "get_topologi": 308, "dst_type": 308, "figure1": 308, "topo": 308, "print_al": 308, "string_attr": 308, "src_node": 308, "dst_node": 308, "dense_shap": 308, "__next__": 308, "table1": 308, "u_nod": 308, "get_edg": 308, "table2": 308, "table3": 308, "click_edg": 308, "table4": 308, "conduc": 309, "recept": [309, 313], "ai": 309, "meta_path": 309, "layer_id": 309, "famili": [309, 322, 360, 418, 446], "random_without_replac": 309, "ueri": 309, "default_neighbor_id": 309, "set_default_neighbor_id": [309, 318], "xx": 309, "set_padding_mod": 309, "circular": [309, 311, 361], "nodesampl": 310, "node_sampl": 310, "by_ord": 310, "node_from": [310, 321], "edge_src": [310, 321], "edge_dst": [310, 321], "edgesampl": 310, "matur": 311, "dl": 311, "sheer": 311, "sink": 311, "generatortyp": [311, 321], "won": [311, 472], "cursor": 311, "ingo": 311, "query\u5bf9\u8c61": 311, "outneg": [311, 314], "inneg": [311, 314, 317], "candid": [311, 314], "u2i": 311, "ouv": 311, "func": 311, "edeg": 311, "src_1hop": 311, "dst_1hop": 311, "neg_i": 311, "neg_i_1hop": 311, "params_list": 311, "arrang": 311, "anonym": [311, 449], "src_attr": 311, "neg_attr": 311, "encode_fn": [311, 317], "src_atr": 311, "outnegv": 311, "gen1": 311, "gen2": 311, "circumst": 311, "foewa": 311, "from_gener": [311, 317], "make_one_shot_iter": [311, 317], "get_next": [311, 317], "zhangjiak": 312, "cp27": 312, "cp27mu": 312, "linux_x86_64": 312, "autoconf": 312, "automak": 312, "libtool": 312, "your_wheel_nam": [312, 315], "test_cpp_ut": 312, "test_python_ut": 312, "fastgcn": [313, 489], "graphsaint": 313, "amd": 313, "object_typ": 314, "oprequest": 315, "oprespons": 315, "params_": 315, "tensors_": 315, "redirect": [315, 395], "rewrit": 315, "happen": [315, 469, 472], "stitch": 315, "myoper": 315, "register_oper": 315, "opnam": 315, "randomsampl": 315, "xxxsampler": 315, "seek": 316, "litestr": 316, "getfiles": 316, "getrecordcount": 316, "register_file_system": 316, "myfilesystem": 316, "registr": 316, "ppi": 317, "train_supervis": 317, "gen_test_data": 317, "getopt": 317, "argv": 317, "cur_path": 317, "102": [317, 453], "dirnam": 317, "rf": 317, "\u4f60\u9700\u8981\u628agen_test_data": 317, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 317, "fi": 317, "case_bas": 317, "genetic_algorithm": 317, "neural_network": 317, "probabilistic_method": 317, "reinforcement_learn": 317, "rule_learn": 317, "bag": 317, "1033": 317, "103482": 317, "103515": 317, "31336": 317, "1061127": 317, "05882353": 317, "1106406": 317, "n_featur": 317, "node_decod": 317, "n_class": 317, "140": [317, 380], "n_hop": 317, "n_epoch": 317, "tripl": 317, "graph_object_cn": 317, "sample_gen": 317, "input_fn": 317, "sample_input_fn": 317, "float64": 317, "tensorshap": 317, "layer_featur": 317, "aggregate_fn": 317, "self_vec": 317, "neigh_vec": 317, "raw_feat_layer_index": 317, "layer_index": 317, "variable_scop": 317, "_layer": 317, "auto_reus": 317, "neigh_weight": 317, "get_vari": 317, "self_weight": 317, "output_shap": 317, "get_shap": 317, "neigh_mean": 317, "from_neigh": 317, "matmul": 317, "from_self": 317, "add_n": 317, "leaky_relu": 317, "depth_to_encod": 317, "h_self_vec": 317, "h_neighbor_vec": 317, "features_column": 317, "feature_column": 317, "numeric_column": 317, "loss_fn": 317, "train_op": 317, "global_step": 317, "get_global_step": 317, "estimatorspec": 317, "modekei": 317, "set_xxx": 318, "set_yyi": 318, "other_model": 318, "fill": [318, 358, 369, 379, 413], "nbr_id": 318, "set_default_int_attribut": 318, "set_default_float_attribut": 318, "set_default_string_attribut": 318, "set_inter_threadnum": 318, "intra": [318, 376, 379], "set_intra_threadnum": 318, "16mb": 318, "reset": 318, "enlarg": 318, "set_rpc_message_max_s": 318, "objectnam": 319, "degener": 319, "unspecifi": [319, 334], "consolidate_column": 319, "result_column": 319, "consolid": [319, 471, 478], "weight0": 319, "weight1": 319, "graph_nod": 319, "detach": 319, "varaibl": 319, "lexic": 319, "classmethod": 319, "graphar_store_in_loc": [319, 468], "save_to": [319, 468], "graphar_graph_nam": [319, 468], "graphar_file_typ": [319, 468], "parquet": [319, 468], "orc": [319, 468], "graphar_vertex_chunk_s": [319, 468], "graphar_edge_chunk_s": [319, 468], "graphschema": [319, 457], "schema_path": 319, "currrent": 319, "object_id": [319, 320, 321], "filetyp": 319, "ordinari": 319, "f0": 319, "graph_build": 319, "deprec": [319, 337, 435], "group_id": 319, "member_s": 319, "leader_student_id": 319, "student": 319, "member_student_id": 319, "group_for_teacher_stud": 319, "group_nam": 319, "establish_d": 319, "teacher_in_charge_id": 319, "teacher": 319, "lesson_num": 319, "avg_scor": 319, "student_id": 319, "salari": 319, "teacher_id": 319, "both_in_out": 319, "unambigu": 319, "orign": 319, "interactivequeri": [320, 462, 464, 488], "frontend_gremlin_endpoint": 320, "frontend_cypher_endpoint": 320, "gremlin_url": 320, "lifetim": 320, "traversal_sourc": 320, "graphtraversalsourc": 320, "cypher_driv": 320, "cypher_url": 320, "gremlin_cli": 320, "runtimeerror": [320, 464], "modern_graph_data_dir": 320, "tolist": [320, 470], "dtype": 321, "pywrap": 321, "nodefrom": 321, "get_handl": 321, "worker_count": 321, "base64": 321, "nstart": 322, "poweriterationfailedconverg": 322, "langvil": 322, "meyer": 322, "survei": [322, 410], "cites": 322, "ist": 322, "psu": 322, "edu": 322, "713792": 322, "jon": 322, "kleinberg": 322, "authorit": 322, "journal": [322, 391, 399, 416, 447, 450, 454], "acm": [322, 397, 448, 480], "604": 322, "1999": [322, 377, 378], "doi": [322, 392, 399, 434], "1145": 322, "324133": 322, "324140": 322, "cornel": 322, "kleinber": 322, "pdf": [322, 404, 406, 407], "load_centr": 322, "in_degree_centr": [322, 458], "networkxnotimpl": 322, "out_degree_centr": [322, 458], "equat": 322, "ax": 322, "eigenvalu": [322, 402], "virtu": 322, "perron": 322, "frobeniu": 322, "theorem": [322, 401, 413], "0e": 322, "strength": 322, "2f": 322, "networkxpointlessconcept": [322, 452], "networkxerror": [322, 328, 335, 337, 341, 342, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 392, 398, 401, 402, 403, 414, 417, 449, 457, 460], "eigenvector_centrality_numpi": 322, "discern": 322, "phillip": 322, "bonacich": 322, "american": 322, "sociologi": 322, "1170": 322, "1182": 322, "1986": [322, 446], "leonidzhukov": 322, "net": [322, 376], "hse": 322, "socialnetwork": 322, "oxford": [322, 355, 356, 405, 449], "press": [322, 355, 356, 403, 445, 448, 449], "usa": [322, 409, 410, 456], "pp": [322, 386, 389, 390, 391, 404, 410, 411, 448, 454], "169": 322, "x_i": 322, "a_": 322, "x_j": 322, "lambda_": 322, "distant": 322, "penal": 322, "strictli": [322, 376], "invers": [322, 401], "phi": 322, "sqrt": [322, 402], "adjacency_spectrum": 322, "720": 322, "leo": 322, "sociometr": 322, "psychometrika": 322, "1953": 322, "springer": [322, 411], "1007": [322, 356, 392], "bf02289026": 322, "has_path": [322, 458], "djikstra": 322, "floyd": 322, "warshal": 322, "bfs_edg": [322, 458], "depth_limit": 322, "core_numb": 322, "vladimir": 322, "batagelj": 322, "matjaz": 322, "zaversnik": 322, "ab": [322, 380, 381, 382, 396, 404, 408, 449, 451], "0310049": 322, "c_u": 322, "deg": [322, 376, 390, 457], "geometr": [322, 444, 458], "vw": 322, "hat": 322, "uv": [322, 390], "uw": 322, "tot": 322, "2deg": 322, "leftrightarrow": 322, "complete_graph": [322, 328, 457], "saram\u00e4ki": 322, "kivel\u00e4": 322, "onnela": 322, "kaski": 322, "kert\u00e9sz": 322, "027105": 322, "2007": [322, 404, 450], "jponnela": 322, "web_docu": 322, "a9": 322, "intens": 322, "coher": 322, "motif": 322, "065103": 322, "2005": [322, 398, 404], "sign": 322, "costantini": 322, "perugini": 322, "plo": 322, "e88669": 322, "fagiolo": 322, "76": 322, "026107": 322, "average_clust": [322, 458], "count_zero": 322, "c_v": 322, "nonzero": [322, 386, 403], "marcu": 322, "kaiser": 322, "0802": 322, "2512": 322, "g_to_add_to": [324, 325, 326], "nodes_for_cycl": 324, "add_path": [324, 326, 457], "add_star": [324, 325], "nodes_for_path": 325, "add_cycl": [325, 326], "nodes_for_star": 326, "star": [326, 363, 372], "middl": 326, "cnbor": 328, "with_data": 329, "empty_graph": [329, 370], "frequenc": 331, "width": 331, "2m": [332, 410], "prevent": 335, "err": 335, "frozen": [335, 340], "unfreez": 335, "frozen_graph": 335, "unfrozen_graph": 335, "is_frozen": 335, "neighbour": 337, "freez": [340, 458], "nodelist": [345, 384], "selfloop_edg": [345, 350, 386, 388], "number_of_selfloop": [345, 351], "selfloop": [350, 351, 384, 390], "nloop": 350, "nodes_with_selfloop": [350, 351], "datadict": [351, 457], "datavalu": 351, "attrnam": [351, 488], "edgeit": 351, "ekei": 351, "graph_atlas_g": 355, "linearli": [355, 371], "ronald": [355, 356, 446], "robin": [355, 356], "wilson": [355, 356], "1998": [355, 356], "111223": 356, "112222": 356, "automorph": [356, 429], "graph_atla": 356, "expens": 356, "popul": [356, 357, 359, 360, 362, 364, 367, 369, 371, 372, 375, 386, 388, 389, 391, 393, 394, 395, 401, 402, 403, 409, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 452, 459], "book": 356, "violat": 356, "lexicograph": 356, "nondecreas": 356, "001111": 356, "000112": 356, "1008": 356, "3333444": 356, "3333336": 356, "1012": 356, "1213": 356, "1244555": 356, "1244456": 356, "perfectli": 357, "ari": [357, 367], "height": 357, "children": [357, 367, 451], "barbel": [358, 369], "bell": 358, "p_": [358, 390, 404], "mere": [358, 369], "aldou": [358, 369], "jim": [358, 369], "binomi": 359, "leftmost": 359, "ci_n": 360, "x_1": 360, "x_2": 360, "x_m": 360, "mod": [360, 374, 403, 422], "subfamili": 360, "ladder": [361, 368], "cl_n": 361, "k_n": 362, "is_direct": [362, 457], "subset_s": 363, "multipartit": [363, 374], "tripartit": 363, "bc": 363, "complete_bipartite_graph": 363, "c_n": 364, "hierarch": 365, "dorogovtsev": 365, "goltsev": 365, "mend": 365, "mat": 365, "0112143": 365, "kw": [366, 464], "unknown": [366, 469], "abc": 366, "rightmost": 367, "jame": 367, "andrew": 367, "storer": 367, "birkhaus": 367, "boston": 367, "2001": [367, 380, 388, 393, 395, 403, 412, 470], "225": [367, 457], "lollipop": 369, "k_m": 369, "p_n": [369, 371], "etext": 369, "turan": 374, "disjoint": [374, 385, 423], "2r": 374, "tau1": 376, "tau2": 376, "mu": 376, "average_degre": 376, "min_degre": 376, "max_degre": 376, "min_commun": 376, "max_commun": 376, "lfr": 376, "mathrm": 376, "expon": 376, "reassign": [376, 414], "affili": [376, 484], "random_st": [376, 379, 380, 381, 382, 384, 386, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 404, 405, 406, 407, 408, 411, 412, 413, 417, 449, 452, 454], "exceededmaxiter": 376, "250": 376, "frozenset": [376, 459], "rewir": [376, 378, 382, 414, 417], "wire": 376, "robust": 376, "somewhat": 376, "narrow": 376, "andrea": 376, "lancichinetti": 376, "santo": [376, 380, 381, 382], "fortunato": [376, 380, 381, 382], "filippo": 376, "radicchi": 376, "phy": [376, 388, 393, 394, 395, 398], "rev": [376, 388, 393, 394, 395, 398], "046110": 376, "santofortunato": 376, "caveman": [377, 378, 382], "unclear": [377, 378], "connected_caveman_graph": [377, 383], "watt": [377, 378, 388], "phenomenon": [377, 378], "amer": [377, 378], "493": [377, 378], "527": [377, 378], "caveman_graph": 378, "p_in": [379, 380, 381], "p_out": [379, 380, 381], "gaussian": [379, 405, 406, 407], "drawn": [379, 407], "varianc": 379, "probabilti": [379, 382], "random_partition_graph": [379, 384], "ulrik": 379, "brand": 379, "marco": 379, "gaertler": 379, "dorothea": 379, "wagner": 379, "11th": 379, "europ": 379, "symp": 379, "plant": [380, 381], "random_partition_model": 380, "condon": 380, "karp": 380, "algor": 380, "116": 380, "486": [380, 381, 382], "174": [380, 381, 382], "0906": [380, 381, 382], "0612": [380, 381, 382], "relax": 382, "februari": 382, "num_cliqu": 383, "clique_s": 383, "ring": 383, "stochast": [384, 458], "densiti": [384, 386, 404, 406], "symmetr": [384, 403, 426, 430, 436, 438, 449], "300": [384, 453], "prob": 384, "450": 384, "quotient_graph": 384, "relabel": 384, "245": 384, "348": 384, "405": 384, "051": 384, "022": 384, "planted_partition_graph": 384, "gaussian_random_partition_graph": 384, "gnp_random_graph": [384, 411, 412, 413], "holland": 384, "laskei": 384, "leinhardt": 384, "blockmodel": 384, "109": 384, "1983": 384, "windmil": 385, "contract": 385, "wd": 385, "deg_sequ": [386, 387, 388, 389, 391], "pseudograph": [386, 388], "nonneg": [386, 388], "is_graph": [386, 392], "graphic": [386, 388, 391, 392], "realiz": [386, 388, 391, 414, 415, 416, 417, 444, 469], "tend": 386, "poisson": 386, "constant": [386, 488], "siam": [386, 391, 397], "167": 386, "random_sequ": 386, "random_powerlaw_tree_sequ": 386, "5000": [386, 470], "actual_degre": 386, "in_degree_sequ": 388, "out_degree_sequ": 388, "directed_random": 388, "configuration_model": [388, 389, 392], "finit": [388, 390, 403], "strogatz": 388, "026118": 388, "din": 388, "dout": 388, "in_deg_sequ": 389, "out_deg_sequ": 389, "kleitman": [389, 391], "valenc": [389, 391], "1973": [389, 391], "w_0": 390, "w_1": 390, "ldot": 390, "w_u": [390, 404, 407], "w_v": [390, 404, 407], "sum_k": 390, "w_k": 390, "z": [390, 403, 404, 408], "mathcal": 390, "ne": 390, "uu": 390, "fan": [390, 404, 480], "chung": [390, 404], "lu": [390, 480], "ann": 390, "combinator": [390, 450], "145": 390, "2002": 390, "joel": 390, "miller": 390, "aric": [390, 404], "hagberg": [390, 404], "waw": [390, 404], "alan": 390, "friez": 390, "paul": 390, "horn": 390, "pawe\u0142": 390, "pra\u0142at": 390, "lnc": 390, "6732": 390, "115": 390, "havel": 391, "hakimi": 391, "networkxexcept": 391, "resort": 391, "496": 391, "506": 391, "1962": [391, 409, 410, 456], "d_m": 392, "uniform": [392, 404, 413], "networkxunfeas": 392, "moshen": 392, "bayati": 392, "jeong": 392, "han": 392, "kim": 392, "amin": 392, "saberi": 392, "algorithmica": 392, "58": 392, "860": 392, "910": 392, "s00453": 392, "009": 392, "9340": 392, "gn": [393, 456], "a_k": 393, "krapivski": [393, 394, 395, 398], "redner": [393, 394, 395], "066123": [393, 395], "gnc": 394, "growth": [394, 454], "036118": 394, "2005k": 394, "gnr": 395, "probabilii": 395, "self_loop": 396, "preferenti": 396, "proport": 396, "peterson": [396, 439], "nichola": 396, "bori": 396, "pittel": 396, "preprint": 396, "1311": 396, "5961": 396, "2013": [396, 416], "gamma": 397, "delta_in": 397, "delta_out": 397, "bia": 397, "bollob\u00e1": 397, "borg": 397, "chay": 397, "riordan": 397, "fourteenth": 397, "annual": 397, "symposium": 397, "132": [397, 412], "139": 397, "diverg": [398, 458], "retent": 398, "disallow": 398, "ispolatov": 398, "yuryev": 398, "061911": 398, "inclus": 399, "knudsen": 399, "michael": 399, "carsten": 399, "wiuf": 399, "markov": 399, "chain": 399, "1155": 399, "190836": 399, "radiu": [400, 405, 406, 407], "chordal": 401, "chord": [401, 415], "mildli": 401, "lubotzki": 401, "invari": 401, "birkh\u00e4us": 401, "verlag": 401, "basel": 401, "1994": 401, "marguli": 402, "gabber": 402, "galil": 402, "palei": 403, "pz": 403, "f_q": 403, "odd": 403, "bolloba": 403, "cambridg": 403, "theta": [404, 407], "po": [404, 405, 406, 407, 408], "p_dist": [404, 406], "geograph": [404, 407], "rectangular": [404, 408], "ge": [404, 408], "prone": 404, "le": [404, 408, 448], "euclidean": [404, 405, 406, 407, 408], "taxicab": [404, 408], "expovari": [404, 407], "masuda": 404, "miwa": 404, "konno": 404, "036108": 404, "milan": 404, "bradonji\u0107": 404, "allon": 404, "percu": 404, "giant": 404, "antoni": 404, "bonato": 404, "209": 404, "216": 404, "cube": [405, 406, 407, 425, 442], "kdtree": [405, 406, 407], "minkowski": [405, 406, 407], "infin": [405, 406, 407], "erd\u0151": [405, 406, 407], "r\u00e9nyi": [405, 406, 407], "twenti": 405, "2d": [405, 406, 407, 457, 460], "deviat": [405, 406, 407], "gauss": [405, 406, 407], "penros": [405, 406], "mathew": [405, 406], "soft": 406, "exp": [406, 408], "annal": 406, "2016": 406, "986": 406, "1028": 406, "summat": 407, "nodethr": 407, "cole": 407, "maclean": 407, "blog": 407, "thesi": [407, 413], "waxman": 408, "x_min": 408, "y_min": 408, "x_max": 408, "y_max": 408, "Their": 408, "rout": 408, "multipoint": 408, "ieee": [408, 416, 417, 449, 454], "1988": 408, "1617": 408, "1622": 408, "harari": [409, 410, 458], "h_": [409, 410], "ceil": 409, "kn": 409, "hnm_harary_graph": 409, "weisstein": 409, "eric": 409, "mathworld": [409, 418, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 437], "wolfram": [409, 418, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 437], "hararygraph": 409, "nat": [409, 410, 456], "acad": [409, 410, 456], "sci": [409, 410, 456], "1142": [409, 410, 456], "1146": [409, 410, 456], "floor": 410, "hkn_harary_graph": 410, "boesch": 410, "satyanarayana": 410, "suffel": 410, "reliabl": 410, "synthesi": 410, "99": [410, 488], "2009": [410, 450], "uniform_random_intersection_graph": [411, 412], "nikoletsea": 411, "raptopoulo": 411, "spiraki": 411, "icalp": 411, "\u0131az": 411, "karhum": 411, "aki": 411, "lepist": 411, "sannella": 411, "vol": [411, 454], "3142": 411, "lectur": 411, "1029": 411, "1040": 411, "godehardt": 412, "jaworski": 412, "electron": [412, 450], "singer": 413, "cohen": 413, "1995": 413, "phd": 413, "john": [413, 430], "hopkin": 413, "scheinerman": 413, "evolut": 413, "2000": 413, "156": 413, "nkk": [414, 415], "degree_seq": 414, "n_edges_add": 414, "li": [414, 417], "unsatur": 414, "proof": 414, "tillman": [414, 415, 417], "markopoul": [414, 415, 416, 417, 449], "butt": [414, 415, 449], "gjoka": [414, 415, 416, 417], "2k": [414, 415], "kdd": [414, 415], "seconnd": 415, "joint_degre": [416, 417], "diagon": [416, 432], "joint_degree_graph": 416, "kurant": 416, "5k": 416, "infocom": [416, 417, 449], "stanton": 416, "pinar": 416, "prescrib": 416, "experiment": [416, 464], "n_th": 418, "m_1": 418, "singleton": [418, 457], "m_2": 418, "m_i": 418, "mycielskian": 418, "m_": 418, "mycielskigraph": 418, "p_2": 418, "chromat": [419, 450], "2n": 419, "bigcup": 419, "nonisomporph": 420, "adjanc": 420, "matric": [420, 449], "nonisomorph": 421, "shift_list": 422, "cubic": [422, 425, 426, 429, 430, 436, 438, 439, 444], "lcf": [422, 424, 426, 428, 430, 436, 438], "lederberg": 422, "coxet": 422, "frucht": [422, 429], "hamiltonian": [422, 424, 429, 430, 433, 438, 444], "symmetri": [422, 429], "dodecahedral_graph": 422, "desargues_graph": 422, "heawood_graph": 422, "pappus_graph": 422, "s1": 422, "sk": 422, "v_current": 422, "shiftlist": 422, "heawood": [422, 430], "lcfnotat": 422, "bull": 423, "planar": [423, 426, 427, 429], "pendant": 423, "leg": 423, "chv\u00e1tal": 424, "370": 424, "chv": 424, "c3": [424, 436, 437], "a1tal_graph": 424, "chvatalgraph": 424, "platon": [425, 428, 433, 437, 441, 443], "hypercub": 425, "aris": 425, "desargu": 426, "desarguesgraph": 426, "kite": [427, 434], "diamondgraph": 427, "dodecahedr": 428, "dodecahedron": 428, "regular_dodecahedron": 428, "dodecahedralgraph": 428, "fruchtgraph": 429, "cage": 430, "perci": 430, "nonplanar": 430, "girth": 430, "heawoodgraph": 430, "win": [430, 439], "tue": [430, 439], "nl": [430, 439], "aeb": [430, 439], "housegraph": [431, 432], "pentatop": 432, "icosahedr": 433, "icosahedron": 433, "icosahedralgraph": 433, "krackhardt": 434, "andr": 434, "beverlei": 434, "carol": 434, "dian": 434, "fernando": 434, "garth": 434, "heather": 434, "ik": 434, "jane": 434, "polit": 434, "landscap": 434, "cognit": 434, "quarterli": 434, "342": [434, 457], "369": 434, "2307": 434, "2393394": 434, "jstor": 434, "june": 434, "1990": 434, "graph_descript": 435, "ltype": 435, "adjacencylist": 435, "from_dict_of_list": 435, "from_edgelist": 435, "xlist": 435, "c_4": 435, "w2": 435, "vk": 435, "wk": 435, "vj": 435, "wj": 435, "moebiu": 436, "kantor": 436, "m\u00f6biu": 436, "petersen": [436, 439], "b6biu": 436, "93kantor_graph": 436, "octahedr": 437, "octahedron": 437, "shake": 437, "hi": [437, 447, 456], "her": 437, "partner": 437, "handshak": 437, "cocktail": 437, "octahedralgraph": 437, "tur": 437, "a1n_graph": 437, "special_cas": 437, "pappu": 438, "juliu": 439, "counterexampl": [439, 444], "bridgeless": 439, "colour": 439, "drg": 439, "maze": 440, "sedgewick": 440, "3rd": 440, "tetrahedr": 441, "k4": 441, "w4": 441, "grpah": 441, "tetrahedron": [441, 443, 444], "archimedean": [442, 443], "octagon": 442, "triangular": 442, "truncated_cub": 442, "coolmath": 442, "polyhedra": 442, "hexagon": 443, "equilater": 443, "truncated_tetrahedron": 443, "tutt": 444, "polyhedr": 444, "tait": 444, "conjectur": 444, "polyhedron": 444, "davi": 445, "southern": 445, "women": 445, "gardner": 445, "1941": 445, "south": 445, "chicago": 445, "il": 445, "florentin": 446, "breiger": 446, "philippa": 446, "pattison": 446, "cumul": 446, "dualiti": 446, "septemb": 446, "zachari": 447, "karat": 447, "club": 447, "mr": [447, 450], "offic": 447, "wayn": 447, "fission": 447, "anthropolog": 447, "452": 447, "473": 447, "1977": 447, "coappear": 448, "novel": 448, "miser": 448, "knuth": 448, "1993": 448, "graphbas": 448, "combinatori": 448, "york": 448, "spectral": [449, 458], "forg": 449, "sgf": 449, "eigenstructur": 449, "synthes": 449, "percentag": 449, "telecommun": 449, "bernoulli": 449, "baldesi": 449, "1801": 449, "01715": 449, "karate_club_graph": 449, "sud": 450, "81": 450, "810": 450, "herzberg": 450, "murti": 450, "polynomi": 450, "am": 450, "708": 450, "717": 450, "sander": 450, "torsten": 450, "7pp": 450, "2529816": 450, "encyclopedia": 450, "dec": 450, "nil": 451, "arboresc": 451, "downward": 451, "synthet": 451, "trie": 451, "recov": [451, 464], "pr\u00fcfer": 452, "from_prufer_sequ": 452, "forest_str": 452, "triad_nam": 453, "003": 453, "012": 453, "021d": 453, "021u": 453, "021c": 453, "111d": 453, "111u": 453, "030t": 453, "030c": 453, "120d": 453, "120u": 453, "120c": 453, "triadic_censu": 453, "autonom": [454, 456], "elmokashfi": 454, "tier": 454, "mid": 454, "adv": 454, "bidirect": 454, "peer": 454, "commerci": 454, "agreement": 454, "kvalbein": 454, "dovroli": 454, "bgp": 454, "1250": 454, "1261": 454, "octob": 454, "reweight": 455, "mathematician": 456, "frank": 456, "incoming_graph_data": [457, 460], "default_label": [457, 460], "to_networkx_graph": 457, "110": 457, "protect": 457, "bracket": 457, "shortcut": 457, "nbrsdict": 457, "miscellan": 457, "__contains__": 457, "__getitem__": 457, "adj_dict": 457, "atlasview": 457, "__iter__": 457, "niter": 457, "__len__": 457, "nnode": 457, "u_of_edg": 457, "v_of_edg": 457, "ebunch_to_add": 457, "wn2898": 457, "node_for_ad": 457, "nodes_for_ad": 457, "hello": 457, "k3": 457, "attrdict": 457, "behav": 457, "idiom": 457, "foovalu": 457, "adj_it": 457, "nbrdict": 457, "adjlist_inner_dict_factori": 457, "neighbordict": 457, "adjlist_outer_dict_factori": 457, "adjlistdict": 457, "clear_edg": 457, "deepcopi": 457, "fresh": [457, 466], "__class__": 457, "degreeview": 457, "nd_view": 457, "edge_attr_dict_factori": 457, "neighborattrdict": 457, "edge_subgraph": 457, "edgeview": 457, "edgedataview": 457, "ddict": 457, "get_edge_data": 457, "edge_dict": 457, "safe": 457, "graph_attr_dict_factori": 457, "graph_cache_factori": 457, "keyerror": 457, "edge_ind": 457, "data_dictionari": 457, "is_multigraph": 457, "corespond": 457, "nbunch_it": 457, "exhaust": 457, "possibli": 457, "node_attr_dict_factori": 457, "nodeattrdict": 457, "node_dict_factori": 457, "nodedict": 457, "nodeview": 457, "nodedataview": 457, "nodedata": 457, "bar": 457, "nedg": 457, "Will": 457, "nodes_for_remov": 457, "set_edge_data": 457, "set_node_data": 457, "set_item": 457, "adjedgeattr": 457, "dd": 457, "nodeattr": 457, "netowrkx": 457, "to_undirected_class": 457, "itertool": 457, "mg": 457, "nd_iter": 457, "outedgeview": 457, "in_edg": 457, "outedgedataview": 457, "has_predecessor": 457, "has_successor": 457, "indegreeview": 457, "inedgeview": 457, "outdegreeview": 457, "pred": 457, "succ": 457, "_convert_arrow_to_dynam": [458, 460], "atla": 458, "triad": 458, "mycielski": 458, "sudoku": 458, "utf": [459, 470], "filenam": [459, 470], "rb": 459, "bz2": 459, "uncompress": 459, "whitespac": 459, "obsolet": 459, "write_edgelist": 459, "fh": 459, "textlin": 459, "parse_edgelist": 459, "read_adjlist": 459, "marker": 459, "v_0": 460, "v_1": 460, "add_label": 461, "talk": 463, "output_to_cli": [463, 480], "person_id": [463, 470], "api_cli": 464, "deregist": 464, "256mi": 464, "4gi": 464, "5gi": 464, "__enter__": 464, "__exit__": 464, "exc_typ": 464, "exc_valu": 464, "exc_tb": 464, "unregist": 464, "preemptiv": 464, "burstabl": 464, "qo": 464, "preempt": 464, "k8s_vineyard_imag": 464, "fallback": 464, "512mi": 464, "etcd_addr": 464, "etcd01": 464, "etcd02": 464, "etcd03": 464, "4mi": 464, "k8s_coordinator_pod_node_selector": 464, "tinyurl": 464, "3nx6k7ph": 464, "k8s_engine_pod_node_selector": 464, "path1": 464, "path2": 464, "claimnam": 464, "dangling_timeout_second": 464, "heartbeat": 464, "dangl": 464, "config_fil": 464, "reject": 464, "resource_nam": 464, "sigint": 464, "sigterm": 464, "signal": 464, "get_vineyard_object_mapping_t": 464, "with_cyph": 464, "recreat": 464, "restore_from_pvc": 464, "kubeconfig": 464, "run_fetch": 464, "lock": 464, "store_to_pvc": 464, "backup": [464, 470], "maxwel": 466, "binlog": 466, "buildgartfrag": 466, "etcd_endpoint": 466, "gartfrag": 466, "etcd_client": 466, "make_shar": 466, "mpi_comm_world": 466, "schema_kei": 466, "gart_schema_p": 466, "to_str": 466, "edge_config_str": 466, "as_str": 466, "gart_blob_m": 466, "_p": 466, "config_str": 466, "edge_config": 466, "inner_vertices_it": 466, "elabel": [466, 471], "edge_it": 466, "hive": 468, "ordered_by_sourc": 468, "ordered_by_dest": 468, "textual": 468, "unix": [468, 483], "ldbc_graphar": 468, "4096": 468, "ldbc_subgraph_graphar": 468, "ldbc_subgraph": 468, "ldbc__graphar": 468, "test_graphar": 468, "broader": 469, "ffi": 469, "agnost": 469, "grin_": 469, "partitioned_graph": 469, "edge_type_nam": 469, "boundari": 469, "sync_properti": 469, "grin_partitioned_graph": 469, "grin_partit": 469, "grin_graph": 469, "grin_get_local_graph_from_partit": 469, "grin_edge_typ": 469, "etyp": 469, "grin_get_edge_type_by_nam": 469, "grin_vertex_type_list": 469, "src_vtype": 469, "grin_get_src_types_from_edge_typ": 469, "dst_vtype": 469, "grin_get_dst_types_from_edge_typ": 469, "src_vtypes_num": 469, "grin_get_vertex_type_list_s": 469, "dst_vtypes_num": 469, "grin_vertex_typ": 469, "grin_get_vertex_type_from_list": 469, "grin_vertex_properti": 469, "dst_vp": 469, "grin_get_vertex_property_by_nam": 469, "grin_null_vertex_properti": 469, "grin_vertex_property_t": 469, "dst_vpt": 469, "grin_get_vertex_property_table_by_typ": 469, "grin_datatyp": 469, "dst_vp_dt": 469, "grin_get_vertex_property_data_typ": 469, "grin_vertex_list": 469, "__src_vl": 469, "grin_get_vertex_list": 469, "_src_vl": 469, "grin_select_type_for_vertex_list": 469, "src_vl": 469, "grin_select_master_for_vertex_list": 469, "src_vl_num": 469, "grin_get_vertex_list_s": 469, "grin_vertex": 469, "grin_get_vertex_from_list": 469, "ifdef": 469, "grin_trait_select_edge_type_for_adjacent_list": 469, "grin_adjacent_list": 469, "_adj_list": 469, "grin_get_adjacent_list": 469, "grin_direct": 469, "adj_list": 469, "grin_select_edge_type_for_adjacent_list": 469, "adj_lsit": 469, "endif": 469, "al_sz": 469, "grin_get_adjacent_list_s": 469, "ifndef": 469, "grin_edg": 469, "grin_get_edge_from_adjacent_list": 469, "grin_get_edge_typ": 469, "grin_equal_edge_typ": 469, "grin_get_neighbor_from_adjacent_list": 469, "grin_get_value_from_vertex_property_t": 469, "grin_vertex_ref": 469, "uref": 469, "grin_get_vertex_ref_for_vertex": 469, "u_master_partit": 469, "grin_get_master_partition_from_vertex_ref": 469, "send_valu": 469, "fragment_group_id": [469, 471], "get_partitioned_graph_by_object_id": 469, "local_partit": 469, "grin_get_local_partition_list": 469, "pnum": 469, "grin_get_partition_list_s": 469, "grin_get_partition_from_list": 469, "disclaim": 469, "sacrif": 469, "boilerpl": 469, "ineffici": 469, "enorm": 469, "grin_assume_all_vertex_property_local_complet": 469, "grin_assume_master_vertex_property_local_complet": 469, "grin_assume_by_type_all_vertex_property_local_complet": 469, "grin_assume_by_type_master_vertex_property_local_complet": 469, "assumpt": 469, "wider": 469, "undefin": 469, "tell": 469, "granular": 469, "grin_frag": 469, "storagespecif": 469, "vertexhandl": 469, "goe": 469, "grin_edge_list": 469, "grin_partition_list": 469, "grin_enable_": 469, "_list_arrai": 469, "vertexlist": 469, "grin_enable_vertex_list_arrai": 469, "vl": 469, "idx": 469, "sz": 469, "caller": 469, "_list_iter": 469, "grin_enable_vertex_list_iter": 469, "grin_vertex_list_iter": 469, "grin_get_vertex_list_begin": 469, "grin_get_next_vertex_list_it": 469, "vli": 469, "grin_is_vertex_list_end": 469, "grin_get_vertex_from_it": 469, "grin_get_vertex_type_by_nam": 469, "vtype": 469, "grin_vertex_property_list": 469, "grin_get_vertex_properties_by_nam": 469, "vprop": 469, "vpl": 469, "separatedli": 469, "with_vertex_label": 469, "with_edge_label": 469, "grin_serialize_vertex_ref": 469, "grin_deserialize_to_vertex_ref": 469, "grin_get_vertex_from_vertex_ref": 469, "vref": 469, "deseri": 469, "borrow": 469, "vertexcut": 469, "edgecut": 469, "judgement": 469, "columnar": 470, "gear": 470, "compromis": 470, "strict": 470, "multitud": 470, "exemplifi": 470, "said": 470, "grpc_port": 470, "grpc_endpoint": 470, "conn": 470, "add_vertex_label": 470, "v_label_nam": 470, "add_primary_kei": 470, "pk_name": 470, "prop_name_1": 470, "prop_name_2": 470, "add_edge_label": 470, "e_label_nam": 470, "prop_name_3": 470, "add_properti": 470, "xmln": 470, "xsi": 470, "w3": 470, "xmlschema": 470, "schemaloc": 470, "xsd": 470, "modelvers": 470, "gremlinexampl": 470, "codehau": 470, "mojo": 470, "classpath": 470, "mainclass": 470, "compliancelevel": 470, "killaft": 470, "credenti": 470, "valuemap": [470, 488], "javascript": 470, "data_load": 470, "load_tool": 470, "xzvf": 470, "alic": 470, "bob": 470, "person_id_1": 470, "20210611151923": 470, "mapreduc": 470, "data_output": 470, "55555": 470, "propertiescolmap": 470, "srcpkcolmap": 470, "dstpkcolmap": 470, "mb": 470, "columnidx": 470, "_success": 470, "xxxxx": 470, "sst": 470, "00000": 470, "00001": 470, "00002": 470, "load_data": 470, "test_store_servic": 470, "insert_vertex": 470, "vertexrecordkei": 470, "insert_vertic": 470, "update_vertex_properti": 470, "delete_vertex": 470, "vertex_pk": 470, "delete_vertic": 470, "insert_edg": 470, "edgerecordkei": 470, "update_edge_properti": 470, "delete_edg": 470, "edge_pk": 470, "remote_flush": 470, "snapshot_id": 470, "src_vertex_kei": 470, "dst_vertex_kei": 470, "realtimewrit": 470, "unus": 470, "current_timestamp": 470, "replay_record": 470, "grootclient": 470, "grootclientbuild": 470, "replayrecord": 470, "provis": 470, "lapp": 470, "reinstal": 470, "pv_name": 470, "pod_nam": [470, 478, 483], "logback": 470, "zk": 470, "storegcintervalm": 470, "try_catch_up_with_primari": 470, "otel": 470, "arrowfragmentgroup": 471, "spread": 471, "ipc": 471, "docket": 471, "string_oid": 471, "ipcclient": 471, "writeout": 471, "nb": 471, "fragmentloc": 471, "gettotalnodesnum": 471, "labeltyp": 471, "vlabel": 471, "vertex_data_t": 471, "edge_data_t": 471, "willing": 472, "implic": 472, "polymorph": 472, "instant": 472, "aka": 472, "pygrap": [472, 473], "frist": 472, "from_numpi": 472, "bind_sssp1": 472, "delai": 472, "bind_sssp2": 472, "vertex_bal": 473, "vcut": 473, "ecut": 473, "repo_hom": 477, "flexbuild": 477, "graph_identifi": 477, "syoov": 478, "79b44f7b58": 478, "ctmqb": 478, "10m": 478, "9m53": 478, "9m46": 478, "6dd67c65fc": 478, "gn4mb": 478, "15334625083466732": 478, "33d": 478, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 480, "\u8be5\u7cfb\u7edf\u4e8e": 480, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 480, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 480, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 480, "\u5728": [480, 481, 482, 483, 484, 487, 488, 489, 490], "\u4e2d": [480, 482, 483, 484, 490], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 480, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 480, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 480, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 480, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 480, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 480, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 480, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 480, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 480, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 480, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 480, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 480, "\u521b\u5efa\u9ed8\u8ba4": 480, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 480, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 480, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 480, "result_lpa": 480, "result_sssp": 480, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 480, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 480, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 480, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 480, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 480, "\u7c7b": [480, 490], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 480, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 480, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 480, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 480, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 480, "\u6216\u5199\u5165": 480, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 480, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 480, "\u6216\u5199\u5165\u672c\u5730\u7684": 480, "lpa_result": 480, "\u6570\u636e\u7ed3\u6784": 480, "\u6b64\u5916": [480, 484], "\u5982": [480, 483, 486, 488], "\u5feb\u901f\u4e0a\u624b": [480, 486], "\u4e2d\u6240\u793a": 480, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 480, "\u7684\u65b0\u5c5e\u6027": 480, "\u5217": 480, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 480, "\u5217\u540d\u4e3a": 480, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 480, "new_graph": [480, 485], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 480, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 480, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 480, "\u7c7b\u4f3c\u7684": 480, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 480, "\u4f8b\u5982\u9876\u70b9id": 480, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 480, "\u4ee3\u8868\u7ed3\u679c": 480, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 480, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 480, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 480, "\u8f6c\u6362\u4e3a": [480, 489], "\u4f7f\u7528\u9876\u70b9\u7684": 480, "\u4f5c\u4e3a\u540d\u4e3a": 480, "\u7684\u5217": 480, "df_vd": 480, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 480, "df_result": 480, "property0": 480, "label0": 480, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 480, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 480, "\u5c06": [480, 489], "\u9876\u70b9\u7684": 480, "\u4f5c\u4e3a": [480, 481, 490], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 480, "gs_data": 480, "\u53ef\u4ee5\u67e5\u770b": 480, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 480, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 480, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 480, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 480, "\u5728\u7eaf": 480, "\u6a21\u5f0f": [480, 488], "\u4e0b\u4f7f\u7528": 480, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 480, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 480, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 480, "\u5982\u4ee3\u7801\u6240\u793a": 480, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 480, "\u88c5\u9970\u7684\u7c7b": 480, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 480, "\u56fe\u7b97\u6cd5\u51fd\u6570": 480, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 480, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 480, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 480, "\u4e0e": 480, "\u76f8\u5173\u7684\u5b8c\u6574": 480, "\u53ef\u4ee5\u53c2\u8003": 480, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 480, "\u4e3a\u4f8b": [480, 484], "\u7528\u6237\u5728": 480, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 480, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 480, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 480, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 480, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 480, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 480, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 480, "\u589e\u91cf\u8ba1\u7b97": 480, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 480, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 480, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 480, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [480, 490], "\u7ecf\u5178\u7684": 480, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 480, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 480, "\u6a21\u578b\u4e4b\u5916": 480, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 480, "\u7f16\u7a0b\u6a21\u578b": 480, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 480, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 480, "\u6a21\u578b\u4e0d\u540c": 480, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 480, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 480, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 480, "\u800c\u4e0d\u540c\u4e8e": 480, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 480, "\u8fd8\u662f\u4ee5": 480, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 480, "\u88c5\u9970\u5668": 480, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 480, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 480, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 480, "\u4e2d\u7684": [480, 481, 483], "\u51fd\u6570": [480, 488], "\u4e0b\u5217\u4ee3\u7801": 480, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 480, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 480, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 480, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 480, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 480, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 480, "\u8fd9\u91cc": [480, 481, 490], "\u662f\u4e0e": 480, "\u76f8\u5bf9\u5e94\u7684": 480, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 480, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 480, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 480, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 480, "\u5728\u6b64\u4e4b\u540e": 480, "\u60a8\u53ef\u4ee5\u4ece": 480, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 480, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 480, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 480, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 480, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 480, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 480, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 480, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 480, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 480, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 480, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 480, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 480, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 480, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 480, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 480, "dist_0": 480, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 480, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 480, "\u8bf7\u53c2\u8003": [480, 488], "\u6765\u5c06": 480, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 480, "\u5b89\u88c5\u5b8c\u6210\u540e": 480, "\u4f60\u9700\u8981\u5c06": 480, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 480, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 480, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 480, "\u6765\u786e\u4fdd": 480, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 480, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 480, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 480, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 480, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 480, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 480, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 480, "\u7528\u6237\u9700\u8981\u6309\u7167": 480, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 480, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 480, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 480, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 480, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 480, "defaultpropertyappbas": 480, "\u6216": [480, 481, 482, 483, 486, 488], "parallelpropertyappbas": 480, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 480, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 480, "defaultappbas": 480, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 480, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 480, "\u5176\u5e94\u8be5\u662f": 480, "defaultpropertycontextbas": 480, "parallelpropertycontextbas": 480, "defaultcontextbas": 480, "\u6216\u8005": [480, 482, 489, 490], "\u7684\u7684\u5b50\u7c7b": 480, "\u901a\u8fc7\u7ee7\u627f": 480, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 480, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 480, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 480, "client\u4e2dquery\u8fd4\u56de\u7684context": 480, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 480, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 480, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 480, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 480, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 480, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 480, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 480, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 480, "\u8fd9\u4e2a\u9700\u6c42": 480, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 480, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 480, "graphscope_repo": 480, "app_class_nam": 480, "java_path": 480, "path_to_your_jar": 480, "param_str": 480, "params_str": 480, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 480, "app\u7684\u7c7b\u7684\u5168\u540d": 480, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 480, "\u53ef\u4ee5\u901a\u8fc7": 480, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 480, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 480, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 480, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 480, "\u53ef\u4ee5": 480, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 480, "jar_path": 480, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 480, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 480, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 480, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 480, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 480, "\u7684app": 480, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 480, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 480, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [480, 481, 483], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 480, "\u76f8\u5173\u8bba\u6587": 480, "wenfei": 480, "jingbo": 480, "xu": 480, "wenyuan": 480, "yu": 480, "jingren": 480, "zhou": 480, "xiaojian": 480, "luo": 480, "qiang": 480, "yin": 480, "cao": 480, "ruiqi": 480, "tod": [480, 486], "yinghui": 480, "wu": 480, "jiaxin": 480, "jiang": 480, "43rd": 480, "zeyu": 480, "zheng": 480, "bohan": 480, "chao": 480, "tian": 480, "\u4ee5": [481, 484, 485, 487, 490], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 481, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [481, 483], "\u5982\u679c\u8fd0\u884c": 481, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 481, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 481, "\u56e0\u6b64": [481, 482, 484], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 481, "\u4f1a\u8bdd": [481, 484], "\u5ba2\u6237\u7aef": [481, 482, 486], "\u5b83\u5c01\u88c5": 481, "\u7ba1\u7406\u7740": 481, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 481, "\u5e76": 481, "\u8fde\u63a5": 481, "\u64cd\u4f5c\u7528\u6237\u5728": 481, "\u96c6\u7fa4\u4e0a\u7684": 481, "\u5f15\u64ce": 481, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 481, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 481, "\u5b9e\u4f8b": 481, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 481, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 481, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 481, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 481, "\u8def\u5f84": [481, 490], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 481, "\u7136\u540e": [481, 489], "\u5c06\u5176\u901a\u8fc7": 481, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 481, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 481, "\u8282\u70b9\u7684\u6982\u5ff5": 481, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 481, "\u521b\u5efa\u7684\u96c6\u7fa4": 481, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 481, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 481, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 481, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 481, "\u4e0a\u7684\u4e00\u4e2a": 481, "\u5b9e\u4f8b\u5305\u542b": 481, "\u4e00\u4e2a\u8fd0\u884c": 481, "\u7684": [481, 482, 483, 486, 491], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 481, "\u8d1f\u8d23\u5bf9": 481, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 481, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 481, "\u5f15\u64ce\u5bb9\u5668\u7684": 481, "replicaset": 481, "\u5bf9\u8c61": 481, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 481, "\u901a\u8fc7": [481, 484], "\u63a5\u6536\u6765\u81ea": 481, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 481, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 481, "\u56fe\u67e5\u8be2\u5f15\u64ce": 481, "\u56fe\u5b66\u4e60\u5f15\u64ce": [481, 486], "\u7684\u751f\u547d\u5468\u671f": 481, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 481, "\u8bf7\u5728": 481, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 481, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 481, "\u5b89\u88c5": [481, 486], "release_nam": 481, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 481, "\u53c2\u8003": 481, "\u8be5\u94fe\u63a5": 481, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 481, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 481, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 481, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 481, "\u96c6\u7fa4": [481, 483, 487], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 481, "\u7528\u6cd5\u5982\u4e0b": 481, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 481, "launch_clust": 481, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 481, "boto3": 481, "your_access_key_id": 481, "your_access_key_secret": 481, "region": 481, "your_region_nam": 481, "kube_config_path": 481, "alibabacloud_cs20151215": 481, "alibabacloud_ecs20140526": 481, "alibabacloud_vpc20160428": 481, "your_region_id": 481, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 481, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 481, "\u5e73\u53f0\u4e0a": 481, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 481, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 481, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 481, "\u672c\u5730\u90e8\u7f72": 481, "graphscope_env": [481, 482], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 482, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 482, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 482, "\u9075\u5faa": 482, "\u7684\u5f00\u6e90\u534f\u8bae": 482, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 482, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 482, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 482, "\u955c\u50cf": 482, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 482, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 482, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 482, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 482, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 482, "\u6267\u884c": 482, "10240m": 482, "minitest": 482, "unittest": 482, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 482, "\u6bd4\u5982": [482, 490], "\u56fe\u5206\u6790\u5f15\u64ce": [482, 486], "\u6a21\u5757": 482, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 482, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 482, "\u7684\u6784\u5efa\u8fc7\u7a0b": 482, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 482, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 482, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 482, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 482, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 482, "\u4e3a": [482, 483, 484], "shortsha": 482, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 482, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 482, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 482, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 482, "\u90a3\u4e48": 482, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 482, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 482, "\u5ba2\u6237\u7aef\u5373\u53ef": 482, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 482, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 482, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 482, "\u4e0b\u7684": 482, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 482, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 482, "install_prefix": 482, "\u4e0b\u5206\u522b\u6784\u5efa": 482, "\u7531\u4e8e": 482, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 482, "\u975edocker": 482, "\u4e2d\u8fdb\u884c": 482, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 482, "\u7684\u4f9d\u8d56": 482, "\u57fa\u4e8e\u5f53\u524d": 482, "\u73af\u5883\u4e0b\u7684": 482, "\u7248\u672c\u6784\u5efa": 482, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [482, 484], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 482, "\u7248\u672c": [482, 487], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 482, "conda": 482, "pyenv": 482, "\u5b89\u88c5\u591a\u4e2a": 482, "\u7684\u7248\u672c": 482, "\u98ce\u683c": 482, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 482, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 482, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 482, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 483, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 483, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 483, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 483, "\u6216\u8005\u5728": 483, "\u4e0e\u6211\u4eec\u8054\u7cfb": 483, "\u8fd0\u884c": 483, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 483, "\u5728\u901a\u8fc7": 483, "\u5ba2\u6237\u7aef\u4f7f\u7528": 483, "\u8fc7\u7a0b\u4e2d": 483, "\u9700\u8981\u7684\u6700\u4f4e": 483, "\u7248\u672c\u662f3": 483, "\u6700\u4f4epip\u7248\u672c\u662f": 483, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 483, "\u5355\u673a\u60c5\u51b5\u4e0b": 483, "\u8d44\u6e90\u9700\u6c42": 483, "\u6838": 483, "\u5185\u5b58": 483, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 483, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 483, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 483, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 483, "\u662f\u5426\u5f3a\u4f9d\u8d56": 483, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 483, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 483, "\u7684\u5f62\u5f0f\u5206\u53d1": 483, "\u53ef\u4ee5\u7528": 483, "\u5feb\u901f\u5b89\u88c5": 483, "\u5982\u4f55\u5982\u67e5\u770b": 483, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 483, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 483, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 483, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 483, "\u53ef\u4ee5\u4f7f\u7528": [483, 489], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 483, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 483, "\u7684\u78c1\u76d8": 483, "\u4e5f\u53ef\u5728": 483, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 483, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 483, "\u547d\u4ee4\u65f6": 483, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 483, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 483, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 483, "\u8fdb\u884c\u5220\u9664": 483, "\u901a\u5e38\u60c5\u51b5\u4e0b": 483, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 483, "\u90e8\u7f72": [483, 486], "\u65f6": [483, 484], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 483, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 483, "\u7b49\u6743\u9650": 483, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 483, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 483, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 483, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 483, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 483, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 483, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 483, "\u76ee\u524d": [483, 490], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 483, "\u53ef\u901a\u8fc7": 483, "\u8be5\u6587\u6863": 483, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 483, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 483, "\u5982\u679c": 483, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 483, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 483, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 483, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 483, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 483, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 483, "\u8f7d\u56fe\u9636\u6bb5": 483, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 483, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 483, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 483, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 483, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 483, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 483, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 483, "\u53ef\u89c1": 483, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 483, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 483, "\u90e8\u7f72\u7684": 483, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 483, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 483, "\u865a\u62df\u7684": 483, "\u6709\u4ec0\u4e48\u533a\u522b": 483, "\u5982\u4f55\u8bbe\u7f6e": 483, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 483, "\u5b83\u5b58\u50a8\u7531": 483, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 483, "\u7684\u5143\u4fe1\u606f": 483, "\u4f8b\u5982\u5f62\u72b6": 483, "\u540d\u79f0\u7b49": 483, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 483, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 483, "\u5b83\u76f8\u5f53\u4e8e": 483, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 483, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 483, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 483, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 483, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 483, "\u7684\u540c\u6837\u5927\u5c0f": 483, "\u5bfc\u81f4\u5728": 483, "\u73af\u5883\u4e0b\u5b89\u88c5": 483, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 483, "\u7f16\u8bd1": 483, "\u5931\u8d25": 483, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 483, "\u8be6\u60c5\u53ef\u53c2\u8003": 483, "\u4f60\u53ef\u4ee5\u6839\u636e": 483, "\u6b64\u6559\u7a0b": 483, "\u6765\u6e90\u7801\u7f16\u8bd1": 483, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 483, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 483, "\u4e0a\u5206\u914d": 483, "\u65f6\u9047\u5230\u4e86": 483, "\u95ee\u9898": 483, "\u5982\u4f55\u89e3\u51b3": 483, "\u901a\u5e38\u5f53\u4f7f\u7528": 483, "\u7684\u65b9\u5f0f\u5b89\u88c5": 483, "\u4f1a\u62a5": 483, "\u9519\u8bef": [483, 485], "\u6211\u4eec\u901a\u8fc7": 483, "\u6765\u67e5\u770b\u65e5\u5fd7": 483, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 483, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 483, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 483, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 483, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 483, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 483, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 483, "\u7136\u540e\u5c06": 483, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 483, "\u4e3a\u4ec0\u4e48\u5728": 483, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 483, "\u5b9e\u4f8b\u65f6": 483, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 483, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 483, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 483, "\u96c6\u7fa4\u62c9\u8d77": 483, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 483, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 483, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 483, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 483, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 483, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 483, "\u6216\u5bb9\u5668": 483, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 483, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 483, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 483, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 483, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 483, "\u4ee5\u53ca": [483, 490], "\u8bf7\u6ce8\u610f": 483, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 483, "stackexchang": 483, "23452": 483, "\u5176\u4ed6\u95ee\u9898": 483, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 483, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 483, "\u540c\u65f6": [483, 488], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 483, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 484, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 484, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 484, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 484, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 484, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 484, "\u4f7f\u7528": [484, 486, 489, 490, 491], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 484, "\u6570\u636e\u96c6": 484, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 484, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 484, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 484, "\u5373\u8bba\u6587": 484, "\u4f5c\u8005": 484, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 484, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 484, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 484, "\u7ed9\u51fa\u5f02\u6784\u7684": 484, "\u6570\u636e": 484, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 484, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 484, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 484, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 484, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 484, "\u5728\u8be5\u6570\u636e\u4e2d": 484, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 484, "\u6458\u8981\u62bd\u53d6\u7684": 484, "\u7ef4": 484, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 484, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 484, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 484, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 484, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 484, "\u5ba2\u6237\u7aef\u8c03\u7528": 484, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 484, "\u6b65\u9aa4": 484, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 484, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 484, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 484, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 484, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 484, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 484, "\u7684\u7b2c\u4e00\u6b65": 484, "\u6211\u4eec\u9700\u8981\u5728": 484, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 484, "\u5bf9\u4e8e": [484, 487], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 484, "\u670d\u52a1\u7c7b\u578b": 484, "\u9ed8\u8ba4\u662f": 484, "\u53e6\u5916": [484, 490], "\u6ce8\u610f": [484, 487], "\u662f": 484, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 484, "\u5f53\u5728": 484, "\u4e0a\u4f7f\u7528": 484, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 484, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 484, "\u901a\u5e38\u4e3a": 484, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 484, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 484, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 484, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 484, "\u8be5": 484, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 484, "\u6240\u6709\u8d44\u6e90": 484, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 484, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 484, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 484, "\u90fd\u6709\u4e00\u4e2a": 484, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 484, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 484, "\u8f7d\u56fe": [484, 485, 486], "\u4ee5\u5c5e\u6027\u56fe": 484, "\u5efa\u6a21\u56fe\u6570\u636e": [484, 490], "\u5c5e\u6027\u56fe\u4e2d": 484, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 484, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 484, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 484, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 484, "\u5206\u522b\u6807\u8bb0\u4e3a": 484, "\u8bba\u6587": 484, "\u673a\u6784": 484, "\u7814\u7a76\u9886\u57df": 484, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 484, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 484, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 484, "\u5f15\u7528": 484, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 484, "\u9876\u70b9": 484, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 484, "\u64b0\u5199": 484, "\u7684\u8fb9": [484, 490], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 484, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 484, "\u6240\u6709\u7684\u9876\u70b9": 484, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 484, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 484, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 484, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 484, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 484, "\u6570\u636e\u6587\u4ef6": 484, "\u7ed3\u5408\u4f7f\u7528": 484, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 484, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 484, "author_affiliated_with_institut": 484, "paper_has_topic_field_of_studi": 484, "hastop": 484, "paper_cites_pap": 484, "author_writes_pap": 484, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 484, "\u8fd9\u91cc\u7684": 484, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 484, "\u4e2d\u7684\u56fe": 484, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 484, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 484, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 484, "\u63a2\u7d22\u6027": 484, "\u65b9\u5f0f\u6765\u63a2\u7d22": 484, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 484, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 484, "\u91c7\u7528\u79f0\u4e3a": 484, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 484, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 484, "\u5728\u6b64\u793a\u4f8b\u4e2d": 484, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 484, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 484, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 484, "\u552f\u4e00\u6807\u8bc6": 484, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 484, "\u4e8b\u5b9e\u8bc1\u660e": 484, "\u8bb8\u591a\u7b97\u6cd5": 484, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 484, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 484, "\u96c6\u4e2d\u6027": 484, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 484, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 484, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 484, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 484, "\u80cc\u540e\u57fa\u4e8e": 484, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 484, "\u7136\u540e\u8fd0\u884c": 484, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 484, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 484, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 484, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 484, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 484, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 484, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 484, "\u5f53\u524d": 484, "\u652f\u6301\u7528\u6237\u4ee5": 484, "\u6a21\u578b\u548c": 484, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 484, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 484, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 484, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 484, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 484, "\u6211\u4eec\u8bad\u7ec3\u4e86": 484, "\u6a21\u578b": 484, "\u5c06\u8282\u70b9": 484, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 484, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 484, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 484, "\u4e3a\u6b64": 484, "\u63a5\u7740\u4e0a\u4e00\u6b65": 484, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 484, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 484, "train_gcn": 484, "\u6700\u540e": [484, 485, 488], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 484, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 484, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 484, "\u548c\u5f15\u64ce": 484, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 484, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 485, "\u6295\u5f71\u7684\u65b9\u6cd5": 485, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 485, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 485, "\u5177\u4f53\u800c\u8a00": 485, "\u56fe": 485, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 485, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 485, "\u6211\u4eec\u5df2\u7ecf\u5728": 485, "\u4e00\u8282\u89c1\u5230\u8fc7": 485, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 485, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 485, "\u8fdb\u4e00\u6b65\u7684": 485, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 485, "\u4e2d\u4e4b\u540e": 485, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 485, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 485, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 485, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 485, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 485, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 485, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 485, "pathlib": 485, "\u5230\u8fd9\u91cc": 485, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 485, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 485, "graph1": 485, "graph2": 485, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 485, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 485, "\u5728\u5e95\u5c42": 485, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 485, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 485, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 485, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 485, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 485, "\u6765\u5b8c\u6210": 485, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 485, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 485, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 485, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 485, "\u503c\u53ef\u4ee5\u4e3a": 485, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 485, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 485, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 485, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 485, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 485, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 485, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 485, "sub_graph2": 485, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 485, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 485, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 485, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 485, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 485, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 485, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 485, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 485, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 485, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 485, "\u8fb9\u6807\u7b7e": 485, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 485, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 485, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 485, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 485, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 485, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 485, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 485, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 486, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 486, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 486, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 486, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 486, "\u63d0\u4f9b\u4e86": 486, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 486, "\u5177\u6709\u4e00\u7ad9\u5f0f": 486, "\u5f00\u53d1\u4fbf\u6377": 486, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 486, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 486, "\u5305\u62ec": [486, 489], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 486, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 486, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 486, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 486, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 486, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 486, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 486, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 486, "\u5982\u98ce\u63a7": 486, "\u7535\u5546\u63a8\u8350": 486, "\u5e7f\u544a": 486, "\u7f51\u7edc\u5b89\u5168": [486, 489], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 486, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 486, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 486, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 486, "\u6700\u4f73\u8bba\u6587\u5956": 486, "vldb2017": 486, "\u6700\u4f73\u6f14\u793a\u5956": 486, "vldb2020": 486, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 486, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 486, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 486, "2021\u5f55\u7528": 486, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 486, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 486, "kdd\u7b49": 486, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 486, "\u57fa\u4e8e": [486, 491], "\u793a\u4f8b": 486, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 486, "\u521b\u5efa\u4f1a\u8bdd": 486, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 486, "\u56fe\u5206\u6790": 486, "\u56fe\u795e\u7ecf\u7f51\u7edc": 486, "\u5173\u95ed\u4f1a\u8bdd": 486, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 486, "\u5728aw": 486, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 486, "\u672c\u5730\u90e8\u7f72graphscop": 486, "\u5165\u95e8\u6559\u7a0b": 486, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [486, 491], "\u4f7f\u7528\u517c\u5bb9": [486, 491], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [486, 491], "\u7528": [486, 488, 491], "\u50cf": [486, 491], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [486, 491], "\u8f7d\u5165\u56fe\u6570\u636e": [486, 491], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [486, 491], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [486, 491], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [486, 491], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [486, 491], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [486, 491], "bipartitegraphsag": [486, 491], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [486, 491], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [486, 491], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [486, 491], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 486, "\u624b\u52a8\u914d\u7f6e\u56fe": 486, "\u9ad8\u7ea7\u7528\u6cd5": 486, "\u4ece": [486, 488], "\u4e2d\u8f7d\u56fe": 486, "\u7684\u53d8\u79cd": 486, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 486, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 486, "\u6295\u5f71": 486, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 486, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 486, "\u5185\u7f6e\u7b97\u6cd5": 486, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 486, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 486, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 486, "\u4e2d\u7684\u51fd\u6570": 486, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 486, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 486, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 486, "\u5229\u7528python": 486, "\u8fde\u63a5graphscop": 486, "\u5229\u7528java": 486, "\u5f00\u53d1\u63a7\u5236\u53f0": 486, "gremlin\u7f16\u7a0b\u5165\u95e8": 486, "gremlin\u517c\u5bb9\u6027": 486, "\u5bf9\u6bd4tinkerpop": 486, "\u56fe\u5b66\u4e60\u6a21\u578b": 486, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 486, "\u5e38\u89c1\u95ee\u9898": 486, "\u5f00\u53d1\u8005\u6307\u5357": 486, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 486, "\u6784\u5efa": 486, "\u4ee3\u7801\u98ce\u683c": 486, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 487, "monterei": 487, "\u7a0b\u5e8f\u5305": 487, "\u7684\u5f62\u5f0f\u53d1\u5e03": 487, "\u53ef\u76f4\u63a5\u901a\u8fc7": 487, "\u9700\u8981\u6ee1\u8db3": 487, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 487, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 487, "\u73af\u5883\u4e0b\u8fd0\u884c": 487, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 487, "\u7684\u7528\u6237": 487, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 487, "\u5e76\u5728": 487, "\u4e2d\u5f00\u542f": 487, "\u529f\u80fd": 487, "\u53d1\u884c\u7248\u7528\u6237": 487, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 487, "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 487, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 487, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 487, "\u4e0a\u5b89\u88c5": 487, "wsl2": 487, "\u6765\u6a21\u62df": 487, "\u73af\u5883": [487, 491], "\u63a5\u4e0b\u6765": [487, 488, 489], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 487, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 488, "\u7b80\u79f0gie": 488, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 488, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 488, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 488, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 488, "\u8be5\u5f15\u64ce\u652f\u6301": 488, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 488, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 488, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 488, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 488, "\u63a5\u53e3": [488, 489], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 488, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 488, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 488, "\u5982\u4e0b\u6240\u793a": 488, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 488, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 488, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 488, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 488, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 488, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 488, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 488, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 488, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 488, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 488, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 488, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 488, "\u683c\u5f0f": 488, "\u7684\u8f93\u51fa": 488, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 488, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 488, "python\u8bbf\u95ee\u56fe\u6570\u636e": 488, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 488, "\u5b98\u65b9\u6587\u6863": 488, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 488, "\u8be6\u89c1gremlin": 488, "java\u7684": 488, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 488, "\u4e5f\u53eb\u505arepl\u73af\u5883": 488, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 488, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 488, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 488, "\u5b89\u88c5gremlin": 488, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 488, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 488, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 488, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 488, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 488, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 488, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 488, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 488, "\u5176\u4e2d\u7684": 488, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 488, "\u6216ip": 488, "\u548c\u7aef\u53e3": 488, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 488, "\u63d0\u793a\u7b26\u4e0b": 488, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 488, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 488, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 488, "\u8fdc\u7a0b": 488, "graphscope\u6267\u884c": 488, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 488, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 488, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 488, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 488, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 488, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 488, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 488, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 488, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 488, "hoc": 488, "\u904d\u5386\u67e5\u8be2": 488, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 488, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 488, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 488, "\u70b9\u6216\u8fb9": 488, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 488, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 488, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 488, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 488, "\u952e": 488, "\u503c": 488, "\u5bf9": 488, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 488, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 488, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 488, "\u5b83\u5305\u542b": 488, "\u7528\u6237": 488, "\u5546\u54c1": 488, "\u5730\u5740": 488, "\u4e09\u7c7b\u70b9": 488, "\u5b83\u4eec\u901a\u8fc7": 488, "\u8d2d\u4e70": 488, "\u9012\u9001": 488, "belongs_to": 488, "\u5c5e\u4e8e": 488, "home_of": 488, "\u5bb6\u5ead\u5730\u5740": 488, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 488, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 488, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 488, "\u8def\u5f841": 488, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 488, "\u4e70\u5bb6": 488, "tom": 488, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 488, "jack": 488, "\u63d0\u4f9b\u7684\u6807\u4ef7": 488, "\u7684\u5546\u54c1": 488, "gift": 488, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 488, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 488, "\u904d\u5386\u5668": 488, "\u6807\u8bc6": 488, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 488, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 488, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 488, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 488, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 488, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 488, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 488, "\u8fb9\u6216\u5c5e\u6027": 488, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 488, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 488, "\u5d4c\u5957\u904d\u5386": 488, "\u7684\u652f\u6301": 488, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 488, "\u5b50": 488, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 488, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 488, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 488, "\u8fc7\u6ee4": 488, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 488, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 488, "\u800c": 488, "\u6620\u5c04": 488, "\u6392\u5e8f": 488, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 488, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 488, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 488, "\u5728gremlin\u4e2d\u901a\u8fc7": 488, "\u5faa\u73af": 488, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 488, "\u7ec8\u6b62\u6761\u4ef6": 488, "\u8868\u8fbe": 488, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 488, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 488, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 488, "\u6761\u4ef6\u7ec8\u6b62": 488, "\u64cd\u4f5c\u7c7b\u4f3c": 488, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 488, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 488, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 488, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 488, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 488, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 488, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 488, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 488, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 488, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 488, "\u7684\u6709\u5411\u73af\u8def": 488, "\u9996\u5148": [488, 490], "\u8f93\u5165\u56fe\u64cd\u4f5c": 488, "\u5305\u542b\u4e00\u4e2a": 488, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 488, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 488, "\u70b9": 488, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 488, "\u7684\u70b9": 488, "\u7d27\u968f\u5176\u540e\u7684": 488, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 488, "\u4fee\u9970\u7b26": 488, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 488, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 488, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 488, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 488, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 488, "\u67e5\u8be2\u6cbf\u7740": 488, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 488, "\u6b21": 488, "\u8f93\u51fahops\u5728": 488, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 488, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 488, "\u901a\u8fc7\u5728": 488, "\u5185\u914d\u7f6e": 488, "\u9009\u9879\u5b9e\u73b0": 488, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 488, "\u6307\u4ee3": 488, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 488, "\u7684\u73af": 488, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 488, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 488, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 488, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 488, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 488, "\u5982\u679c\u6709\u7684\u8bdd": 488, "gie\u652f\u6301apach": 488, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 488, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 488, "3\u548c3": 488, "4\u7248\u672c\u517c\u5bb9\u7684": 488, "\u670d\u52a1\u63a5\u53e3": 488, "\u9664\u6b64\u4e4b\u5916": 488, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 488, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 488, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 488, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 488, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 488, "\u76ee\u524d\u7684": 488, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 488, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 488, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 488, "\u4e0d\u53ef\u4fee\u6539": 488, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 488, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 488, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 488, "\u7ea6\u675f": 488, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 488, "\u5305\u62ec\u70b9": 488, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 488, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 488, "\u4e3b\u952e\u7ea6\u675f": 488, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 488, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 488, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 488, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 488, "id\u7f16\u7801\u4e86\u7c7b\u578b": 488, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 488, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 488, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 488, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 488, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 488, "\u56fe\u4fee\u6539\u64cd\u4f5c": 488, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 488, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 488, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 488, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 488, "\u4e8b\u52a1": 488, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 488, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 488, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 488, "\u548c\u793a\u4f8b\u7528\u6cd5": 488, "\u8f93\u5165\u56fe": 488, "labelnam": 488, "labelname1": 488, "labelname2": 488, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 488, "\u8bed\u6cd5\u7cd6": 488, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 488, "\u4ee3\u8868": 488, "\u8282\u70b9\u7684age\u5c5e\u6027": 488, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 488, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 488, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 488, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 488, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 488, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 488, "dedup": 488, "aaa": 488, "otherv": 488, "flatmap": 488, "\u591a\u91cd\u6620\u5c04": 488, "bothv": 488, "\u627e\u5230\u6240\u6709\u4ece": 488, "\u5f00\u59cb\u901a\u8fc7": 488, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 488, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 488, "\u70b9\u4e0d\u91cd\u590d": 488, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 488, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 488, "\u70b9\u53ef\u91cd\u590d": 488, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 488, "\u805a\u5408": 488, "groupbi": 488, "groupby\u591a\u4e2akei": 488, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 488, "groupby\u591a\u4e2avalu": 488, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 488, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 488, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 488, "\u4f1a\u9010\u6b65\u652f\u6301": 488, "\u53ef\u4ee5\u901a\u8fc7path": 488, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 488, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 488, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 488, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 488, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 488, "\u8ba1\u7b97\u5b50\u56fe": 488, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 488, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 488, "cap": 488, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 488, "\u4f8b\u5982pagerank\u548cshortestpath": 488, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 488, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 489, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 489, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 489, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 489, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 489, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 489, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 489, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 489, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 489, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 489, "\u57fa\u4e8egl": 489, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 489, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 489, "\u4f8b\u5982\u56fe\u91c7\u6837": 489, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 489, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 489, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 489, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 489, "\u539f\u59cb\u7684gcn": 489, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 489, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 489, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 489, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 489, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 489, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 489, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 489, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 489, "graphsaint\u7b49": 489, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 489, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 489, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 489, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 489, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 489, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 489, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 489, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 489, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 489, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 489, "\u5305\u62ectensorflow": 489, "\u548cpytorch": 489, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 489, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 489, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 489, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 489, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 489, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 489, "\u79f0\u4e3a": 489, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 489, "\u611f\u53d7\u91ce": 489, "\u591a\u8df3\u90bb\u5c45": 489, "\u7ec4\u6210": 489, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 489, "\u6211\u4eec\u5b9e\u73b0": 489, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 489, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 489, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 489, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 489, "\u7136\u540e\u7528": 489, "\u7ba1\u7406": 489, "\u5230": 489, "\u7684\u8f6c\u6362": 489, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 489, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 489, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 489, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 489, "\u5411\u91cf": 489, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 489, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 489, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 489, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 489, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 489, "\u56fe\u7f16\u7801\u5668": 489, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 489, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 489, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 489, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 489, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 489, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 489, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 489, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 489, "\u5982tensorflow": 489, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 489, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 489, "\u901a\u5e38\u6765\u8bf4": 489, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 489, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 489, "\u7528\u56fe\u91c7\u6837": 489, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 489, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 489, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 489, "\u4ee5\u8fd9\u4e9b": 489, "\u4e3a\u8f93\u5165\u4ea7\u751f": 489, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 489, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 489, "\u4ea7\u751f\u8d1f\u6837\u672c": 489, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 489, "\u6211\u4eec\u62bd\u8c61\u4e86": 489, "\u6765\u91c7\u6837\u90bb\u5c45": 489, "\u6700\u540e\u5c06": 489, "\u4ea7\u751f\u7684": 489, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 489, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 489, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 489, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 489, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 489, "\u624d\u80fd\u4f7f\u7528": 489, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 489, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 489, "\u5b9a\u4e49\u7f16\u7801\u5668": 489, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 489, "\u5f97\u5230": 489, "\u540e": 489, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 489, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 489, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 489, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 489, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 489, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 489, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 489, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 489, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 489, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 489, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 489, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 489, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 489, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 489, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 489, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 489, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 489, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 489, "\u6765": 489, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 489, "\u9700\u8981\u7684\u683c\u5f0f": 489, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 489, "\u5206\u522b\u662f\u70b9\u8868": 489, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 489, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 489, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 489, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 489, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 489, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 489, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 489, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 489, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 489, "\u56de\u4e00\u8df3\u90bb\u5c45": 489, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 489, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 489, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 489, "\u56e0\u6b64\u9009\u62e9": 489, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 489, "\u6210": 489, "\u8fd4\u56de": 489, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 489, "\u6765\u628a": 489, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 489, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 489, "\u4f60\u53ef\u4ee5\u4ece": 489, "\u83b7\u53d6\u548c\u524d\u9762": 489, "\u5bf9\u5e94\u7684": 489, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 489, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 489, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 489, "\u56e0\u4e3a": 489, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 489, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 489, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 489, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 489, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 489, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 489, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 489, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 489, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 489, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 489, "\u7136\u540e\u5728": 489, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 489, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 489, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 489, "\u6765\u8fdb\u884c\u8bad\u7ec3": 489, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 489, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 489, "\u76ee\u5f55": 489, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 489, "gat\u7b49\u6a21\u578b": 489, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 489, "\u5c5e\u6027\u56fe": 490, "\u56fe\u4e0a\u7684\u70b9": 490, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 490, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 490, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 490, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 490, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 490, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 490, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 490, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 490, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 490, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 490, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 490, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 490, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 490, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 490, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 490, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 490, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 490, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 490, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 490, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 490, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 490, "\u7684\u672c\u5730\u8def\u5f84": 490, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 490, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 490, "\u662f\u6211\u4eec\u901a\u8fc7": 490, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 490, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 490, "\u4f60\u53ef\u4ee5\u5728": 490, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 490, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 490, "\u7136\u800c": 490, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 490, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 490, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 490, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 490, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 490, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 490, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 490, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 490, "\u6211\u4eec\u5c06\u4f7f\u7528": 490, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 490, "\u627e\u5230\u6e90\u6570\u636e": 490, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 490, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 490, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 490, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 490, "\u4ee3\u8868\u6570\u636e\u6e90": 490, "\u6307\u793a": 490, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 490, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 490, "\u6570\u7ec4\u7b49": 490, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 490, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 490, "\u8f7d\u5165\u6570\u636e": 490, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 490, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 490, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 490, "\u9ed8\u8ba4\u4e3a": 490, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 490, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 490, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 490, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 490, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 490, "\u4e3e\u4e2a\u4f8b\u5b50": 490, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 490, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 490, "\u53ef\u9009\u9879": 490, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 490, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 490, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 490, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 490, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 490, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 490, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 490, "\u6bd4\u5982\u8bf4": 490, "\u5217\u7684\u5217\u540d": 490, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 490, "\u6216\u76ee\u6807\u70b9": 490, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 490, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 490, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 490, "\u4ee3\u8868\u7b2c\u51e0\u5217": 490, "\u4ece0\u5f00\u59cb": 490, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 490, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 490, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 490, "\u7c7b\u4f3c": 490, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 490, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 490, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 490, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 490, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 490, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 490, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 490, "\u8fb9\u7684\u6807\u7b7e\u540d": 490, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 490, "\u4e00\u5217\u5c5e\u6027": 490, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 490, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 490, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 490, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 490, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 490, "\u4e3e\u4f8b\u6765\u8bf4": 490, "\u8d77\u70b9\u7684": 490, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 490, "\u5217\u540d": 490, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 490, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 490, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 490, "\u4e00\u5217\u4e3a\u8d77\u70b9": 490, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 490, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 490, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 490, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 490, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 490, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 490, "\u5982\u679c\u7528\u6237\u7684": 490, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 490, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 490, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 490, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 490, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 490, "\u6709\u4e00\u4e2a\u540d\u4e3a": 490, "\u7684\u8fb9\u6807\u7b7e": 490, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 490, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 490, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 490, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 490, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 490, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 490, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 490, "\u50cf\u8fd9\u6837": 490, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 490, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 490, "\u5728\u8fd9\u91cc": 490, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 490, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 490, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 490, "\u7b49\u7c7b\u578b": 490, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 490, "\u5206\u522b\u4e3a": 490, "\u53ef\u4ee5\u4e3a": 490, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 490, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 490, "\u5f53id\u4e0d\u80fd\u7528": 490, "\u8868\u793a\u65f6": 490, "\u624d\u5e94\u8be5\u4f7f\u7528": 490, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 490, "\u5efa\u8bae\u4f7f\u7528": 490, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 490, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 490, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 490, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 490, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 490, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 490, "\u5c5e\u6027\u56fe\u7684": 490, "\u4f8b\u5b50": 490, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 490, "\u7684\u7c7b": 490, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 490, "\u652f\u6301\u4ece": 490, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 490, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 490, "\u9664\u4e86": 490, "\u5916": 490, "\u5176\u4ed6\u5c5e\u6027": 490, "id\u5217": 490, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 490, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 490, "\u6211\u4eec\u5c06\u5176\u4ee5": 490, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 490, "\u5f53": 490, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 490, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 490, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 490, "\u6807\u51c6": 490, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 490, "\u5c06\u4f1a\u89e3\u6790": 490, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 490, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 490, "\u672c\u5730": 490, "\u6570\u636e\u7531": 490, "\u8d1f\u8d23\u8f7d\u5165": 490, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 490, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 490, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 490, "\u4e4b\u4e8e": 490, "\u6216\u8005\u662f": 490, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 490, "\u6bd4\u5982\u53c2\u7167": 490, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 490, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 490, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 490, "abstractbufferedfil": 490, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 490, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 490, "write\u529f\u80fd": 490, "\u6700\u540e\u901a\u8fc7": 490, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 490, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 491, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 491, "\u5982\u4f55\u8f7d\u56fe": 491, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 491, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 491, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 491, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 491, "\u6211\u4eec\u7528jupyt": 491, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 491, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 491, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 491, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 491, "lab": 491, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 491, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 491}, "objects": {"": [[247, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [247, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [247, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [247, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [247, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [247, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [247, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [247, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [247, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [247, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [247, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [247, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [247, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [247, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [247, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [247, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [247, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [247, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [247, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [247, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [247, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [247, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [247, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [247, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [247, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [247, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [247, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [247, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [247, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [247, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [247, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [247, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [247, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [247, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [247, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [247, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [247, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [247, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [247, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [247, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [247, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [247, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [247, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [247, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [247, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [247, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [247, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [247, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [247, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [247, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [247, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [247, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [247, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [247, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [247, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [247, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [247, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [247, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [247, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [247, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [247, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [247, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [247, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [247, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [247, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [247, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [247, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [247, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [247, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [247, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [247, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [247, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [247, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [247, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [247, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [247, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [247, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [247, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [247, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [247, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [247, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [247, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [247, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [247, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [247, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [247, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [247, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [247, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [247, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [247, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [247, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [247, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [247, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [247, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [247, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [247, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [247, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [247, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [247, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [247, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [247, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [247, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [247, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [247, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [247, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [247, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [247, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [247, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [247, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [247, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [247, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [247, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [247, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [247, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [247, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [247, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [247, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [247, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [247, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [247, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [247, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [247, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [247, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [247, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [247, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [247, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [247, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [247, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [247, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [247, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [247, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [247, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [247, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [247, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [247, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [247, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [247, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [247, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [247, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [247, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [247, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [247, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [247, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [247, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [247, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [247, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [247, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [247, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [247, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [247, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [247, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [247, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [247, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [247, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [247, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [247, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [247, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [247, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [247, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [247, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [247, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [247, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [247, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [247, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [247, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [247, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [247, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [247, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [247, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [247, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [247, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [247, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [247, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [247, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [247, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [247, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [247, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [247, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [247, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [247, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [247, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [247, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [247, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [247, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [247, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [247, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [247, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [247, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [247, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [247, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [247, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [247, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [247, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [247, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [247, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [247, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [247, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [247, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [247, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [247, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [247, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [247, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [247, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [247, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [247, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [247, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [247, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [247, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [247, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [247, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [247, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [247, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [247, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [247, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [247, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [247, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [247, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [247, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [247, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [247, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [247, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [247, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [247, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [247, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [247, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [247, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [247, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [247, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [247, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [247, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [247, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [247, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [247, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [247, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [247, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [247, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [247, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [247, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [247, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [247, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [247, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [247, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [247, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [247, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [247, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [247, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [247, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [247, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [247, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [247, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [247, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [247, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [247, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [247, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [247, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [247, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [247, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [247, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [247, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [247, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [247, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [247, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [247, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [247, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [247, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [247, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [247, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [247, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [247, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [247, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [247, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [247, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [247, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [247, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [247, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [247, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [247, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [247, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [247, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [247, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [247, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [247, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [247, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [247, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [247, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [247, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [247, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [247, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [247, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [247, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [247, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [247, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [247, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [247, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [247, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [247, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [247, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [247, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [247, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [247, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [247, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [247, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [247, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [247, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [247, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [247, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [247, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [247, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [247, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [247, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [247, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [247, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [247, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [247, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [247, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [247, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[464, 9, 1, "", "Session"], [254, 12, 1, "", "Vertex"], [248, 8, 1, "", "attribute_assortativity_coefficient"], [248, 8, 1, "", "average_degree_connectivity"], [248, 8, 1, "", "average_shortest_path_length"], [248, 8, 1, "", "avg_clustering"], [248, 8, 1, "", "bfs"], [248, 8, 1, "", "cdlp"], [248, 8, 1, "", "clustering"], [255, 8, 1, "", "declare"], [248, 8, 1, "", "degree_assortativity_coefficient"], [248, 8, 1, "", "degree_centrality"], [248, 8, 1, "", "eigenvector_centrality"], [298, 8, 1, "", "g"], [299, 8, 1, "", "get_default_session"], [300, 8, 1, "", "graphlearn"], [301, 8, 1, "", "gremlin"], [302, 8, 1, "", "has_default_session"], [248, 8, 1, "", "hits"], [248, 8, 1, "", "is_simple_path"], [248, 8, 1, "", "k_core"], [248, 8, 1, "", "k_shell"], [248, 8, 1, "", "katz_centrality"], [248, 8, 1, "", "louvain"], [248, 8, 1, "", "lpa"], [248, 8, 1, "", "lpa_u2i"], [248, 8, 1, "", "numeric_assortativity_coefficient"], [248, 8, 1, "", "pagerank"], [248, 8, 1, "", "pagerank_nx"], [303, 14, 1, "", "session"], [304, 8, 1, "", "set_option"], [248, 8, 1, "", "sssp"], [248, 8, 1, "", "triangles"], [248, 8, 1, "", "voterank"], [248, 8, 1, "", "wcc"]], "graphscope.Session": [[464, 10, 1, "", "__enter__"], [464, 10, 1, "", "__exit__"], [464, 10, 1, "", "__init__"], [464, 10, 1, "", "add_lib"], [464, 10, 1, "", "as_default"], [464, 10, 1, "", "close"], [464, 10, 1, "", "connected"], [464, 11, 1, "", "engine_config"], [464, 10, 1, "", "g"], [464, 10, 1, "", "get_config"], [464, 10, 1, "", "get_vineyard_object_mapping_table"], [464, 10, 1, "", "graphlearn"], [464, 11, 1, "", "info"], [464, 10, 1, "", "interactive"], [464, 10, 1, "", "load_from"], [464, 10, 1, "", "restore_from_pvc"], [464, 10, 1, "", "run_fetches"], [464, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[248, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[248, 10, 1, "", "__call__"], [248, 10, 1, "", "__init__"], [248, 10, 1, "", "is_compatible"], [248, 10, 1, "", "signature"]], "graphscope.framework.app": [[248, 9, 1, "", "App"], [248, 9, 1, "", "AppAssets"], [248, 9, 1, "", "AppDAGNode"], [256, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[248, 10, 1, "", "__del__"], [248, 10, 1, "", "__init__"], [248, 11, 1, "", "key"], [248, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[248, 10, 1, "", "__init__"], [248, 11, 1, "", "algo"], [248, 11, 1, "", "context_type"], [248, 11, 1, "", "gar"], [248, 10, 1, "", "is_compatible"], [248, 11, 1, "", "signature"], [248, 11, 1, "", "type"]], "graphscope.framework.context": [[249, 9, 1, "", "BaseContextDAGNode"], [249, 9, 1, "", "Context"], [249, 9, 1, "", "DynamicVertexDataContext"], [249, 9, 1, "", "LabeledVertexDataContextDAGNode"], [249, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [249, 9, 1, "", "ResultDAGNode"], [249, 9, 1, "", "TensorContextDAGNode"], [249, 9, 1, "", "VertexDataContextDAGNode"], [249, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[249, 10, 1, "", "to_dataframe"], [249, 10, 1, "", "to_numpy"], [249, 10, 1, "", "to_vineyard_dataframe"], [249, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[461, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[257, 8, 1, "", "add_column"], [258, 8, 1, "", "add_labels_to_graph"], [259, 8, 1, "", "arrow_to_dynamic"], [260, 8, 1, "", "bind_app"], [261, 8, 1, "", "clear_edges"], [262, 8, 1, "", "clear_graph"], [263, 8, 1, "", "context_to_dataframe"], [264, 8, 1, "", "context_to_numpy"], [265, 8, 1, "", "copy_graph"], [266, 8, 1, "", "create_app"], [267, 8, 1, "", "create_graph"], [268, 8, 1, "", "create_graph_view"], [269, 8, 1, "", "create_loader"], [270, 8, 1, "", "create_subgraph"], [271, 8, 1, "", "create_unload_op"], [272, 8, 1, "", "dynamic_to_arrow"], [273, 8, 1, "", "get_context_data"], [274, 8, 1, "", "graph_to_dataframe"], [275, 8, 1, "", "graph_to_numpy"], [276, 8, 1, "", "gremlin_to_subgraph"], [277, 8, 1, "", "modify_edges"], [278, 8, 1, "", "modify_vertices"], [279, 8, 1, "", "output"], [280, 8, 1, "", "project_arrow_property_graph"], [281, 8, 1, "", "project_to_simple"], [282, 8, 1, "", "report_graph"], [283, 8, 1, "", "run_app"], [284, 8, 1, "", "to_data_sink"], [285, 8, 1, "", "to_directed"], [286, 8, 1, "", "to_undirected"], [287, 8, 1, "", "to_vineyard_dataframe"], [288, 8, 1, "", "to_vineyard_tensor"], [289, 8, 1, "", "unload_app"], [290, 8, 1, "", "unload_context"], [291, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[319, 9, 1, "", "Graph"], [319, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[319, 10, 1, "", "__init__"], [319, 10, 1, "", "add_column"], [319, 10, 1, "", "add_edges"], [319, 10, 1, "", "add_vertices"], [319, 10, 1, "", "consolidate_columns"], [319, 10, 1, "", "detach"], [319, 11, 1, "", "key"], [319, 10, 1, "", "load_from"], [319, 10, 1, "", "loaded"], [319, 10, 1, "", "project"], [319, 10, 1, "", "save_to"], [319, 11, 1, "", "schema"], [319, 11, 1, "", "schema_path"], [319, 11, 1, "", "session_id"], [319, 10, 1, "", "to_dataframe"], [319, 10, 1, "", "to_directed"], [319, 10, 1, "", "to_numpy"], [319, 10, 1, "", "to_undirected"], [319, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[319, 10, 1, "", "__init__"], [319, 10, 1, "", "add_column"], [319, 10, 1, "", "add_edges"], [319, 10, 1, "", "add_vertices"], [319, 10, 1, "", "consolidate_columns"], [319, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[319, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[319, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[319, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[461, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[292, 10, 1, "", "__init__"], [293, 10, 1, "", "as_op_def"], [294, 10, 1, "", "eval"], [295, 11, 1, "", "evaluated"], [296, 11, 1, "", "key"], [297, 11, 1, "", "signature"]], "graphscope.interactive.query": [[320, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[320, 10, 1, "", "__init__"], [320, 10, 1, "", "close"], [320, 11, 1, "", "cypher_driver"], [320, 11, 1, "", "cypher_url"], [320, 10, 1, "", "execute"], [320, 11, 1, "", "graph_url"], [320, 11, 1, "", "gremlin_client"], [320, 11, 1, "", "gremlin_url"], [320, 11, 1, "", "object_id"], [320, 11, 1, "", "session"], [320, 11, 1, "", "session_id"], [320, 10, 1, "", "subgraph"], [320, 10, 1, "", "submit"], [320, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[321, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[321, 10, 1, "", "E"], [321, 10, 1, "", "V"], [321, 10, 1, "", "__init__"], [321, 10, 1, "", "get_handle"]], "graphscope.nx": [[457, 9, 1, "", "DiGraph"], [457, 9, 1, "", "Graph"], [459, 8, 1, "", "read_adjlist"], [459, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[457, 10, 1, "", "__contains__"], [457, 10, 1, "", "__getitem__"], [457, 10, 1, "", "__init__"], [457, 10, 1, "", "__iter__"], [457, 10, 1, "", "__len__"], [457, 10, 1, "", "add_edge"], [457, 10, 1, "", "add_edges_from"], [457, 10, 1, "", "add_node"], [457, 10, 1, "", "add_nodes_from"], [457, 10, 1, "", "add_weighted_edges_from"], [457, 11, 1, "", "adj"], [457, 10, 1, "", "adjacency"], [457, 14, 1, "", "adjlist_inner_dict_factory"], [457, 14, 1, "", "adjlist_outer_dict_factory"], [457, 10, 1, "", "clear"], [457, 10, 1, "", "clear_edges"], [457, 10, 1, "", "copy"], [457, 11, 1, "", "degree"], [457, 14, 1, "", "edge_attr_dict_factory"], [457, 10, 1, "", "edge_subgraph"], [457, 11, 1, "", "edges"], [457, 10, 1, "", "get_edge_data"], [457, 14, 1, "", "graph_attr_dict_factory"], [457, 14, 1, "", "graph_cache_factory"], [457, 11, 1, "", "graph_type"], [457, 10, 1, "", "has_edge"], [457, 10, 1, "", "has_node"], [457, 10, 1, "", "has_predecessor"], [457, 10, 1, "", "has_successor"], [457, 11, 1, "", "in_degree"], [457, 11, 1, "", "in_edges"], [457, 10, 1, "", "is_directed"], [457, 10, 1, "", "is_multigraph"], [457, 11, 1, "", "key"], [457, 11, 1, "", "name"], [457, 10, 1, "", "nbunch_iter"], [457, 10, 1, "", "neighbors"], [457, 14, 1, "", "node_attr_dict_factory"], [457, 14, 1, "", "node_dict_factory"], [457, 11, 1, "", "nodes"], [457, 10, 1, "", "number_of_edges"], [457, 10, 1, "", "number_of_nodes"], [457, 11, 1, "", "op"], [457, 10, 1, "", "order"], [457, 11, 1, "", "out_degree"], [457, 11, 1, "", "out_edges"], [457, 11, 1, "", "pred"], [457, 10, 1, "", "predecessors"], [457, 10, 1, "", "remove_edge"], [457, 10, 1, "", "remove_edges_from"], [457, 10, 1, "", "remove_node"], [457, 10, 1, "", "remove_nodes_from"], [457, 10, 1, "", "reverse"], [457, 11, 1, "", "schema"], [457, 11, 1, "", "session"], [457, 11, 1, "", "session_id"], [457, 10, 1, "", "set_edge_data"], [457, 10, 1, "", "set_node_data"], [457, 11, 1, "", "signature"], [457, 10, 1, "", "size"], [457, 10, 1, "", "subgraph"], [457, 11, 1, "", "succ"], [457, 10, 1, "", "successors"], [457, 10, 1, "", "to_directed"], [457, 10, 1, "", "to_undirected"], [457, 10, 1, "", "to_undirected_class"], [457, 10, 1, "", "update"]], "graphscope.nx.Graph": [[457, 10, 1, "", "__contains__"], [457, 10, 1, "", "__getitem__"], [460, 8, 1, "", "__init__"], [457, 10, 1, "", "__iter__"], [457, 10, 1, "", "__len__"], [460, 8, 1, "", "_convert_arrow_to_dynamic"], [457, 10, 1, "", "add_edge"], [457, 10, 1, "", "add_edges_from"], [457, 10, 1, "", "add_node"], [457, 10, 1, "", "add_nodes_from"], [457, 10, 1, "", "add_weighted_edges_from"], [457, 11, 1, "", "adj"], [457, 10, 1, "", "adjacency"], [457, 14, 1, "", "adjlist_inner_dict_factory"], [457, 14, 1, "", "adjlist_outer_dict_factory"], [457, 10, 1, "", "clear"], [457, 10, 1, "", "clear_edges"], [457, 10, 1, "", "copy"], [457, 11, 1, "", "degree"], [457, 14, 1, "", "edge_attr_dict_factory"], [457, 10, 1, "", "edge_subgraph"], [457, 11, 1, "", "edges"], [457, 10, 1, "", "get_edge_data"], [457, 14, 1, "", "graph_attr_dict_factory"], [457, 14, 1, "", "graph_cache_factory"], [457, 11, 1, "", "graph_type"], [457, 10, 1, "", "has_edge"], [457, 10, 1, "", "has_node"], [457, 10, 1, "", "is_directed"], [457, 10, 1, "", "is_multigraph"], [457, 11, 1, "", "key"], [457, 11, 1, "", "name"], [457, 10, 1, "", "nbunch_iter"], [457, 10, 1, "", "neighbors"], [457, 14, 1, "", "node_attr_dict_factory"], [457, 14, 1, "", "node_dict_factory"], [457, 11, 1, "", "nodes"], [457, 10, 1, "", "number_of_edges"], [457, 10, 1, "", "number_of_nodes"], [457, 11, 1, "", "op"], [457, 10, 1, "", "order"], [457, 10, 1, "", "remove_edge"], [457, 10, 1, "", "remove_edges_from"], [457, 10, 1, "", "remove_node"], [457, 10, 1, "", "remove_nodes_from"], [457, 11, 1, "", "schema"], [457, 11, 1, "", "session"], [457, 11, 1, "", "session_id"], [457, 10, 1, "", "set_edge_data"], [457, 10, 1, "", "set_node_data"], [457, 11, 1, "", "signature"], [457, 10, 1, "", "size"], [457, 10, 1, "", "subgraph"], [457, 10, 1, "", "to_directed"], [457, 10, 1, "", "to_undirected"], [457, 10, 1, "", "to_undirected_class"], [457, 10, 1, "", "update"]], "graphscope.nx.builtin": [[322, 8, 1, "", "average_clustering"], [322, 8, 1, "", "average_shortest_path_length"], [322, 8, 1, "", "bfs_edges"], [322, 8, 1, "", "clustering"], [322, 8, 1, "", "degree_centrality"], [322, 8, 1, "", "eigenvector_centrality"], [322, 8, 1, "", "has_path"], [322, 8, 1, "", "hits"], [322, 8, 1, "", "in_degree_centrality"], [322, 8, 1, "", "k_core"], [322, 8, 1, "", "katz_centrality"], [322, 8, 1, "", "out_degree_centrality"], [322, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[323, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[324, 8, 1, "", "add_cycle"], [325, 8, 1, "", "add_path"], [326, 8, 1, "", "add_star"], [327, 8, 1, "", "all_neighbors"], [328, 8, 1, "", "common_neighbors"], [329, 8, 1, "", "create_empty_copy"], [330, 8, 1, "", "degree"], [331, 8, 1, "", "degree_histogram"], [332, 8, 1, "", "density"], [333, 8, 1, "", "edge_subgraph"], [334, 8, 1, "", "edges"], [335, 8, 1, "", "freeze"], [336, 8, 1, "", "induced_subgraph"], [337, 8, 1, "", "info"], [338, 8, 1, "", "is_directed"], [339, 8, 1, "", "is_empty"], [340, 8, 1, "", "is_frozen"], [341, 8, 1, "", "is_negatively_weighted"], [342, 8, 1, "", "is_weighted"], [343, 8, 1, "", "neighbors"], [344, 8, 1, "", "nodes"], [345, 8, 1, "", "nodes_with_selfloops"], [346, 8, 1, "", "non_edges"], [347, 8, 1, "", "non_neighbors"], [348, 8, 1, "", "number_of_edges"], [349, 8, 1, "", "number_of_nodes"], [350, 8, 1, "", "number_of_selfloops"], [351, 8, 1, "", "selfloop_edges"], [352, 8, 1, "", "subgraph"], [353, 8, 1, "", "to_directed"], [354, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[456, 13, 0, "-", "atlas"], [456, 13, 0, "-", "classic"], [456, 13, 0, "-", "community"], [456, 13, 0, "-", "degree_seq"], [456, 13, 0, "-", "directed"], [456, 13, 0, "-", "duplication"], [456, 13, 0, "-", "ego"], [456, 13, 0, "-", "expanders"], [456, 13, 0, "-", "geometric"], [456, 13, 0, "-", "harary_graph"], [456, 13, 0, "-", "intersection"], [456, 13, 0, "-", "joint_degree_seq"], [456, 13, 0, "-", "mycielski"], [456, 13, 0, "-", "nonisomorphic_trees"], [456, 13, 0, "-", "small"], [456, 13, 0, "-", "social"], [456, 13, 0, "-", "spectral_graph_forge"], [456, 13, 0, "-", "sudoku"], [456, 13, 0, "-", "trees"], [456, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[355, 8, 1, "", "graph_atlas"], [356, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[357, 8, 1, "", "balanced_tree"], [358, 8, 1, "", "barbell_graph"], [359, 8, 1, "", "binomial_tree"], [360, 8, 1, "", "circulant_graph"], [361, 8, 1, "", "circular_ladder_graph"], [362, 8, 1, "", "complete_graph"], [363, 8, 1, "", "complete_multipartite_graph"], [364, 8, 1, "", "cycle_graph"], [365, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [366, 8, 1, "", "empty_graph"], [367, 8, 1, "", "full_rary_tree"], [368, 8, 1, "", "ladder_graph"], [369, 8, 1, "", "lollipop_graph"], [370, 8, 1, "", "null_graph"], [371, 8, 1, "", "path_graph"], [372, 8, 1, "", "star_graph"], [373, 8, 1, "", "trivial_graph"], [374, 8, 1, "", "turan_graph"], [375, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[376, 8, 1, "", "LFR_benchmark_graph"], [377, 8, 1, "", "caveman_graph"], [378, 8, 1, "", "connected_caveman_graph"], [379, 8, 1, "", "gaussian_random_partition_graph"], [380, 8, 1, "", "planted_partition_graph"], [381, 8, 1, "", "random_partition_graph"], [382, 8, 1, "", "relaxed_caveman_graph"], [383, 8, 1, "", "ring_of_cliques"], [384, 8, 1, "", "stochastic_block_model"], [385, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[386, 8, 1, "", "configuration_model"], [387, 8, 1, "", "degree_sequence_tree"], [388, 8, 1, "", "directed_configuration_model"], [389, 8, 1, "", "directed_havel_hakimi_graph"], [390, 8, 1, "", "expected_degree_graph"], [391, 8, 1, "", "havel_hakimi_graph"], [392, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[393, 8, 1, "", "gn_graph"], [394, 8, 1, "", "gnc_graph"], [395, 8, 1, "", "gnr_graph"], [396, 8, 1, "", "random_k_out_graph"], [397, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[398, 8, 1, "", "duplication_divergence_graph"], [399, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[400, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[401, 8, 1, "", "chordal_cycle_graph"], [402, 8, 1, "", "margulis_gabber_galil_graph"], [403, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[404, 8, 1, "", "geographical_threshold_graph"], [405, 8, 1, "", "random_geometric_graph"], [406, 8, 1, "", "soft_random_geometric_graph"], [407, 8, 1, "", "thresholded_random_geometric_graph"], [408, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[409, 8, 1, "", "hkn_harary_graph"], [410, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[411, 8, 1, "", "general_random_intersection_graph"], [412, 8, 1, "", "k_random_intersection_graph"], [413, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[414, 8, 1, "", "directed_joint_degree_graph"], [415, 8, 1, "", "is_valid_directed_joint_degree"], [416, 8, 1, "", "is_valid_joint_degree"], [417, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[418, 8, 1, "", "mycielski_graph"], [419, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[420, 8, 1, "", "nonisomorphic_trees"], [421, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[422, 8, 1, "", "LCF_graph"], [423, 8, 1, "", "bull_graph"], [424, 8, 1, "", "chvatal_graph"], [425, 8, 1, "", "cubical_graph"], [426, 8, 1, "", "desargues_graph"], [427, 8, 1, "", "diamond_graph"], [428, 8, 1, "", "dodecahedral_graph"], [429, 8, 1, "", "frucht_graph"], [430, 8, 1, "", "heawood_graph"], [431, 8, 1, "", "house_graph"], [432, 8, 1, "", "house_x_graph"], [433, 8, 1, "", "icosahedral_graph"], [434, 8, 1, "", "krackhardt_kite_graph"], [435, 8, 1, "", "make_small_graph"], [436, 8, 1, "", "moebius_kantor_graph"], [437, 8, 1, "", "octahedral_graph"], [438, 8, 1, "", "pappus_graph"], [439, 8, 1, "", "petersen_graph"], [440, 8, 1, "", "sedgewick_maze_graph"], [441, 8, 1, "", "tetrahedral_graph"], [442, 8, 1, "", "truncated_cube_graph"], [443, 8, 1, "", "truncated_tetrahedron_graph"], [444, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[445, 8, 1, "", "davis_southern_women_graph"], [446, 8, 1, "", "florentine_families_graph"], [447, 8, 1, "", "karate_club_graph"], [448, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[449, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[450, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[451, 8, 1, "", "prefix_tree"], [452, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[453, 8, 1, "", "triad_graph"]], "networkx.generators": [[456, 13, 0, "-", "internet_as_graphs"], [456, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[454, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[455, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 226, 236, 317, 470, 472], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 226, 305, 322, 472, 474], "all": [0, 31, 32, 36, 41], "pair": 0, "shortest": 0, "path": [0, 219, 221, 223], "length": 0, "attribut": [0, 20, 306, 323], "assort": 0, "averag": 0, "degre": [0, 330, 456], "connect": [0, 29, 30, 122, 193, 197, 214, 222, 470, 477], "between": [0, 219, 466], "central": [0, 17], "breadth": 0, "first": [0, 210], "search": 0, "cdlp": 0, "close": [0, 197, 477], "cluster": [0, 27, 30, 33, 41, 210, 232, 234], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 214], "label": [0, 221, 223, 236, 306, 469, 490], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 47, 221, 230, 242, 305, 309, 311, 314, 317], "singl": [0, 49, 207], "sourc": [0, 17, 31, 32, 46, 47, 221, 252, 306, 312, 315, 316], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 46, 49, 199, 213, 470], "aggreg": [1, 219, 221, 223, 227], "local": [1, 7, 32, 36, 38, 41, 51, 212, 213, 221, 228, 229, 233, 235, 469, 470], "vertex": [1, 10, 24, 47, 223, 236, 254, 463, 469, 490], "map": [1, 47, 51, 203, 466], "support": [1, 11, 23, 47, 216, 221, 226], "deploy": [2, 27, 38, 49, 209, 210], "gae": [2, 34, 239, 474, 478], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 199, 210, 470], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 193, 214, 222, 226, 246, 462, 470, 474, 482], "sdk": [2, 16, 34, 122, 193, 197, 201, 222, 250], "helm": [2, 29, 49], "execut": [2, 34, 215, 237], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 46, 47, 48, 49, 122, 193, 200, 206, 207, 209, 215, 218, 219, 223, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 305, 307, 308, 309, 310, 311, 313, 317, 319, 321, 323, 456, 457, 459, 460, 466, 468, 469, 470, 471, 472, 478], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 206, 209, 226, 237, 238, 240, 245, 247, 248, 478], "uninstal": [2, 29, 470], "design": [3, 9, 34, 211, 226, 227, 237, 315, 469], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 51, 209, 213, 226, 228, 229, 233, 234, 235, 237, 245, 247, 469, 478], "dev": [4, 32, 36, 41, 51, 212, 228], "test": [4, 36, 37, 41, 51, 193, 212, 228, 234, 235, 312], "setup": [4, 32], "understand": [4, 51], "codebas": [4, 51], "make": [4, 20], "modif": 4, "build": [4, 17, 32, 36, 41, 51, 212, 228, 252, 305, 312, 470, 490], "faq": [5, 219], "program": [6, 12, 14, 34, 207, 315], "model": [6, 12, 14, 15, 16, 17, 24, 34, 48, 200, 227, 232, 233, 234, 235, 239, 242, 305, 313, 317, 469, 470], "flash": [6, 15, 239], "motiv": [6, 9, 211, 237, 469], "The": [6, 19, 30, 200, 211, 468], "overview": [6, 9, 12, 200, 209, 313, 470], "api": [6, 9, 12, 19, 20, 44, 122, 193, 194, 215, 247, 250, 251, 306, 317, 458, 462, 486], "strong": 6, "express": [6, 221, 223], "implement": [6, 15, 17, 37, 315, 469], "architectur": [6, 12, 211, 466], "optim": [6, 13, 218, 219, 235], "get": [7, 17, 37, 122, 193, 197, 205, 213, 221, 229, 238, 312, 467], "start": [7, 46, 51, 122, 193, 197, 205, 212, 213, 223, 229, 238, 317, 467], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 51, 122, 193, 197, 199, 209, 213, 228, 229, 312, 470, 477], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 207, 213, 221, 229, 234, 312], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 195, 196, 202, 207, 209, 213, 229, 237, 240, 242, 243, 244, 247, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 466, 468, 478, 482, 486, 487], "what": [7, 14, 213, 219, 229, 240, 242, 243], "": [7, 213, 219, 229, 247], "next": [7, 213, 229, 243], "guid": [8, 35, 36, 50, 220, 231, 470, 474, 475], "exampl": [8, 17, 22, 23, 86, 87, 93, 96, 102, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 220, 221, 231, 474, 475], "ingress": [9, 239], "increment": [9, 12], "messag": [9, 227], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 207, 307, 315], "runtim": [9, 34, 315], "kei": [10, 200, 215, 219, 226, 296], "concept": [10, 469], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 47, 223, 236, 323, 334, 459, 469, 490], "cut": [10, 469], "vertic": [10, 223, 236, 490], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 20, 454, 455, 458], "compat": [11, 219], "convert": 11, "nx": [11, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453], "oper": [11, 20, 28, 216, 223, 292, 293, 294, 295, 296, 297, 315, 461], "storag": [12, 33, 34, 209, 237, 466, 469], "layer": [12, 237], "grape": [12, 17, 239, 252], "ffi": 12, "comput": [12, 207, 209, 237, 469], "applic": [12, 15, 22, 23, 223, 237, 472], "perform": [13, 19, 34, 219, 226, 245], "tune": 13, "memori": [13, 236, 471], "footprint": 13, "properti": [13, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 216, 219, 221, 223, 236, 468, 469, 490], "data": [13, 46, 47, 48, 49, 122, 193, 207, 210, 216, 219, 236, 306, 313, 316, 317, 468, 470], "structur": [13, 122, 193, 216, 252, 323], "usag": [13, 193, 219, 236], "estim": [13, 465], "pie": [14, 16, 17, 18, 239, 250, 480], "i": [14, 221, 240, 242, 243], "workflow": [14, 226, 466], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 223, 225, 232, 233, 234, 235, 246], "develop": [15, 16, 17, 18, 22, 23, 36, 50, 51, 209, 305, 317, 470, 474], "your": [15, 16, 17, 18, 22, 37, 210, 233, 235, 236, 305, 315, 474], "c": [15, 16, 35, 195, 474], "defin": [15, 16, 196, 201, 233, 234, 235, 315, 466], "A": [15, 46, 200, 209, 218], "function": [15, 18, 234, 235, 248, 250, 305, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 464], "integr": [15, 37, 207, 316], "client": [15, 27, 30, 36, 234, 307, 477], "step": [16, 46, 221, 223, 242], "1": [16, 46, 203, 215, 306, 307, 309, 317], "context": [16, 247, 249, 463], "class": [16, 315, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "2": [16, 46, 203, 215, 306, 307, 317, 470], "3": [16, 46, 203, 215, 306, 307, 317, 470], "packag": [16, 31, 32, 234, 312], "4": [16, 46, 203, 215, 306, 317], "gar": 16, "file": [16, 27, 31, 47, 316, 468], "github": [16, 17, 25, 37], "templat": [16, 17, 196], "java": [17, 35, 39, 122, 222, 225, 253, 470, 474], "jar": 17, "own": [17, 18, 22, 210, 236, 305, 315], "prepar": [17, 27, 30, 41, 197, 317], "jdk": [17, 252], "from": [17, 19, 20, 31, 32, 33, 47, 209, 215, 223, 236, 252, 312, 466, 470], "maven": [17, 122], "repositori": 17, "submit": [17, 22, 23, 37, 40, 122, 193, 197], "javasdk": 17, "write": [18, 234, 470], "pregel": [18, 24, 250, 480], "us": [18, 20, 27, 32, 46, 210, 215, 219, 226, 243, 312, 315, 317, 463, 466, 470, 471], "math": [18, 480], "h": [18, 480], "how": [19, 37, 39, 40, 41, 208, 219, 228, 305, 315, 317, 478], "doe": 19, "analysi": [19, 237], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 46, 122, 193, 195, 196, 197, 201, 232, 235], "an": [20, 215, 315], "empti": 20, "ad": [20, 236], "node": [20, 49, 227, 232, 233, 234, 235, 323, 344, 470], "examin": 20, "element": 20, "remov": [20, 210], "constructor": 20, "access": [20, 199], "neighbor": [20, 235, 343], "deepcopi": 20, "subgraph": [20, 219, 221, 227, 230, 242, 352], "edge_subgraph": [20, 333], "copi": [20, 31], "direct": [20, 393, 394, 395, 396, 397, 456], "analyz": 20, "object": [20, 248, 249, 307, 319, 461, 464], "transform": [20, 460], "builtin": [21, 248, 322, 461], "giraph": 22, "try": [22, 46, 317], "some": [22, 223], "app": [22, 23, 247, 248, 256], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 45, 49, 199, 210, 470], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 312], "toward": 23, "centric": [24, 227], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 226, 306], "k8": [27, 232, 234, 478], "kubernet": [27, 30, 33, 38, 41, 232, 482, 487], "launch": [27, 233, 234, 235], "default": [27, 45], "paramet": [27, 86, 87, 91, 93, 96, 102, 157, 158, 163, 165, 167, 173, 234, 236], "frequent": [27, 204], "imag": [27, 32, 41, 312, 470], "uri": 27, "specifi": [27, 236], "number": 27, "worker": [27, 247], "provid": 27, "kubeconfig": 27, "other": [27, 46, 122, 210, 236, 316, 470], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36, 43, 44], "configur": [28, 29, 45, 47, 49, 210, 213, 234, 318, 470], "releas": [29, 37], "offlin": [29, 31, 470], "exist": 30, "vineyard": [30, 212, 239, 471], "lifecycl": 30, "load": [30, 46, 47, 215, 223, 232, 233, 234, 235, 236, 466, 468, 470, 471], "dataset": [30, 215, 236, 470], "anoth": 30, "session": [30, 232, 303, 464], "environ": [31, 32, 36, 41, 51, 212, 215, 228], "wheel": [31, 312, 482], "download": [31, 215], "destin": 31, "extract": [31, 223], "them": [31, 236], "locat": 31, "basic": [31, 223, 306], "gcc": 31, "g": [31, 298], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 482], "maco": [32, 482], "persist": [33, 470], "pv": 33, "pvc": 33, "store": [33, 122, 193, 195, 196, 197, 198, 201, 212, 470], "retor": 33, "framework": [34, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "multi": [34, 463], "languag": [34, 200, 311], "high": [34, 226, 237, 470], "librari": [34, 226, 312], "code": [35, 37, 42, 51, 315, 476], "style": [35, 37, 458, 469], "rust": 35, "script": [35, 234, 477], "linter": 35, "checker": 35, "contain": [36, 51, 228], "dep": [36, 51, 228], "target": [36, 41, 236], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 456], "report": [37, 208], "bug": [37, 208], "request": [37, 40, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173], "featur": [37, 200, 226, 468, 470], "improv": 37, "document": [37, 122, 193], "chang": [37, 477], "pre": 37, "commit": [37, 470], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 221], "suit": 37, "format": [37, 306, 468, 470], "right": 37, "keep": 37, "pull": [37, 40], "updat": [37, 477], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 478], "log": [38, 466, 470, 478], "command": [38, 477], "techniqu": [38, 236], "instrument": 39, "automat": 39, "error": [42, 51, 476], "rest": [44, 194], "item": 45, "interact": [45, 51, 194, 195, 196, 197, 199, 201, 202, 206, 209, 213, 238, 241, 245, 320, 478], "gsctl": [45, 477], "port": [45, 199], "new": [46, 122, 193, 315], "import": [46, 47, 122, 193, 234, 470], "bind": [46, 472], "job": 46, "servic": [46, 51, 122, 193, 197, 199, 210, 212, 470], "more": 46, "complic": 46, "movi": 46, "option": 46, "movie_graph": 46, "yaml": [46, 49], "job_config": 46, "column": 47, "csv": 47, "odp": 47, "tabl": [47, 203, 209, 306], "modern": 47, "breakdown": 47, "entiti": 48, "primit": 48, "type": [48, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 216, 218, 236, 244, 250, 306, 457, 468], "string": 48, "tempor": 48, "arrai": [48, 469], "docker": [49, 51, 228, 312, 482], "quickstart": 49, "multipl": [49, 219, 223, 236], "valu": [49, 219, 221, 223], "queri": [51, 122, 193, 196, 197, 200, 201, 206, 211, 215, 219, 223, 237, 238, 308, 320, 470], "compil": [51, 198, 312, 315], "manual": [51, 212, 236], "enabl": 51, "adminservic": 51, "intern": 51, "http": [51, 86, 87, 93, 96, 102, 157, 158, 165, 167, 173], "baseedgetyp": [52, 123], "baseedgetypevertextypepairrelationsinn": [53, 124], "enum": [53, 54, 63, 78, 80, 83, 89, 92, 98, 99, 105], "relationenum": 53, "baseedgetypevertextypepairrelationsinnerxcsrparam": [54, 125], "edgestoragestrategyenum": 54, "basepropertymeta": [55, 126], "basevertextyp": [56, 127], "basevertextypexcsrparam": [57, 128], "columnmap": [58, 129], "createedgetyp": [59, 130], "creategraphrequest": [60, 131], "creategraphrespons": [61, 132], "creategraphschemarequest": [62, 133], "createprocedurerequest": [63, 134], "typeenum": [63, 83, 105], "createprocedurerespons": [64, 135], "createpropertymeta": [65, 136], "createvertextyp": [66, 137], "datetyp": [67, 138], "edgedata": [68, 139], "edgemap": [69, 140], "edgemappingdestinationvertexmappingsinn": [70, 141], "edgemappingsourcevertexmappingsinn": [71, 142], "edgemappingsourcevertexmappingsinnercolumn": [72, 143], "edgemappingtypetriplet": [73, 144], "edgerequest": [74, 145], "edgestatist": [75, 146], "fixedchar": [76, 147], "fixedcharchar": [77, 148], "gsdatatyp": [78, 149], "primitivetypeenum": [78, 92], "getedgetyp": [79, 150], "getgraphrespons": [80, 151], "storetypeenum": 80, "getgraphschemarespons": [81, 152], "getgraphstatisticsrespons": [82, 153], "getprocedurerespons": [83, 154], "getpropertymeta": [84, 155], "getvertextyp": [85, 156], "graphmanagementapi": [86, 157], "listgraph": [86, 157], "return": [86, 87, 93, 96, 102, 157, 158, 165, 167, 173], "author": [86, 87, 93, 96, 102, 122, 157, 158, 165, 167, 173, 193], "header": [86, 87, 93, 96, 102, 157, 158, 165, 167, 173], "respons": [86, 87, 93, 96, 102, 157, 158, 165, 167, 173], "detail": [86, 87, 93, 96, 102, 157, 158, 165, 167, 173, 469], "creategraph": [86, 157], "bulkload": [86, 157], "deletegraph": [86, 157], "getgraphmeta": [86, 157], "getgraphstatist": [86, 157], "getgraphschema": [86, 157], "jobmanagementapi": 87, "canceljob": [87, 158], "getjobbyid": [87, 158], "listjob": [87, 158], "jobrespons": [88, 159], "jobstatu": [89, 160], "statusenum": 89, "longtext": [90, 161], "primitivetyp": [92, 164], "proceduremanagementapi": 93, "createprocedur": [93, 165], "deleteprocedur": [93, 165], "getprocedur": [93, 165], "listprocedur": [93, 165], "updateprocedur": [93, 165], "queryrequest": [95, 166], "queryserviceapi": [96, 167], "callprocedur": [96, 167], "callprocedureoncurrentgraph": [96, 167], "schemamap": [97, 168], "schemamappingloadingconfig": [98, 169], "importoptionenum": 98, "schemamappingloadingconfigdatasourc": [99, 170], "schemeenum": 99, "schemamappingloadingconfigformat": [100, 171], "schemamappingloadingconfigxcsrparam": [101, 172], "servicemanagementapi": 102, "getservicestatu": [102, 173], "restartservic": [102, 173], "startservic": [102, 173], "stopservic": [102, 173], "servicestatu": [103, 174], "startservicerequest": [104, 175], "storedproceduremeta": [105, 176], "stringtyp": [106, 177], "stringtypestr": [107, 178], "temporaltyp": [108, 179], "temporaltypetempor": [109, 180], "timestamptyp": [110, 181], "typedvalu": [111, 182], "updateprocedurerequest": [112, 183], "uploadfilerespons": [113, 184], "varchar": [114, 185], "varcharvarchar": [115, 186], "vertexdata": [116, 187], "vertexedgerequest": [117, 188], "vertexmap": [118, 189], "vertexrequest": [119, 190], "vertexstatist": [120, 191], "vertextypepairstatist": [121, 192], "refer": [122, 193, 209, 247, 251, 253, 462, 469], "requir": [122, 193], "user": [122, 225, 246, 306, 474, 475], "procedur": [122, 193, 195, 196, 197, 198, 201], "cypher": [122, 193, 196, 197, 198, 200, 214, 216, 226, 241], "delet": [122, 193, 201], "gs_interact": [158, 165, 167, 173], "adminservicejobmanagementapi": 158, "modelproperti": 162, "adminserviceproceduremanagementapi": 165, "adminserviceservicemanagementapi": 173, "pip": [193, 312], "setuptool": 193, "For": [193, 217, 224, 469], "turn": 196, "call": [196, 197, 201], "check": 197, "statu": 197, "restart": [197, 470], "via": [197, 201, 214, 222], "neo4j": [197, 201, 217, 241], "nativ": [197, 201, 226], "tool": [197, 201], "destroi": [197, 470], "instanc": [197, 213, 470], "glossari": [198, 239], "solid": 200, "foundat": 200, "limit": [200, 221, 223, 243, 470], "view": [201, 470], "introduct": [203, 221, 309], "arrowfrag": 203, "0": [203, 215], "\u672f\u8bed": 203, "\u8f7d\u56fe": [203, 490], "\u521d\u59cb\u5316partition": 203, "\u6784\u5efa\u539f\u59cbarrow": 203, "shuffl": 203, "vtabl": 203, "\u6784\u5efavertex": 203, "basicarrowvertexmapbuild": 203, "5": [203, 215, 306], "\u6784\u5efafragment\u51c6\u5907": 203, "\u5904\u7406edg": 203, "basicevfragmentload": 203, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 203, "basicarrowfragmentbuild": 203, "6": 203, "fragment\u6784\u5efa": 203, "\u8bbf\u95eefragment": 203, "\u8bbf\u95ee\u9876\u70b9": 203, "\u8bbf\u95ee\u5185\u90e8\u70b9": 203, "\u8303\u56f4\u5916\u90e8\u70b9": 203, "\u8bbf\u95ee\u5168\u90e8\u70b9": 203, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 203, "\u8bbf\u95ee\u8fb9": 203, "\u8bbf\u95ee\u51fa\u8fb9": 203, "\u8bbf\u95ee\u5165\u8fb9": 203, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 203, "ask": 204, "question": [204, 215], "gle": [205, 227, 475, 478], "workload": [206, 240, 241, 242, 244, 466], "learn": [206, 209, 227, 228, 229, 233, 235, 237, 238, 242, 244, 305, 313, 321, 478], "scientist": 207, "challeng": [207, 240, 242], "handl": [207, 244], "solut": 207, "machin": [207, 233, 235], "pydata": 207, "ecosystem": [207, 217, 224], "One": [209, 238, 463], "stop": [209, 238], "larg": [209, 236, 240, 242], "scale": [209, 473], "system": [209, 244, 316, 318], "alibaba": [209, 306], "flex": [209, 251], "troubleshoot": [209, 470], "util": [209, 477], "indic": 209, "standalon": 210, "gie": [210, 211, 212, 213, 214, 215, 217, 218, 219, 222, 224, 239, 478], "process": [211, 233, 234, 238, 244, 305, 470], "driver": 214, "llm": 215, "assist": 215, "set": [215, 234], "endpoint": 215, "gener": [215, 218, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "sentenc": 215, "construct": [216, 317], "claus": 216, "tinkerpop": [217, 219, 224, 241, 488], "rule": 218, "base": [218, 227], "rbo": 218, "filtermatchrul": 218, "degreefusionrul": 218, "notmatchtoantijoinrul": 218, "fieldtrimrul": 218, "cost": 218, "cbo": 218, "infer": [218, 226], "gremlin": [219, 221, 222, 223, 226, 241, 301, 488], "constraint": 219, "differ": [219, 463], "inner": 219, "id": [219, 221, 223, 469], "expand": [219, 221, 401, 402, 403, 456], "filter": [219, 221, 223], "like": 219, "sql": 219, "group": [219, 221, 223], "appropri": 219, "index": 219, "standard": [221, 468], "v": 221, "e": 221, "out": [221, 223, 317], "inE": [221, 223], "both": [221, 223], "outv": [221, 223], "inv": [221, 223], "otherv": [221, 223], "bothv": [221, 223], "hasid": [221, 223], "haslabel": 221, "ha": 221, "hasnot": 221, "where": [221, 223], "travers": [221, 223, 226, 230, 241, 310], "predic": 221, "dedup": [221, 223], "project": [221, 223, 252], "constant": [221, 223], "valuemap": [221, 223], "elementmap": 221, "select": [221, 223], "count": 221, "fold": [221, 223], "sum": [221, 223], "min": [221, 223], "max": [221, 223], "mean": [221, 223], "groupcount": [221, 223], "h3": 221, "order": [221, 223, 469], "statist": 221, "coin": 221, "union": 221, "match": [221, 223, 241], "ident": 221, "unfold": 221, "syntact": [221, 223], "sugar": [221, 223], "pathexpand": 221, "endv": 221, "properit": 221, "To": 221, "Will": 221, "Not": 221, "repeat": 221, "sideeffect": 221, "consol": [222, 488], "ldbc": 223, "retriev": [223, 469], "appli": [223, 242], "real": 223, "expans": 223, "mani": 223, "point": 223, "after": 223, "pattern": [223, 241], "relat": [223, 236, 466], "syntax": 223, "complex": 223, "bi2": 223, "bi3": 223, "bi4": 223, "left": 223, "part": 223, "bi11": 223, "bi14": 223, "apach": [224, 488], "eas": 226, "interfac": [226, 315, 316, 469], "extens": 226, "gnn": [226, 232, 242, 317, 484], "train": [226, 232, 233, 234, 235, 242, 305], "across": 226, "orchestr": 226, "paradigm": [227, 242], "egograph": 227, "pass": 227, "pipelin": 227, "neighborhood": 230, "neg": [230, 314], "gsl": [230, 311], "classif": [232, 233, 234, 235], "neural": [232, 242], "network": [232, 242, 456], "egographsag": 233, "pyg": [234, 235], "server": [234, 307, 477], "pod": 234, "loader": [234, 236, 319, 490], "main": 234, "evalu": [235, 295], "loaderfor": 235, "valid": 235, "graphsag": 235, "advanc": 236, "deduc": 236, "when": 236, "ambigu": 236, "put": [236, 306], "togeth": [236, 306], "panda": [236, 490], "numpi": [236, 490], "variant": 236, "tip": 236, "reduc": 236, "consumpt": 236, "unifi": [237, 469], "platform": 237, "disaggreg": 237, "divers": 237, "bi": 237, "qp": 237, "task": 238, "quick": [238, 317], "gart": [239, 466], "grin": [239, 469], "graphar": [239, 468], "groot": [239, 470, 478], "gum": 239, "maxgraph": 239, "deprec": 239, "v6d": 239, "gaia": 239, "pegasu": 239, "can": [240, 242], "do": [240, 242], "typic": 242, "introduc": 243, "why": 243, "ar": 243, "case": 243, "posit": 244, "compar": 244, "databas": 244, "variou": 244, "benchmark": 245, "result": [245, 463], "gpu": 245, "reproduc": 245, "fragment": 247, "appasset": 248, "javaapp": 248, "cython": 250, "about": 252, "javadoc": 253, "declar": 255, "load_app": 256, "dag_util": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "add_column": 257, "add_labels_to_graph": 258, "arrow_to_dynam": 259, "bind_app": 260, "clear_edg": 261, "clear_graph": 262, "context_to_datafram": 263, "context_to_numpi": 264, "copy_graph": 265, "create_app": 266, "create_graph": 267, "create_graph_view": 268, "create_load": 269, "create_subgraph": 270, "create_unload_op": 271, "dynamic_to_arrow": 272, "get_context_data": 273, "graph_to_datafram": 274, "graph_to_numpi": 275, "gremlin_to_subgraph": 276, "modify_edg": 277, "modify_vertic": 278, "output": 279, "project_arrow_property_graph": 280, "project_to_simpl": 281, "report_graph": 282, "run_app": 283, "to_data_sink": 284, "to_direct": [285, 353], "to_undirect": [286, 354], "to_vineyard_datafram": 287, "to_vineyard_tensor": 288, "unload_app": 289, "unload_context": 290, "unload_graph": 291, "__init__": 292, "as_op_def": 293, "eval": 294, "signatur": 297, "get_default_sess": 299, "graphlearn": 300, "has_default_sess": 302, "set_opt": 304, "encod": [305, 313], "loss": 305, "weight": 306, "maxcomput": 306, "describ": 307, "topologi": 307, "stand": 307, "alon": 307, "mode": [307, 477], "tensorflow": 312, "git": 312, "clone": 315, "regist": [315, 316], "bytestreamaccessfil": 316, "structuredaccessfil": 316, "writablefil": 316, "scheme": 316, "gl": 317, "self": 323, "loop": 323, "freez": [323, 335], "add_cycl": 324, "add_path": 325, "add_star": 326, "all_neighbor": 327, "common_neighbor": 328, "create_empty_copi": 329, "degree_histogram": 331, "densiti": 332, "induced_subgraph": 336, "info": 337, "is_direct": 338, "is_empti": 339, "is_frozen": 340, "is_negatively_weight": 341, "is_weight": 342, "nodes_with_selfloop": 345, "non_edg": 346, "non_neighbor": 347, "number_of_edg": 348, "number_of_nod": 349, "number_of_selfloop": 350, "selfloop_edg": 351, "atla": [355, 356, 456], "graph_atla": 355, "graph_atlas_g": 356, "classic": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 456], "balanced_tre": 357, "barbell_graph": 358, "binomial_tre": 359, "circulant_graph": 360, "circular_ladder_graph": 361, "complete_graph": 362, "complete_multipartite_graph": 363, "cycle_graph": 364, "dorogovtsev_goltsev_mendes_graph": 365, "empty_graph": 366, "full_rary_tre": 367, "ladder_graph": 368, "lollipop_graph": 369, "null_graph": 370, "path_graph": 371, "star_graph": 372, "trivial_graph": 373, "turan_graph": 374, "wheel_graph": 375, "lfr_benchmark_graph": 376, "caveman_graph": 377, "connected_caveman_graph": 378, "gaussian_random_partition_graph": 379, "planted_partition_graph": 380, "random_partition_graph": 381, "relaxed_caveman_graph": 382, "ring_of_cliqu": 383, "stochastic_block_model": 384, "windmill_graph": 385, "degree_seq": [386, 387, 388, 389, 390, 391, 392], "configuration_model": 386, "degree_sequence_tre": 387, "directed_configuration_model": 388, "directed_havel_hakimi_graph": 389, "expected_degree_graph": 390, "havel_hakimi_graph": 391, "random_degree_sequence_graph": 392, "gn_graph": 393, "gnc_graph": 394, "gnr_graph": 395, "random_k_out_graph": 396, "scale_free_graph": 397, "duplic": [398, 399, 456], "duplication_divergence_graph": 398, "partial_duplication_graph": 399, "ego": [400, 456], "ego_graph": 400, "chordal_cycle_graph": 401, "margulis_gabber_galil_graph": 402, "paley_graph": 403, "geometr": [404, 405, 406, 407, 408, 456], "geographical_threshold_graph": 404, "random_geometric_graph": 405, "soft_random_geometric_graph": 406, "thresholded_random_geometric_graph": 407, "waxman_graph": 408, "harary_graph": [409, 410], "hkn_harary_graph": 409, "hnm_harary_graph": 410, "intersect": [411, 412, 413, 456], "general_random_intersection_graph": 411, "k_random_intersection_graph": 412, "uniform_random_intersection_graph": 413, "joint_degree_seq": [414, 415, 416, 417], "directed_joint_degree_graph": 414, "is_valid_directed_joint_degre": 415, "is_valid_joint_degre": 416, "joint_degree_graph": 417, "mycielski": [418, 419, 456], "mycielski_graph": 418, "mycielskian": 419, "nonisomorphic_tre": [420, 421], "number_of_nonisomorphic_tre": 421, "small": [422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 456], "lcf_graph": 422, "bull_graph": 423, "chvatal_graph": 424, "cubical_graph": 425, "desargues_graph": 426, "diamond_graph": 427, "dodecahedral_graph": 428, "frucht_graph": 429, "heawood_graph": 430, "house_graph": 431, "house_x_graph": 432, "icosahedral_graph": 433, "krackhardt_kite_graph": 434, "make_small_graph": 435, "moebius_kantor_graph": 436, "octahedral_graph": 437, "pappus_graph": 438, "petersen_graph": 439, "sedgewick_maze_graph": 440, "tetrahedral_graph": 441, "truncated_cube_graph": 442, "truncated_tetrahedron_graph": 443, "tutte_graph": 444, "social": [445, 446, 447, 448, 456], "davis_southern_women_graph": 445, "florentine_families_graph": 446, "karate_club_graph": 447, "les_miserables_graph": 448, "spectral_graph_forg": 449, "sudoku": [450, 456], "sudoku_graph": 450, "tree": [451, 452, 456], "prefix_tre": 451, "random_tre": 452, "triad": [453, 456], "triad_graph": 453, "internet_as_graph": 454, "random_internet_as_graph": 454, "stochast": [455, 456], "stochastic_graph": 455, "diverg": 456, "sequenc": 456, "AS": 456, "spectral": 456, "non": 456, "isomorph": 456, "joint": 456, "harari": 456, "digraph": 457, "read": 459, "list": [459, 469], "adjac": 459, "selector": 463, "tensorcontext": 463, "vertexdatacontext": 463, "labeledvertexdatacontext": 463, "vertexpropertycontext": 463, "labeledvertexpropertycontext": 463, "method": 463, "dimension": 463, "rang": 463, "resourc": 465, "bridg": 466, "gap": 466, "oltp": 466, "inform": 468, "save": 468, "predefin": 469, "macro": 469, "partit": [469, 470, 473], "strategi": 469, "guidelin": 469, "handler": 469, "iter": 469, "master": 469, "mirror": 469, "complet": 469, "natur": 469, "trait": 469, "known": 470, "artifacthub": 470, "directori": 470, "common": 470, "modifi": 470, "j": 470, "realtim": 470, "secondari": 470, "trace": 470, "avail": 470, "In": 471, "immut": 471, "repartit": 473, "fennel": 473, "xtrapulp": 473, "hybrid": 473, "line": 477, "scope": 477, "monitor": 479, "\u56fe\u5206\u6790\u5f15\u64ce": 480, "\u5185\u7f6e\u7b97\u6cd5": 480, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 480, "\u4f7f\u7528": 480, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 480, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 480, "\u4e2d\u7684\u51fd\u6570": 480, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 480, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 480, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 480, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 480, "\u90e8\u7f72": 481, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 481, "\u5728aw": 481, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 481, "\u672c\u5730\u90e8\u7f72graphscop": 481, "\u5f00\u53d1\u8005\u6307\u5357": 482, "\u57fa\u4e8e": [482, 487], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 482, "\u6784\u5efa": 482, "\u4ee3\u7801\u98ce\u683c": 482, "\u5e38\u89c1\u95ee\u9898": 483, "\u5feb\u901f\u4e0a\u624b": 484, "\u793a\u4f8b": 484, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 484, "\u521b\u5efa\u4f1a\u8bdd": 484, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 484, "\u56fe\u5206\u6790": 484, "\u56fe\u795e\u7ecf\u7f51\u7edc": 484, "\u5173\u95ed\u4f1a\u8bdd": 484, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 485, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 485, "\u6295\u5f71": 485, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 485, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 485, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 486, "\u76ee\u5f55": [486, 491], "\u53c2\u8003": 486, "\u7d22\u5f15": 486, "\u5b89\u88c5": 487, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 487, "\u5ba2\u6237\u7aef": 487, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 488, "\u5229\u7528python": 488, "\u8fde\u63a5graphscop": 488, "\u5229\u7528java": 488, "\u5f00\u53d1\u63a7\u5236\u53f0": 488, "gremlin\u7f16\u7a0b\u5165\u95e8": 488, "101": 488, "\u56fe\u6570\u636e\u6a21\u578b": 488, "\u67e5\u8be2\u8bed\u8a00": 488, "\u4e00\u4e2a\u4f8b\u5b50": 488, "gremlin\u517c\u5bb9\u6027": 488, "\u5bf9\u6bd4tinkerpop": 488, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 488, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 488, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 488, "\u5df2\u77e5\u9650\u5236": 488, "\u56fe\u5b66\u4e60\u5f15\u64ce": 489, "\u56fe\u5b66\u4e60\u6a21\u578b": 489, "\u6570\u636e\u6a21\u578b": 489, "\u7f16\u7801\u5668": 489, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 489, "\u91c7\u6837": 489, "\u56fe\u6570\u636e\u6d41": 489, "\u6a21\u578b": 489, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 489, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 490, "\u624b\u52a8\u914d\u7f6e\u56fe": 490, "vid_field": 490, "src_label": 490, "dst_label": 490, "src_field": 490, "dst_field": 490, "\u9ad8\u7ea7\u7528\u6cd5": 490, "\u6ca1\u6709\u6b67\u4e49\u65f6": 490, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 490, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 490, "\u591a\u79cd\u8fb9\u5173\u7cfb": 490, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 490, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 490, "\u5b8c\u6574\u7684\u793a\u4f8b": 490, "\u4ece": 490, "\u6216": 490, "\u4e2d\u8f7d\u56fe": 490, "\u7684\u53d8\u79cd": 490, "\u5165\u95e8\u6559\u7a0b": 491}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [199, "prerequisites"], [210, "prerequisites"], [470, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [51, "dev-and-test"], [212, "dev-and-test"], [228, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"], [51, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"], [51, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [237, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [200, "overview"], [209, null], [313, "overview"], [470, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [122, "getting-started"], [193, "getting-started"], [197, "getting-started"], [213, "getting-started"], [229, "getting-started"], [238, "getting-started"], [467, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [122, "installation"], [199, "installation"], [213, "installation"], [229, "installation"], [470, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [213, "whats-the-next"], [229, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [220, "guide-and-examples"], [231, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Build from source": [[17, "build-from-source"], [312, "build-from-source"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, "tutorial-graph-algorithms-with-networkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetworkX APIs": [[20, "tutorial-graph-operations-with-networkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [236, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"], [45, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [51, "dev-environment"], [212, "dev-environment"], [228, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [228, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [456, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to instrument": [[39, "how-to-instrument"]], "Java": [[39, "java"], [470, "java"], [470, "id2"]], "Automatic instrument": [[39, "automatic-instrument"]], "How to Submit Pull-requests": [[40, "how-to-submit-pull-requests"]], "How to Test": [[41, "how-to-test"], [228, "how-to-test"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[41, "build-images"]], "Error Codes": [[42, "error-codes"], [476, "error-codes"]], "Coordinator": [[43, "coordinator"]], "Coordinator RESTFul API": [[44, "coordinator-restful-api"]], "Configurable Items for Deploying Interactive with gsctl": [[45, "configurable-items-for-deploying-interactive-with-gsctl"]], "Default Ports": [[45, "default-ports"]], "Using Custom Graph": [[46, "using-custom-graph"]], "Step 1: Create a New Graph": [[46, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[46, "step-2-import-graph-data"]], "Bind Data Source": [[46, "bind-data-source"]], "Create Data Loading Job": [[46, "create-data-loading-job"]], "Step 3: Start the Service with the New Graph": [[46, "step-3-start-the-service-with-the-new-graph"]], "Step 4: A More Complicated Movies Graph(optional)": [[46, "step-4-a-more-complicated-movies-graph-optional"]], "movie_graph.yaml": [[46, "movie-graph-yaml"]], "import.yaml": [[46, "import-yaml"]], "job_config.yaml": [[46, "job-config-yaml"]], "Try other graphs": [[46, "try-other-graphs"]], "Data Import Configuration": [[47, "data-import-configuration"]], "Supported data source": [[47, "supported-data-source"]], "Column mapping": [[47, "column-mapping"]], "Import from CSV": [[47, "import-from-csv"]], "Import from ODPS Table": [[47, "import-from-odps-table"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[47, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[47, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Configuration Breakdown": [[47, "configuration-breakdown"]], "Loading Configurations": [[47, "loading-configurations"]], "Vertex Mappings": [[47, "vertex-mappings"]], "Edge Mappings": [[47, "edge-mappings"]], "Data Model": [[48, "data-model"]], "Graph Data": [[48, "graph-data"]], "Entity Data": [[48, "entity-data"]], "Primitive Types": [[48, "primitive-types"]], "String Types": [[48, "string-types"]], "Temporal types": [[48, "temporal-types"]], "Array Types": [[48, "array-types"]], "Deployment": [[49, "deployment"]], "Deploy with docker": [[49, "deploy-with-docker"]], "Deploy with helm": [[49, "deploy-with-helm"]], "QuickStart": [[49, "quickstart"]], "Customizing Configuration": [[49, "customizing-configuration"]], "Customize Graph Data.": [[49, "customize-graph-data"]], "Single Node": [[49, "single-node"]], "Multiple nodes": [[49, "multiple-nodes"]], "Customize Values.yaml": [[49, "customize-values-yaml"]], "Development guide": [[50, "development-guide"]], "Install Deps on Local": [[51, "install-deps-on-local"]], "Develop on Docker Container": [[51, "develop-on-docker-container"]], "Interactive Query Engine": [[51, "interactive-query-engine"]], "Compiler": [[51, "compiler"]], "Build Interactive": [[51, "build-interactive"]], "Starting Service Manually": [[51, "starting-service-manually"]], "Enable AdminService": [[51, "enable-adminservice"]], "Start Compiler Service": [[51, "start-compiler-service"]], "Mapping of Internal Code to Http Error Code": [[51, "mapping-of-internal-code-to-http-error-code"]], "BaseEdgeType": [[52, "baseedgetype"], [123, "baseedgetype"]], "Properties": [[52, "properties"], [53, "properties"], [54, "properties"], [55, "properties"], [56, "properties"], [57, "properties"], [58, "properties"], [59, "properties"], [60, "properties"], [61, "properties"], [62, "properties"], [63, "properties"], [64, "properties"], [65, "properties"], [66, "properties"], [67, "properties"], [68, "properties"], [69, "properties"], [70, "properties"], [71, "properties"], [72, "properties"], [73, "properties"], [74, "properties"], [75, "properties"], [76, "properties"], [77, "properties"], [78, "properties"], [79, "properties"], [80, "properties"], [81, "properties"], [82, "properties"], [83, "properties"], [84, "properties"], [85, "properties"], [88, "properties"], [89, "properties"], [90, "properties"], [91, "properties"], [92, "properties"], [94, "properties"], [95, "properties"], [97, "properties"], [98, "properties"], [99, "properties"], [100, "properties"], [101, "properties"], [103, "properties"], [104, "properties"], [105, "properties"], [106, "properties"], [107, "properties"], [108, "properties"], [109, "properties"], [110, "properties"], [111, "properties"], [112, "properties"], [113, "properties"], [114, "properties"], [115, "properties"], [116, "properties"], [117, "properties"], [118, "properties"], [119, "properties"], [120, "properties"], [121, "properties"], [123, "properties"], [124, "properties"], [125, "properties"], [126, "properties"], [127, "properties"], [128, "properties"], [129, "properties"], [130, "properties"], [131, "properties"], [132, "properties"], [133, "properties"], [134, "properties"], [135, "properties"], [136, "properties"], [137, "properties"], [138, "properties"], [139, "properties"], [140, "properties"], [141, "properties"], [142, "properties"], [143, "properties"], [144, "properties"], [145, "properties"], [146, "properties"], [147, "properties"], [148, "properties"], [149, "properties"], [150, "properties"], [151, "properties"], [152, "properties"], [153, "properties"], [154, "properties"], [155, "properties"], [156, "properties"], [159, "properties"], [160, "properties"], [161, "properties"], [162, "properties"], [163, "properties"], [164, "properties"], [166, "properties"], [168, "properties"], [169, "properties"], [170, "properties"], [171, "properties"], [172, "properties"], [174, "properties"], [175, "properties"], [176, "properties"], [177, "properties"], [178, "properties"], [179, "properties"], [180, "properties"], [181, "properties"], [182, "properties"], [183, "properties"], [184, "properties"], [185, "properties"], [186, "properties"], [187, "properties"], [188, "properties"], [189, "properties"], [190, "properties"], [191, "properties"], [192, "properties"]], "BaseEdgeTypeVertexTypePairRelationsInner": [[53, "baseedgetypevertextypepairrelationsinner"], [124, "baseedgetypevertextypepairrelationsinner"]], "Enum: RelationEnum": [[53, "enum-relationenum"]], "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams": [[54, "baseedgetypevertextypepairrelationsinnerxcsrparams"], [125, "baseedgetypevertextypepairrelationsinnerxcsrparams"]], "Enum: EdgeStorageStrategyEnum": [[54, "enum-edgestoragestrategyenum"]], "BasePropertyMeta": [[55, "basepropertymeta"], [126, "basepropertymeta"]], "BaseVertexType": [[56, "basevertextype"], [127, "basevertextype"]], "BaseVertexTypeXCsrParams": [[57, "basevertextypexcsrparams"], [128, "basevertextypexcsrparams"]], "ColumnMapping": [[58, "columnmapping"], [129, "columnmapping"]], "CreateEdgeType": [[59, "createedgetype"], [130, "createedgetype"]], "CreateGraphRequest": [[60, "creategraphrequest"], [131, "creategraphrequest"]], "CreateGraphResponse": [[61, "creategraphresponse"], [132, "creategraphresponse"]], "CreateGraphSchemaRequest": [[62, "creategraphschemarequest"], [133, "creategraphschemarequest"]], "CreateProcedureRequest": [[63, "createprocedurerequest"], [134, "createprocedurerequest"]], "Enum: TypeEnum": [[63, "enum-typeenum"], [83, "enum-typeenum"], [105, "enum-typeenum"]], "CreateProcedureResponse": [[64, "createprocedureresponse"], [135, "createprocedureresponse"]], "CreatePropertyMeta": [[65, "createpropertymeta"], [136, "createpropertymeta"]], "CreateVertexType": [[66, "createvertextype"], [137, "createvertextype"]], "DateType": [[67, "datetype"], [138, "datetype"]], "EdgeData": [[68, "edgedata"], [139, "edgedata"]], "EdgeMapping": [[69, "edgemapping"], [140, "edgemapping"]], "EdgeMappingDestinationVertexMappingsInner": [[70, "edgemappingdestinationvertexmappingsinner"], [141, "edgemappingdestinationvertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInner": [[71, "edgemappingsourcevertexmappingsinner"], [142, "edgemappingsourcevertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInnerColumn": [[72, "edgemappingsourcevertexmappingsinnercolumn"], [143, "edgemappingsourcevertexmappingsinnercolumn"]], "EdgeMappingTypeTriplet": [[73, "edgemappingtypetriplet"], [144, "edgemappingtypetriplet"]], "EdgeRequest": [[74, "edgerequest"], [145, "edgerequest"]], "EdgeStatistics": [[75, "edgestatistics"], [146, "edgestatistics"]], "FixedChar": [[76, "fixedchar"], [147, "fixedchar"]], "FixedCharChar": [[77, "fixedcharchar"], [148, "fixedcharchar"]], "GSDataType": [[78, "gsdatatype"], [149, "gsdatatype"]], "Enum: PrimitiveTypeEnum": [[78, "enum-primitivetypeenum"], [92, "enum-primitivetypeenum"]], "GetEdgeType": [[79, "getedgetype"], [150, "getedgetype"]], "GetGraphResponse": [[80, "getgraphresponse"], [151, "getgraphresponse"]], "Enum: StoreTypeEnum": [[80, "enum-storetypeenum"]], "GetGraphSchemaResponse": [[81, "getgraphschemaresponse"], [152, "getgraphschemaresponse"]], "GetGraphStatisticsResponse": [[82, "getgraphstatisticsresponse"], [153, "getgraphstatisticsresponse"]], "GetProcedureResponse": [[83, "getprocedureresponse"], [154, "getprocedureresponse"]], "GetPropertyMeta": [[84, "getpropertymeta"], [155, "getpropertymeta"]], "GetVertexType": [[85, "getvertextype"], [156, "getvertextype"]], "GraphManagementApi": [[86, "graphmanagementapi"], [157, "graphmanagementapi"]], "ListGraphs": [[86, "listgraphs"], [157, "listgraphs"]], "Example": [[86, "example"], [86, "id1"], [86, "id7"], [86, "id13"], [86, "id19"], [86, "id25"], [86, "id31"], [87, "example"], [87, "id1"], [87, "id7"], [93, "example"], [93, "id1"], [93, "id7"], [93, "id13"], [93, "id19"], [96, "example"], [96, "id1"], [102, "example"], [102, "id1"], [102, "id7"], [102, "id13"], [123, "example"], [124, "example"], [125, "example"], [126, "example"], [127, "example"], [128, "example"], [129, "example"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [157, "id1"], [157, "id7"], [157, "id13"], [157, "id19"], [157, "id25"], [157, "id31"], [158, "example"], [158, "id1"], [158, "id7"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [165, "id1"], [165, "id7"], [165, "id13"], [165, "id19"], [166, "example"], [167, "example"], [167, "id1"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [173, "id1"], [173, "id7"], [173, "id13"], [174, "example"], [175, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"]], "Parameters": [[86, "parameters"], [86, "id2"], [86, "id8"], [86, "id14"], [86, "id20"], [86, "id26"], [86, "id32"], [87, "parameters"], [87, "id2"], [87, "id8"], [93, "parameters"], [93, "id2"], [93, "id8"], [93, "id14"], [93, "id20"], [96, "parameters"], [96, "id2"], [102, "parameters"], [102, "id2"], [102, "id8"], [102, "id14"], [157, "parameters"], [157, "id2"], [157, "id8"], [157, "id14"], [157, "id20"], [157, "id26"], [157, "id32"], [158, "parameters"], [158, "id2"], [158, "id8"], [165, "parameters"], [165, "id2"], [165, "id8"], [165, "id14"], [165, "id20"], [167, "parameters"], [167, "id2"], [173, "parameters"], [173, "id2"], [173, "id8"], [173, "id14"]], "Return type": [[86, "return-type"], [86, "id3"], [86, "id9"], [86, "id15"], [86, "id21"], [86, "id27"], [86, "id33"], [87, "return-type"], [87, "id3"], [87, "id9"], [93, "return-type"], [93, "id3"], [93, "id9"], [93, "id15"], [93, "id21"], [96, "return-type"], [96, "id3"], [102, "return-type"], [102, "id3"], [102, "id9"], [102, "id15"], [157, "return-type"], [157, "id3"], [157, "id9"], [157, "id15"], [157, "id21"], [157, "id27"], [157, "id33"], [158, "return-type"], [158, "id3"], [158, "id9"], [165, "return-type"], [165, "id3"], [165, "id9"], [165, "id15"], [165, "id21"], [167, "return-type"], [167, "id3"], [173, "return-type"], [173, "id3"], [173, "id9"], [173, "id15"]], "Authorization": [[86, "authorization"], [86, "id4"], [86, "id10"], [86, "id16"], [86, "id22"], [86, "id28"], [86, "id34"], [87, "authorization"], [87, "id4"], [87, "id10"], [93, "authorization"], [93, "id4"], [93, "id10"], [93, "id16"], [93, "id22"], [96, "authorization"], [96, "id4"], [102, "authorization"], [102, "id4"], [102, "id10"], [102, "id16"], [157, "authorization"], [157, "id4"], [157, "id10"], [157, "id16"], [157, "id22"], [157, "id28"], [157, "id34"], [158, "authorization"], [158, "id4"], [158, "id10"], [165, "authorization"], [165, "id4"], [165, "id10"], [165, "id16"], [165, "id22"], [167, "authorization"], [167, "id4"], [173, "authorization"], [173, "id4"], [173, "id10"], [173, "id16"]], "HTTP request headers": [[86, "http-request-headers"], [86, "id5"], [86, "id11"], [86, "id17"], [86, "id23"], [86, "id29"], [86, "id35"], [87, "http-request-headers"], [87, "id5"], [87, "id11"], [93, "http-request-headers"], [93, "id5"], [93, "id11"], [93, "id17"], [93, "id23"], [96, "http-request-headers"], [96, "id5"], [102, "http-request-headers"], [102, "id5"], [102, "id11"], [102, "id17"], [157, "http-request-headers"], [157, "id5"], [157, "id11"], [157, "id17"], [157, "id23"], [157, "id29"], [157, "id35"], [158, "http-request-headers"], [158, "id5"], [158, "id11"], [165, "http-request-headers"], [165, "id5"], [165, "id11"], [165, "id17"], [165, "id23"], [167, "http-request-headers"], [167, "id5"], [173, "http-request-headers"], [173, "id5"], [173, "id11"], [173, "id17"]], "HTTP response details": [[86, "http-response-details"], [86, "id6"], [86, "id12"], [86, "id18"], [86, "id24"], [86, "id30"], [86, "id36"], [87, "http-response-details"], [87, "id6"], [87, "id12"], [93, "http-response-details"], [93, "id6"], [93, "id12"], [93, "id18"], [93, "id24"], [96, "http-response-details"], [96, "id6"], [102, "http-response-details"], [102, "id6"], [102, "id12"], [102, "id18"], [157, "http-response-details"], [157, "id6"], [157, "id12"], [157, "id18"], [157, "id24"], [157, "id30"], [157, "id36"], [158, "http-response-details"], [158, "id6"], [158, "id12"], [165, "http-response-details"], [165, "id6"], [165, "id12"], [165, "id18"], [165, "id24"], [167, "http-response-details"], [167, "id6"], [173, "http-response-details"], [173, "id6"], [173, "id12"], [173, "id18"]], "CreateGraph": [[86, "creategraph"], [157, "creategraph"]], "BulkLoading": [[86, "bulkloading"], [157, "bulkloading"]], "DeleteGraph": [[86, "deletegraph"], [157, "deletegraph"]], "GetGraphMeta": [[86, "getgraphmeta"], [157, "getgraphmeta"]], "GetGraphStatistic": [[86, "getgraphstatistic"]], "GetGraphSchema": [[86, "getgraphschema"], [157, "getgraphschema"]], "JobManagementApi": [[87, "jobmanagementapi"]], "CancelJob": [[87, "canceljob"], [158, "canceljob"]], "GetJobById": [[87, "getjobbyid"], [158, "getjobbyid"]], "ListJobs": [[87, "listjobs"], [158, "listjobs"]], "JobResponse": [[88, "jobresponse"], [159, "jobresponse"]], "JobStatus": [[89, "jobstatus"], [160, "jobstatus"]], "Enum: StatusEnum": [[89, "enum-statusenum"]], "LongText": [[90, "longtext"], [161, "longtext"]], "Parameter": [[91, "parameter"], [163, "parameter"]], "PrimitiveType": [[92, "primitivetype"], [164, "primitivetype"]], "ProcedureManagementApi": [[93, "proceduremanagementapi"]], "CreateProcedure": [[93, "createprocedure"], [165, "createprocedure"]], "DeleteProcedure": [[93, "deleteprocedure"], [165, "deleteprocedure"]], "GetProcedure": [[93, "getprocedure"], [165, "getprocedure"]], "ListProcedures": [[93, "listprocedures"], [165, "listprocedures"]], "UpdateProcedure": [[93, "updateprocedure"], [165, "updateprocedure"]], "Property": [[94, "property"], [469, "property"]], "QueryRequest": [[95, "queryrequest"], [166, "queryrequest"]], "QueryServiceApi": [[96, "queryserviceapi"]], "CallProcedure": [[96, "callprocedure"], [167, "callprocedure"]], "CallProcedureOnCurrentGraph": [[96, "callprocedureoncurrentgraph"], [167, "callprocedureoncurrentgraph"]], "SchemaMapping": [[97, "schemamapping"], [168, "schemamapping"]], "SchemaMappingLoadingConfig": [[98, "schemamappingloadingconfig"], [169, "schemamappingloadingconfig"]], "Enum: ImportOptionEnum": [[98, "enum-importoptionenum"]], "SchemaMappingLoadingConfigDataSource": [[99, "schemamappingloadingconfigdatasource"], [170, "schemamappingloadingconfigdatasource"]], "Enum: SchemeEnum": [[99, "enum-schemeenum"]], "SchemaMappingLoadingConfigFormat": [[100, "schemamappingloadingconfigformat"], [171, "schemamappingloadingconfigformat"]], "SchemaMappingLoadingConfigXCsrParams": [[101, "schemamappingloadingconfigxcsrparams"], [172, "schemamappingloadingconfigxcsrparams"]], "ServiceManagementApi": [[102, "servicemanagementapi"]], "GetServiceStatus": [[102, "getservicestatus"], [173, "getservicestatus"]], "RestartService": [[102, "restartservice"], [173, "restartservice"]], "StartService": [[102, "startservice"], [173, "startservice"]], "StopService": [[102, "stopservice"], [173, "stopservice"]], "ServiceStatus": [[103, "servicestatus"], [174, "servicestatus"]], "StartServiceRequest": [[104, "startservicerequest"], [175, "startservicerequest"]], "StoredProcedureMeta": [[105, "storedproceduremeta"], [176, "storedproceduremeta"]], "StringType": [[106, "stringtype"], [177, "stringtype"]], "StringTypeString": [[107, "stringtypestring"], [178, "stringtypestring"]], "TemporalType": [[108, "temporaltype"], [179, "temporaltype"]], "TemporalTypeTemporal": [[109, "temporaltypetemporal"], [180, "temporaltypetemporal"]], "TimeStampType": [[110, "timestamptype"], [181, "timestamptype"]], "TypedValue": [[111, "typedvalue"], [182, "typedvalue"]], "UpdateProcedureRequest": [[112, "updateprocedurerequest"], [183, "updateprocedurerequest"]], "UploadFileResponse": [[113, "uploadfileresponse"], [184, "uploadfileresponse"]], "VarChar": [[114, "varchar"], [185, "varchar"]], "VarCharVarChar": [[115, "varcharvarchar"], [186, "varcharvarchar"]], "VertexData": [[116, "vertexdata"], [187, "vertexdata"]], "VertexEdgeRequest": [[117, "vertexedgerequest"], [188, "vertexedgerequest"]], "VertexMapping": [[118, "vertexmapping"], [189, "vertexmapping"]], "VertexRequest": [[119, "vertexrequest"], [190, "vertexrequest"]], "VertexStatistics": [[120, "vertexstatistics"], [191, "vertexstatistics"]], "VertexTypePairStatistics": [[121, "vertextypepairstatistics"], [192, "vertextypepairstatistics"]], "Java SDK Reference": [[122, "java-sdk-reference"]], "Requirements": [[122, "requirements"]], "Maven users": [[122, "maven-users"]], "Others": [[122, "others"]], "Connect and submit a query": [[122, "connect-and-submit-a-query"], [193, "connect-and-submit-a-query"]], "Create a new graph": [[122, "create-a-new-graph"], [193, "create-a-new-graph"]], "Import data to the graph": [[122, "import-data-to-the-graph"], [193, "import-data-to-the-graph"]], "Create a stored procedure": [[122, "create-a-stored-procedure"], [193, "create-a-stored-procedure"]], "Start the query service on the new graph": [[122, "start-the-query-service-on-the-new-graph"], [193, "start-the-query-service-on-the-new-graph"]], "Submit queries to the new graph": [[122, "submit-queries-to-the-new-graph"], [193, "submit-queries-to-the-new-graph"]], "Submit cypher queries": [[122, "submit-cypher-queries"], [193, "submit-cypher-queries"]], "Query the stored procedure": [[122, "query-the-stored-procedure"]], "Delete the graph": [[122, "delete-the-graph"], [193, "delete-the-graph"]], "Documentation for Service APIs": [[122, "documentation-for-service-apis"], [193, "documentation-for-service-apis"]], "Documentation for Data Structures": [[122, "documentation-for-data-structures"], [193, "documentation-for-data-structures"]], "Documentation for Authorization": [[122, "documentation-for-authorization"]], "GetGraphStatistics": [[157, "getgraphstatistics"]], "gs_interactive.AdminServiceJobManagementApi": [[158, "gs-interactive-adminservicejobmanagementapi"]], "ModelProperty": [[162, "modelproperty"]], "gs_interactive.AdminServiceProcedureManagementApi": [[165, "gs-interactive-adminserviceproceduremanagementapi"]], "gs_interactive.QueryServiceApi": [[167, "gs-interactive-queryserviceapi"]], "gs_interactive.AdminServiceServiceManagementApi": [[173, "gs-interactive-adminserviceservicemanagementapi"]], "Python SDK Reference": [[193, "python-sdk-reference"]], "Requirements.": [[193, "requirements"]], "Installation & Usage": [[193, "installation-usage"]], "pip install": [[193, "pip-install"]], "Setuptools": [[193, "setuptools"]], "Tests": [[193, "tests"]], "Documentation For Authorization": [[193, "documentation-for-authorization"]], "Interactive RESTFul API": [[194, "interactive-restful-api"]], "Create c++ Stored Procedures on GraphScope Interactive": [[195, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[196, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Define a Cypher Stored Procedure": [[196, "define-a-cypher-stored-procedure"]], "Template the Stored Procedure": [[196, "template-the-stored-procedure"]], "Creating Stored Procedure and Calling": [[196, "creating-stored-procedure-and-calling"]], "Preparation": [[197, "preparation"]], "Install Interactive": [[197, "install-interactive"]], "Connect to Interactive Service": [[197, "connect-to-interactive-service"]], "Check Service Status": [[197, "check-service-status"]], "Create a Stored Procedure": [[197, "create-a-stored-procedure"], [201, "create-a-stored-procedure"]], "Restart the service": [[197, "restart-the-service"]], "Call the Stored Procedure": [[197, "call-the-stored-procedure"]], "Call the Stored Procedure via Interactive SDK": [[197, "call-the-stored-procedure-via-interactive-sdk"], [201, "call-the-stored-procedure-via-interactive-sdk"]], "Call the Stored Procedure via Neo4j-native Tools": [[197, "call-the-stored-procedure-via-neo4j-native-tools"], [201, "call-the-stored-procedure-via-neo4j-native-tools"]], "Submit Cypher Queries": [[197, "submit-cypher-queries"]], "Close the connection": [[197, "close-the-connection"], [477, "close-the-connection"]], "Destroy the Interactive Instance": [[197, "destroy-the-interactive-instance"]], "Glossary": [[198, "glossary"], [239, "glossary"]], "Stored Procedure.": [[198, "stored-procedure"]], "Cypher.": [[198, "cypher"]], "Compile.": [[198, "compile"]], "Install and Deploy Interactive": [[199, "install-and-deploy-interactive"]], "Customizing Ports": [[199, "customizing-ports"]], "Service Accessibility": [[199, "service-accessibility"]], "A Solid Foundation": [[200, "a-solid-foundation"]], "Key Features": [[200, "key-features"], [226, "key-features"]], "Property Graph Model and Graph Queries": [[200, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[200, "the-cypher-query-language"]], "Limitations": [[200, "limitations"], [221, "limitations"]], "Stored Procedures": [[201, "stored-procedures"]], "Define a Stored Procedure": [[201, "define-a-stored-procedure"]], "Delete a Stored Procedures": [[201, "delete-a-stored-procedures"]], "Viewing Stored Procedures": [[201, "viewing-stored-procedures"]], "Querying Stored Procedures": [[201, "querying-stored-procedures"]], "GraphScope Interactive": [[202, "graphscope-interactive"]], "Introduction to ArrowFragment": [[203, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[203, "id1"]], "1. \u8f7d\u56fe": [[203, "id2"]], "1.1 \u521d\u59cb\u5316partitioner": [[203, "partitioner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[203, "arrow-table"]], "1.3. Shuffle vtable": [[203, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[203, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[203, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[203, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[203, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[203, "id3"]], "2. \u8bbf\u95eeFragment": [[203, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[203, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[203, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[203, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[203, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[203, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[203, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[203, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[203, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[203, "id13"]], "Frequently Asked Questions": [[204, "frequently-asked-questions"]], "Getting Started for GLE": [[205, "getting-started-for-gle"]], "Graph Workloads": [[206, "graph-workloads"]], "Graph Analytics": [[206, "graph-analytics"]], "Graph Interactive Query": [[206, "graph-interactive-query"]], "Graph Learning": [[206, "graph-learning"], [321, "graph-learning"]], "GraphScope for Data Scientists": [[207, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[207, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[207, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[207, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[207, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[208, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[209, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[209, null]], "GraphScope Flex": [[209, null]], "Graph Analytical Engine": [[209, null], [245, "graph-analytical-engine"]], "Graph Interactive Engine": [[209, null], [245, "graph-interactive-engine"]], "Graph Learning Engine": [[209, null]], "Storage Engine": [[209, null]], "Troubleshooting & Utilities": [[209, null]], "Development": [[209, null]], "Reference": [[209, null], [469, "reference"]], "Indices and tables": [[209, "indices-and-tables"]], "Standalone Deployment for GIE": [[210, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[210, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[210, "remove-the-gie-service"]], "Using Your Own Data": [[210, "using-your-own-data"]], "Deploy on a Cluster": [[210, "deploy-on-a-cluster"]], "Other Useful Configurations": [[210, "other-useful-configurations"]], "Design of GIE": [[211, "design-of-gie"]], "The Motivations": [[211, "the-motivations"]], "The Architecture": [[211, "the-architecture"]], "Query Processing": [[211, "query-processing"]], "Build GIE with Vineyard Store on Local": [[212, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[212, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[212, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[213, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[213, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[214, "gie-for-cypher"]], "Connecting via Python Driver": [[214, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[214, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[215, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[215, "environment"]], "1. Download Datasets": [[215, "download-datasets"]], "2. Load the Graph": [[215, "load-the-graph"]], "3. Set Endpoint and API Key": [[215, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[215, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[215, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[216, "cypher-support"]], "Data Types": [[216, "data-types"], [468, "data-types"]], "Property Types": [[216, "property-types"]], "Structural types": [[216, "structural-types"]], "Constructed Types": [[216, "constructed-types"]], "Operators": [[216, "operators"]], "Clause": [[216, "clause"]], "Neo4j Ecosystem": [[217, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[217, null], [224, null]], "A Generic Graph Optimizer for GIE": [[218, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[218, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[218, "filtermatchrule"]], "DegreeFusionRule": [[218, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[218, "notmatchtoantijoinrule"]], "FieldTrimRule": [[218, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[218, "cost-based-optimizer-cbo"]], "Graph Type Inference": [[218, "graph-type-inference"]], "FAQs for GIE Gremlin Usage": [[219, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[219, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[219, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[219, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[219, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[219, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[219, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[219, "group-by-multiple-keys"]], "group by multiple values:": [[219, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[219, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[219, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[219, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[221, "supported-gremlin-steps"]], "Introduction": [[221, "introduction"]], "Standard Steps": [[221, "standard-steps"]], "Source": [[221, "source"]], "V()": [[221, "v"]], "E()": [[221, "e"]], "Expand": [[221, "expand"]], "outE()": [[221, "oute"]], "inE()": [[221, "ine"]], "bothE()": [[221, "bothe"]], "out()": [[221, "out"], [221, "id7"]], "in()": [[221, "in"], [221, "id8"]], "both()": [[221, "both"], [221, "id9"]], "outV()": [[221, "outv"]], "inV()": [[221, "inv"]], "otherV()": [[221, "otherv"]], "bothV()": [[221, "bothv"]], "Filter": [[221, "filter"]], "hasId()": [[221, "hasid"], [223, "hasid"]], "hasLabel()": [[221, "haslabel"]], "has()": [[221, "has"]], "hasNot()": [[221, "hasnot"]], "is()": [[221, "is"]], "where(traversal)": [[221, "where-traversal"]], "where(predicate)": [[221, "where-predicate"]], "not(traversal)": [[221, "not-traversal"]], "dedup()": [[221, "dedup"], [223, "dedup"]], "Project": [[221, "project"]], "id()": [[221, "id"]], "label()": [[221, "label"]], "constant()": [[221, "constant"], [223, "constant"]], "valueMap()": [[221, "valuemap"], [223, "valuemap"]], "values()": [[221, "values"]], "elementMap()": [[221, "elementmap"]], "select()": [[221, "select"], [223, "select"]], "Aggregate": [[221, "aggregate"]], "count()": [[221, "count"]], "fold()": [[221, "fold"], [223, "fold"]], "sum()": [[221, "sum"]], "min()": [[221, "min"]], "max()": [[221, "max"]], "mean()": [[221, "mean"]], "group()": [[221, "group"], [223, "group"]], "groupCount()": [[221, "groupcount"], [223, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[221, "order"]], "order()": [[221, "id1"]], "Statistics": [[221, "statistics"]], "limit()": [[221, "limit"]], "coin()": [[221, "coin"]], "sample()": [[221, "sample"]], "Union": [[221, "union"]], "union()": [[221, "id2"]], "Match": [[221, "match"]], "match()": [[221, "id3"]], "Subgraph": [[221, "subgraph"]], "subgraph()": [[221, "id4"]], "Identity": [[221, "identity"]], "identity()": [[221, "id5"]], "Unfold": [[221, "unfold"]], "unfold()": [[221, "id6"], [221, "id10"]], "Syntactic Sugars": [[221, "syntactic-sugars"]], "PathExpand": [[221, "pathexpand"]], "endV()": [[221, "endv"]], "Getting Properites": [[221, "getting-properites"]], "Expression": [[221, "expression"]], "Running Examples": [[221, "running-examples"]], "Aggregate (Group)": [[221, "aggregate-group"]], "To be Supported": [[221, "to-be-supported"]], "path()": [[221, "path"]], "local()": [[221, "local"]], "Will Not be Supported": [[221, "will-not-be-supported"]], "repeat()": [[221, "repeat"]], "properties()": [[221, "properties"]], "sideEffect": [[221, "sideeffect"]], "branch": [[221, "branch"]], "GIE for Gremlin": [[222, "gie-for-gremlin"]], "Connecting via Python SDK": [[222, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[222, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[222, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[223, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[223, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[223, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[223, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[223, "apply-some-filters"]], "Extract Property Values": [[223, "extract-property-values"]], "Real Applications": [[223, "real-applications"], [223, "id1"]], "Basic Traversal Query": [[223, "basic-traversal-query"]], "Expansion": [[223, "expansion"]], "out(), in() and both()": [[223, "out-in-and-both"]], "outE(), inE() and bothE()": [[223, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[223, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[223, "multiple-expansion-steps"]], "Expansion from many starting points": [[223, "expansion-from-many-starting-points"]], "Filter & Expansion": [[223, "filter-expansion"]], "Apply filters after expansion": [[223, "apply-filters-after-expansion"]], "Expansion as filters": [[223, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[223, "path-expansion-syntactic-sugar"]], "Pattern Match": [[223, "pattern-match"]], "Relational Operations": [[223, "relational-operations"]], "Filter Steps": [[223, "filter-steps"]], "where()": [[223, "where"]], "Project Steps": [[223, "project-steps"]], "id() and label()": [[223, "id-and-label"]], "Aggregate Steps": [[223, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[223, "sum-min-max-and-mean"]], "Order Step": [[223, "order-step"]], "Limit Step": [[223, "limit-step"]], "Expression(Syntax Sugar)": [[223, "expression-syntax-sugar"]], "Complex Queries": [[223, "complex-queries"]], "LDBC BI2": [[223, "ldbc-bi2"]], "LDBC BI3": [[223, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[223, "ldbc-bi4-left-part"]], "LDBC BI11": [[223, "ldbc-bi11"]], "LDBC BI14": [[223, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[224, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[225, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[226, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[226, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[226, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[226, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[226, "gnn-training-inference"]], "Cloud Native Design": [[226, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[226, "across-engine-workflow-orchestration"]], "Design of GLE": [[227, "design-of-gle"]], "Model Paradigms": [[227, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[227, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[227, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[227, "pipeline-for-learning"]], "Dev on docker container": [[228, "dev-on-docker-container"]], "Build Learning Engine": [[228, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[229, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[230, "graph-sampling"], [309, "graph-sampling"]], "Graph Traversal": [[230, "graph-traversal"], [241, "graph-traversal"], [310, "graph-traversal"]], "Neighborhood Sampling": [[230, "neighborhood-sampling"]], "Subgraph Sampling": [[230, "subgraph-sampling"], [242, "subgraph-sampling"]], "Negative Sampling": [[230, "negative-sampling"], [314, "negative-sampling"]], "GSL": [[230, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[232, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[232, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[232, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[233, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[233, "load-graph"], [235, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[233, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[233, "launch-the-learning-engine"], [235, "launch-the-learning-engine"]], "Train the Model": [[233, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster": [[234, "tutorial-training-a-node-classification-model-pyg-on-a-k8s-cluster"]], "Set parameters & load graph": [[234, "set-parameters-load-graph"]], "Launch the Server Engine": [[234, "launch-the-server-engine"]], "Configure the parameters for client pods": [[234, "configure-the-parameters-for-client-pods"]], "Write training and testing script": [[234, "write-training-and-testing-script"]], "Import packages": [[234, "import-packages"]], "Define test function": [[234, "define-test-function"]], "Define the loader and training process": [[234, "define-the-loader-and-training-process"]], "main function": [[234, "main-function"]], "Run the script": [[234, "run-the-script"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[235, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[235, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[235, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[235, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[235, "train-and-test"]], "Loading Graphs": [[236, "loading-graphs"]], "Load Built-in Datasets": [[236, "load-built-in-datasets"]], "Loading Your Own Datasets": [[236, "loading-your-own-datasets"]], "Adding Vertices": [[236, "adding-vertices"]], "Advanced Usages": [[236, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[236, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[236, "deduce-vertex-from-edges"]], "Multiple relations": [[236, "multiple-relations"]], "Specify data types of properties manually": [[236, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[236, "other-parameters-of-graph"]], "Putting them Together": [[236, "putting-them-together"]], "Loading From Pandas or Numpy": [[236, "loading-from-pandas-or-numpy"]], "From Pandas": [[236, "from-pandas"]], "From Numpy": [[236, "from-numpy"]], "Loader Variants": [[236, "loader-variants"]], "Techniques targeting at large graph": [[236, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[236, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[237, "design-of-graphscope"]], "Unified Graph Computing Platform": [[237, "unified-graph-computing-platform"]], "Application layer": [[237, "application-layer"]], "Execution engine layer": [[237, "execution-engine-layer"]], "Storage layer": [[237, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[237, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[237, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[237, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[237, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[237, "graphscope-for-learning"]], "One-stop Graph Processing": [[238, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[238, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[238, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[238, "graph-learning-quick-start"]], "FLASH": [[239, "flash"]], "GRAPE": [[239, "grape"]], "GAE": [[239, "gae"]], "GART": [[239, "gart"]], "GRIN": [[239, "grin"]], "GraphAr": [[239, "graphar"]], "Groot": [[239, "groot"]], "GUM": [[239, "gum"]], "MaxGraph (deprecated)": [[239, "maxgraph-deprecated"]], "Vineyard, or v6d": [[239, "vineyard-or-v6d"]], "GIE": [[239, "gie"]], "GAIA": [[239, "gaia"]], "Pegasus": [[239, "pegasus"]], "Ingress": [[239, "ingress"]], "PIE-model": [[239, "pie-model"]], "Graph Analytics Workloads": [[240, "graph-analytics-workloads"]], "What is Graph Analytics": [[240, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[240, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[240, "what-can-graphscope-do"], [242, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[241, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[241, "tinkerpop-and-gremlin"]], "Pattern Matching": [[241, "pattern-matching"], [241, "id1"]], "Neo4j and Cypher": [[241, "neo4j-and-cypher"]], "Graph Learning Workloads": [[242, "graph-learning-workloads"]], "What is Graph Neural Network": [[242, "what-is-graph-neural-network"]], "Typical GNN Models": [[242, "typical-gnn-models"]], "Paradigm of Model Training": [[242, "paradigm-of-model-training"]], "Steps of Model Training": [[242, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[242, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[243, "introducing-graphscope"]], "What is GraphScope": [[243, "what-is-graphscope"]], "Why use GraphScope": [[243, "why-use-graphscope"]], "What are the Use Cases": [[243, "what-are-the-use-cases"]], "What are the Limitations": [[243, "what-are-the-limitations"]], "What are the Next": [[243, "what-are-the-next"]], "Positioning of GraphScope": [[244, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[244, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[244, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[244, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[244, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[245, "performance-and-benchmark"]], "Results": [[245, "results"]], "Performance on GPUs": [[245, "performance-on-gpus"]], "Reproducing the results": [[245, "reproducing-the-results"]], "Tutorials for Python Users": [[246, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[247, "analytical-engine-api-reference"]], "Analytical Engine": [[247, "analytical-engine"]], "Fragments in GraphScope": [[247, "fragments-in-graphscope"]], "Analytical Apps": [[247, "analytical-apps"]], "Analytical Workers": [[247, "analytical-workers"]], "App\u2019s Context": [[247, "app-s-context"]], "Analytical App": [[248, "analytical-app"]], "AppAssets": [[248, "appassets"]], "JavaApp": [[248, "javaapp"]], "App object": [[248, "app-object"]], "Functions": [[248, "functions"], [250, "functions"], [323, "functions"]], "BuiltIn apps": [[248, "builtin-apps"]], "Context": [[249, "context"]], "Context object": [[249, "context-object"]], "Cython SDK API": [[250, "cython-sdk-api"]], "Pregel": [[250, "pregel"]], "PIE": [[250, "pie"]], "GraphScope types": [[250, "graphscope-types"]], "Flex API Reference": [[251, "flex-api-reference"]], "About Grape JDK": [[252, "about-grape-jdk"]], "Project Structure": [[252, "project-structure"]], "Building from source": [[252, "building-from-source"]], "Java Reference (javadoc)": [[253, "java-reference-javadoc"]], "graphscope.Vertex": [[254, "graphscope-vertex"]], "graphscope.declare": [[255, "graphscope-declare"]], "graphscope.framework.app.load_app": [[256, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[257, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[258, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[259, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[260, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[261, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[262, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[263, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[264, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[265, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[266, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[267, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[268, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[269, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[270, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[271, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[272, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[273, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[274, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[275, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[276, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[277, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[278, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[279, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[280, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[281, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[282, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[283, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[284, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[285, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[286, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[287, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[288, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[289, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[290, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[291, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[292, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[293, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[294, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[295, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[296, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[297, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[298, "graphscope-g"]], "graphscope.get_default_session": [[299, "graphscope-get-default-session"]], "graphscope.graphlearn": [[300, "graphscope-graphlearn"]], "graphscope.gremlin": [[301, "graphscope-gremlin"]], "graphscope.has_default_session": [[302, "graphscope-has-default-session"]], "graphscope.session": [[303, "graphscope-session"]], "graphscope.set_option": [[304, "graphscope-set-option"]], "Developing Your Own Model": [[305, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[305, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[305, "sampling"]], "Encoder": [[305, "encoder"], [313, "encoder"]], "Loss Function and Training Process": [[305, "loss-function-and-training-process"]], "Data Source": [[306, "data-source"]], "1 Data format": [[306, "data-format"]], "1.1 Basic format": [[306, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[306, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[306, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[306, "label-format-labeled"]], "1.5 Putting together": [[306, "putting-together"]], "2 Data source type": [[306, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[306, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[306, "user-api"]], "Graph Object": [[307, "graph-object"]], "2 Describe the Topology": [[307, "describe-the-topology"]], "3.1 Stand-alone Mode": [[307, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[307, "distributed-mode-client-server-mode"]], "Graph Query": [[308, "graph-query"]], "1 Introduction": [[309, "introduction"]], "Graph Sampling Language\uff08GSL)": [[311, "graph-sampling-language-gsl"]], "Install from pip": [[312, "install-from-pip"]], "Get wheel package": [[312, "get-wheel-package"]], "Install using pip": [[312, "install-using-pip"]], "Install TensorFlow": [[312, "install-tensorflow"]], "Install git": [[312, "install-git"]], "Install dependent libraries": [[312, "install-dependent-libraries"]], "Compile": [[312, "compile"], [315, "compile"]], "Install": [[312, "install"]], "Run test": [[312, "run-test"]], "Docker image": [[312, "docker-image"]], "Graph Learning Model": [[313, "graph-learning-model"]], "Data model": [[313, "data-model"]], "Defining Your Own Operator": [[315, "defining-your-own-operator"]], "Programming Interface": [[315, "programming-interface"]], "Distributed Runtime Design": [[315, "distributed-runtime-design"]], "Implement a New Operator": [[315, "implement-a-new-operator"]], "Clone source code": [[315, "clone-source-code"]], "Implement your operator class": [[315, "implement-your-operator-class"]], "Register Operator": [[315, "register-operator"]], "How to Use an Operator": [[315, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[316, "integrating-other-data-sources"]], "File System Interface": [[316, "file-system-interface"]], "ByteStreamAccessFile": [[316, "bytestreamaccessfile"]], "StructuredAccessFile": [[316, "structuredaccessfile"]], "WritableFile": [[316, "writablefile"]], "Register with Scheme": [[316, "register-with-scheme"]], "Quick Start": [[317, "quick-start"]], "1 Trying out the built-in models": [[317, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[317, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[317, "developing-a-gnn-model"]], "3.1 Data Preparation": [[317, "data-preparation"]], "3.2 Graph Construction": [[317, "graph-construction"]], "3.3 Graph Sampling": [[317, "graph-sampling"]], "3.4 GNN Model": [[317, "gnn-model"]], "System configuration": [[318, "system-configuration"]], "Graph": [[319, "graph"], [323, "graph"], [457, "graph"]], "Graph object": [[319, "graph-object"]], "Loader object": [[319, "loader-object"]], "Graph Functions": [[319, "graph-functions"]], "Interactive Query": [[320, "interactive-query"]], "Builtin algorithms": [[322, "builtin-algorithms"]], "Nodes": [[323, "nodes"]], "Edges": [[323, "edges"]], "Self loops": [[323, "self-loops"]], "Attributes": [[323, "attributes"]], "Freezing graph structure": [[323, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[324, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[325, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[326, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[327, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[328, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[329, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[330, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[331, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[332, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[333, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[334, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[335, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[336, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[337, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[338, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[339, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[340, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[341, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[342, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[343, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[344, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[345, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[346, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[347, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[348, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[349, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[350, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[351, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[352, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[353, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[354, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[355, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[356, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[357, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[358, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[359, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[360, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[361, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[362, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[363, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[364, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[365, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[366, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[367, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[368, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[369, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[370, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[371, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[372, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[373, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[374, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[375, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[376, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[377, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[378, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[379, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[380, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[381, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[382, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[383, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[384, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[385, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[386, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[387, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[388, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[389, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[390, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[391, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[392, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[393, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[394, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[395, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[396, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[397, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[398, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[399, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[400, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[401, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[402, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[403, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[404, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[405, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[406, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[407, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[408, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[409, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[410, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[411, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[412, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[413, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[414, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[415, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[416, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[417, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[418, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[419, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[420, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[421, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[422, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[423, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[424, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[425, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[426, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[427, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[428, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[429, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[430, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[431, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[432, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[433, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[434, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[435, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[436, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[437, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[438, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[439, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[440, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[441, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[442, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[443, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[444, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[445, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[446, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[447, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[448, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[449, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[450, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[451, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[452, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[453, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[454, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[455, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[456, "graph-generators"]], "Atlas": [[456, "module-graphscope.nx.generators.atlas"]], "Classic": [[456, "module-graphscope.nx.generators.classic"]], "Expanders": [[456, "module-graphscope.nx.generators.expanders"]], "Small": [[456, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[456, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[456, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[456, "module-graphscope.nx.generators.directed"]], "Geometric": [[456, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[456, "module-graphscope.nx.generators.ego"]], "Stochastic": [[456, "module-networkx.generators.stochastic"]], "AS graph": [[456, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[456, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[456, "module-graphscope.nx.generators.social"]], "Spectral": [[456, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[456, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[456, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[456, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[456, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[456, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[456, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[456, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[457, "graph-types"]], "DiGraph": [[457, "digraph"]], "NetworkX-style API": [[458, "networkx-style-api"]], "Reading graphs": [[459, "reading-graphs"]], "Edge List": [[459, "edge-list"]], "Adjacency List": [[459, "adjacency-list"]], "Graph Transformation": [[460, "graph-transformation"]], "Operation": [[461, "operation"]], "Operation object": [[461, "operation-object"]], "BuiltIn operations": [[461, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[462, "python-api-reference"]], "Selector": [[463, "selector"]], "Selectors in different context": [[463, "selectors-in-different-context"]], "TensorContext": [[463, "tensorcontext"]], "VertexDataContext": [[463, "vertexdatacontext"]], "LabeledVertexDataContext": [[463, "labeledvertexdatacontext"]], "VertexPropertyContext": [[463, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[463, "labeledvertexpropertycontext"]], "Methods that use selectors": [[463, "methods-that-use-selectors"]], "One-dimensional results": [[463, "one-dimensional-results"]], "Multi-dimensional results": [[463, "multi-dimensional-results"]], "Vertex Range": [[463, "vertex-range"]], "Session": [[464, "session"]], "Session object": [[464, "session-object"]], "Session Functions": [[464, "session-functions"]], "Resources Estimator": [[465, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[466, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[466, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[466, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[466, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[466, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[468, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[468, "the-graphar-file-format"]], "Features": [[468, "features"]], "File Format": [[468, "file-format"]], "Information files": [[468, "information-files"]], "Data files": [[468, "data-files"]], "Property Data Types": [[468, "property-data-types"]], "GraphAr in GraphScope": [[468, "graphar-in-graphscope"]], "Saving Graph Data in GraphAr": [[468, "saving-graph-data-in-graphar"]], "Loading GraphAr Data into GraphScope": [[468, "loading-graphar-data-into-graphscope"]], "GRIN: Graph Retrieval INterface": [[469, "grin-graph-retrieval-interface"]], "Motivations": [[469, "motivations"]], "Unified Graph Retrieval": [[469, "unified-graph-retrieval"]], "GRIN Concepts": [[469, "grin-concepts"]], "Predefined Macros": [[469, "predefined-macros"]], "Partition Strategy": [[469, "partition-strategy"]], "Edge-cut Partition Strategy": [[469, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[469, "vertex-cut-partition-strategy"]], "Property Graph Model": [[469, "property-graph-model"]], "Implementation Guideline": [[469, "implementation-guideline"]], "For computing engine": [[469, "for-computing-engine"]], "For storage engine": [[469, "for-storage-engine"]], "Design Details": [[469, "design-details"]], "Handler": [[469, "handler"]], "Edge": [[469, "edge"]], "List": [[469, "list"]], "Array-style Retrieval": [[469, "array-style-retrieval"]], "List Iterator": [[469, "list-iterator"]], "Label": [[469, "label"], [490, "label"]], "Order": [[469, "order"]], "Master and Mirror": [[469, "master-and-mirror"]], "Local Complete": [[469, "local-complete"]], "Natural ID Trait": [[469, "natural-id-trait"]], "Groot: Persistent Graph Store": [[470, "groot-persistent-graph-store"]], "Known Limitation": [[470, "known-limitation"]], "Deploy Groot": [[470, "deploy-groot"]], "Install from ArtifactHub": [[470, "install-from-artifacthub"]], "Installing from a local directory": [[470, "installing-from-a-local-directory"]], "Common Configurations": [[470, "common-configurations"]], "Connecting to Groot": [[470, "connecting-to-groot"]], "Connection": [[470, "connection"]], "Building and Modifying Graph Models": [[470, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[470, "using-built-in-datasets"]], "Customizing Models and Datasets": [[470, "customizing-models-and-datasets"]], "Querying Data": [[470, "querying-data"]], "Python": [[470, "python"], [470, "id1"]], "Node.js": [[470, "node-js"]], "Data Import": [[470, "data-import"]], "Offline Import": [[470, "offline-import"]], "Prerequisite": [[470, "prerequisite"]], "Data Format": [[470, "data-format"]], "Loading Process": [[470, "loading-process"]], "Build: Building a partitioned graph": [[470, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[470, "loading-graph-partitions"]], "3. Commit to store service": [[470, "commit-to-store-service"]], "Realtime Write": [[470, "realtime-write"]], "Other features": [[470, "other-features"]], "Uninstalling and Restarting": [[470, "uninstalling-and-restarting"]], "Uninstall Groot": [[470, "uninstall-groot"]], "Restart Groot": [[470, "restart-groot"]], "Destroy Groot": [[470, "destroy-groot"]], "Developing Guide": [[470, "developing-guide"]], "Build image": [[470, "build-image"]], "Persistence": [[470, "persistence"]], "Troubleshooting": [[470, "troubleshooting"]], "Viewing logs": [[470, "viewing-logs"]], "Configuring logs": [[470, "configuring-logs"]], "Secondary Instance": [[470, "secondary-instance"]], "Traces": [[470, "traces"]], "Write High-availability": [[470, "write-high-availability"]], "In-memory immutable graphs on Vineyard": [[471, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[471, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[471, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[471, "using-loaded-graphs"]], "Applications and algorithms": [[472, "applications-and-algorithms"]], "Bind application to graph": [[472, "bind-application-to-graph"]], "Built-in algorithms": [[472, "built-in-algorithms"]], "Scaling and repartitioning": [[473, "scaling-and-repartitioning"]], "Fennel": [[473, "fennel"]], "XtraPuLP": [[473, "xtrapulp"]], "Hybrid partitioning": [[473, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[474, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[474, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[474, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[474, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[475, "user-guide-and-examples-of-gle"]], "Command-line Utility gsctl": [[477, "command-line-utility-gsctl"]], "Install/Update gsctl": [[477, "install-update-gsctl"]], "Commands": [[477, "commands"]], "Utility Scripts": [[477, "utility-scripts"]], "Client/Server Mode": [[477, "client-server-mode"]], "Change scope": [[477, "change-scope"]], "How to Find logs": [[478, "how-to-find-logs"]], "Find logs in k8s": [[478, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[478, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[478, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[478, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[478, "find-logs-for-groot"]], "Monitoring": [[479, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[480, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[480, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[480, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[480, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[480, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[480, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[480, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[480, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[480, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[480, "id7"]], "\u90e8\u7f72": [[481, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[481, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[481, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[481, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[482, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[482, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[482, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[482, "python-wheels"]], "Linux": [[482, "linux"]], "macOS": [[482, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[482, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[483, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[484, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[484, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[484, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[484, "id6"]], "\u56fe\u5206\u6790": [[484, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[484, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[484, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[485, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[485, "id2"]], "\u6295\u5f71": [[485, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[485, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[485, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[486, "graphscope"]], "\u76ee\u5f55": [[486, null], [491, null]], "API \u53c2\u8003": [[486, null]], "\u7d22\u5f15": [[486, "id1"]], "\u5b89\u88c5": [[487, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[487, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[487, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[488, "id1"]], "Apache TinkerPop": [[488, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[488, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[488, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[488, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[488, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[488, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[488, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[488, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[488, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[488, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[488, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[488, "id13"]], "\u5df2\u77e5\u9650\u5236": [[488, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[489, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[489, "id2"]], "\u6570\u636e\u6a21\u578b": [[489, "id3"]], "\u7f16\u7801\u5668": [[489, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[489, "id5"]], "\u91c7\u6837": [[489, "id6"]], "\u56fe\u6570\u636e\u6d41": [[489, "id7"]], "\u6a21\u578b": [[489, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[489, "id9"]], "\u8f7d\u56fe": [[490, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[490, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[490, "id4"]], "Build Vertex": [[490, "build-vertex"]], "vertices": [[490, "vertices"]], "properties": [[490, "properties"], [490, "id7"]], "vid_field": [[490, "vid-field"]], "Build Edge": [[490, "build-edge"]], "edges": [[490, "edges"]], "label": [[490, "id6"]], "src_label and dst_label": [[490, "src-label-and-dst-label"]], "src_field and dst_field": [[490, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[490, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[490, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[490, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[490, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[490, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[490, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[490, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[490, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[490, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[490, "numpy"]], "Loader \u7684\u53d8\u79cd": [[490, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[491, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[247, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[247, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[247, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[247, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[247, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[247, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[247, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[247, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[247, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[247, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[247, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[247, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[247, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[247, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[247, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[247, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[247, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[247, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [247, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[247, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[247, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [247, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [247, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [247, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [247, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [247, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [247, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [247, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[247, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[247, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[247, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[247, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[247, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[247, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[247, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[247, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[247, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[247, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[247, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [247, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[247, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[247, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[247, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[247, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[247, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[247, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[247, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[247, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[247, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[247, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[247, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[247, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[247, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[247, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[247, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[247, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[247, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[247, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[247, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[247, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[247, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[247, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[247, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[247, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[247, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[247, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[247, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[247, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[247, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[247, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [247, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[247, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[247, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[247, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[247, "_CPPv4N2gs14DispatchResult9graph_defEv"], [247, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[247, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[247, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[247, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [247, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[247, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[247, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[247, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[247, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[247, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[247, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[247, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[247, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[247, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[247, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[247, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[247, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[247, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[247, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[247, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[247, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[247, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[247, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[247, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[247, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[247, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[247, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[247, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[247, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[247, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [247, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[247, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[247, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[247, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[247, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[247, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[247, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[247, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[247, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[247, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [247, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[247, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[247, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[247, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[247, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[247, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[247, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[247, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[247, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[247, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[247, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[247, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[247, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[247, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[247, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[247, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[247, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[247, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[247, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[247, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[247, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[247, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[247, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[247, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[247, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[247, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[247, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[247, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[247, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[247, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[247, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[247, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[247, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[247, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[247, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[247, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[247, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[247, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[247, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[247, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[247, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[247, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[247, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[247, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[247, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[247, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [247, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[247, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[247, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[247, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[247, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[247, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[247, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[247, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[247, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[247, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[247, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[247, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[247, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[247, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[247, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[247, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [247, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[247, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [247, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[247, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[247, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[247, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[247, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[247, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[247, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[247, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[247, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[247, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[248, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[248, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[248, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[248, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[248, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[248, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[248, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[248, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[248, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[248, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[248, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[248, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[248, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[248, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[248, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[248, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[248, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[248, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[248, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[248, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[248, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[248, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[248, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[248, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[248, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[248, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[248, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[248, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[248, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[248, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[248, "graphscope.louvain"]], "lpa() (in module graphscope)": [[248, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[248, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[248, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[248, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[248, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[248, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[248, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[248, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[248, "graphscope.sssp"]], "triangles() (in module graphscope)": [[248, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[248, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[248, "graphscope.voterank"]], "wcc() (in module graphscope)": [[248, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[249, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[249, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[249, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[249, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[249, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[249, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[249, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[254, "graphscope.Vertex"]], "declare() (in module graphscope)": [[255, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[256, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[257, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[258, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[259, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[260, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[261, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[262, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[263, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[264, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[265, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[266, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[267, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[268, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[269, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[270, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[271, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[272, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[273, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[274, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[275, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[276, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[277, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[278, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[279, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[280, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[281, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[282, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[283, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[284, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[285, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[286, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[287, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[288, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[289, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[290, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[291, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[292, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[293, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[294, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[295, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[296, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[297, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[298, "graphscope.g"]], "get_default_session() (in module graphscope)": [[299, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[300, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[301, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[302, "graphscope.has_default_session"]], "session (in module graphscope)": [[303, "graphscope.session"]], "set_option() (in module graphscope)": [[304, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[319, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[319, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[319, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[319, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[319, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[319, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[319, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[319, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[319, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[319, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[319, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[319, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[319, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[319, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[319, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[319, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[319, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[319, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[320, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[320, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[320, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[320, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[320, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[320, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[320, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[320, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[321, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[321, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[321, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[321, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[321, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[322, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[323, "module-graphscope.nx.classes.function"]], "module": [[323, "module-graphscope.nx.classes.function"], [456, "module-graphscope.nx.generators.atlas"], [456, "module-graphscope.nx.generators.classic"], [456, "module-graphscope.nx.generators.community"], [456, "module-graphscope.nx.generators.degree_seq"], [456, "module-graphscope.nx.generators.directed"], [456, "module-graphscope.nx.generators.duplication"], [456, "module-graphscope.nx.generators.ego"], [456, "module-graphscope.nx.generators.expanders"], [456, "module-graphscope.nx.generators.geometric"], [456, "module-graphscope.nx.generators.harary_graph"], [456, "module-graphscope.nx.generators.intersection"], [456, "module-graphscope.nx.generators.joint_degree_seq"], [456, "module-graphscope.nx.generators.mycielski"], [456, "module-graphscope.nx.generators.nonisomorphic_trees"], [456, "module-graphscope.nx.generators.small"], [456, "module-graphscope.nx.generators.social"], [456, "module-graphscope.nx.generators.spectral_graph_forge"], [456, "module-graphscope.nx.generators.sudoku"], [456, "module-graphscope.nx.generators.trees"], [456, "module-graphscope.nx.generators.triads"], [456, "module-networkx.generators.internet_as_graphs"], [456, "module-networkx.generators.stochastic"], [461, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[324, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[325, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[326, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[327, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[328, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[329, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[330, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[331, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[332, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[333, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[334, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[335, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[336, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[337, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[338, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[339, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[340, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[341, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[342, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[343, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[344, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[345, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[346, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[347, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[348, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[349, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[350, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[351, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[352, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[353, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[354, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[355, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[356, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[357, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[358, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[359, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[360, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[361, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[362, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[363, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[364, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[365, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[366, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[367, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[368, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[369, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[370, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[371, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[372, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[373, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[374, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[375, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[376, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[377, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[378, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[379, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[380, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[381, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[382, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[383, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[384, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[385, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[386, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[387, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[388, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[389, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[390, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[391, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[392, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[393, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[394, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[395, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[396, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[397, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[398, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[399, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[400, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[401, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[402, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[403, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[404, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[405, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[406, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[407, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[408, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[409, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[410, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[411, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[412, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[413, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[414, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[415, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[416, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[417, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[418, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[419, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[420, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[421, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[422, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[423, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[424, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[425, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[426, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[427, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[428, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[429, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[430, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[431, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[432, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[433, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[434, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[435, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[436, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[437, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[438, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[439, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[440, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[441, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[442, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[443, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[444, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[445, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[446, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[447, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[448, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[449, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[450, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[451, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[452, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[453, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[454, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[455, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[456, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[456, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[456, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[456, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[456, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[456, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[456, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[456, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[456, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[456, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[456, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[456, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[456, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[456, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[456, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[456, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[456, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[456, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[456, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[456, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[456, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[456, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[457, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[457, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[457, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[457, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[457, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[457, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[457, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[457, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[459, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[459, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[460, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[460, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[461, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[461, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[464, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[464, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[464, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[464, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[464, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[464, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[464, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[464, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[464, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[464, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[464, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[464, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[464, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[464, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[464, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[464, "graphscope.Session.load_from"]], "restore_from_pvc() (graphscope.session method)": [[464, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[464, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[464, "graphscope.Session.store_to_pvc"]]}})